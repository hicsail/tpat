{"ast":null,"code":"'use strict'; // Last time updated: 2021-03-09 3:20:22 AM UTC\n// ________________\n// RecordRTC v5.6.2\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n// ____________\n// RecordRTC.js\n\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\n\nfunction RecordRTC(mediaStream, config) {\n  if (!mediaStream) {\n    throw 'First parameter is required.';\n  }\n\n  config = config || {\n    type: 'video'\n  };\n  config = new RecordRTCConfiguration(mediaStream, config); // a reference to user's recordRTC object\n\n  var self = this;\n\n  function startRecording(config2) {\n    if (!config.disableLogs) {\n      console.log('RecordRTC version: ', self.version);\n    }\n\n    if (!!config2) {\n      // allow users to set options using startRecording method\n      // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\n      config = new RecordRTCConfiguration(mediaStream, config2);\n    }\n\n    if (!config.disableLogs) {\n      console.log('started recording ' + config.type + ' stream.');\n    }\n\n    if (mediaRecorder) {\n      mediaRecorder.clearRecordedData();\n      mediaRecorder.record();\n      setState('recording');\n\n      if (self.recordingDuration) {\n        handleRecordingDuration();\n      }\n\n      return self;\n    }\n\n    initRecorder(function () {\n      if (self.recordingDuration) {\n        handleRecordingDuration();\n      }\n    });\n    return self;\n  }\n\n  function initRecorder(initCallback) {\n    if (initCallback) {\n      config.initCallback = function () {\n        initCallback();\n        initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\n      };\n    }\n\n    var Recorder = new GetRecorderType(mediaStream, config);\n    mediaRecorder = new Recorder(mediaStream, config);\n    mediaRecorder.record();\n    setState('recording');\n\n    if (!config.disableLogs) {\n      console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\n    }\n  }\n\n  function stopRecording(callback) {\n    callback = callback || function () {};\n\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n\n    if (self.state === 'paused') {\n      self.resumeRecording();\n      setTimeout(function () {\n        stopRecording(callback);\n      }, 1);\n      return;\n    }\n\n    if (self.state !== 'recording' && !config.disableLogs) {\n      console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\n    }\n\n    if (!config.disableLogs) {\n      console.log('Stopped recording ' + config.type + ' stream.');\n    }\n\n    if (config.type !== 'gif') {\n      mediaRecorder.stop(_callback);\n    } else {\n      mediaRecorder.stop();\n\n      _callback();\n    }\n\n    setState('stopped');\n\n    function _callback(__blob) {\n      if (!mediaRecorder) {\n        if (typeof callback.call === 'function') {\n          callback.call(self, '');\n        } else {\n          callback('');\n        }\n\n        return;\n      }\n\n      Object.keys(mediaRecorder).forEach(function (key) {\n        if (typeof mediaRecorder[key] === 'function') {\n          return;\n        }\n\n        self[key] = mediaRecorder[key];\n      });\n      var blob = mediaRecorder.blob;\n\n      if (!blob) {\n        if (__blob) {\n          mediaRecorder.blob = blob = __blob;\n        } else {\n          throw 'Recording failed.';\n        }\n      }\n\n      if (blob && !config.disableLogs) {\n        console.log(blob.type, '->', bytesToSize(blob.size));\n      }\n\n      if (callback) {\n        var url;\n\n        try {\n          url = URL.createObjectURL(blob);\n        } catch (e) {}\n\n        if (typeof callback.call === 'function') {\n          callback.call(self, url);\n        } else {\n          callback(url);\n        }\n      }\n\n      if (!config.autoWriteToDisk) {\n        return;\n      }\n\n      getDataURL(function (dataURL) {\n        var parameter = {};\n        parameter[config.type + 'Blob'] = dataURL;\n        DiskStorage.Store(parameter);\n      });\n    }\n  }\n\n  function pauseRecording() {\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n\n    if (self.state !== 'recording') {\n      if (!config.disableLogs) {\n        console.warn('Unable to pause the recording. Recording state: ', self.state);\n      }\n\n      return;\n    }\n\n    setState('paused');\n    mediaRecorder.pause();\n\n    if (!config.disableLogs) {\n      console.log('Paused recording.');\n    }\n  }\n\n  function resumeRecording() {\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n\n    if (self.state !== 'paused') {\n      if (!config.disableLogs) {\n        console.warn('Unable to resume the recording. Recording state: ', self.state);\n      }\n\n      return;\n    }\n\n    setState('recording'); // not all libs have this method yet\n\n    mediaRecorder.resume();\n\n    if (!config.disableLogs) {\n      console.log('Resumed recording.');\n    }\n  }\n\n  function readFile(_blob) {\n    postMessage(new FileReaderSync().readAsDataURL(_blob));\n  }\n\n  function getDataURL(callback, _mediaRecorder) {\n    if (!callback) {\n      throw 'Pass a callback function over getDataURL.';\n    }\n\n    var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\n\n    if (!blob) {\n      if (!config.disableLogs) {\n        console.warn('Blob encoder did not finish its job yet.');\n      }\n\n      setTimeout(function () {\n        getDataURL(callback, _mediaRecorder);\n      }, 1000);\n      return;\n    }\n\n    if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\n      var webWorker = processInWebWorker(readFile);\n\n      webWorker.onmessage = function (event) {\n        callback(event.data);\n      };\n\n      webWorker.postMessage(blob);\n    } else {\n      var reader = new FileReader();\n      reader.readAsDataURL(blob);\n\n      reader.onload = function (event) {\n        callback(event.target.result);\n      };\n    }\n\n    function processInWebWorker(_function) {\n      try {\n        var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n          type: 'application/javascript'\n        }));\n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n      } catch (e) {}\n    }\n  }\n\n  function handleRecordingDuration(counter) {\n    counter = counter || 0;\n\n    if (self.state === 'paused') {\n      setTimeout(function () {\n        handleRecordingDuration(counter);\n      }, 1000);\n      return;\n    }\n\n    if (self.state === 'stopped') {\n      return;\n    }\n\n    if (counter >= self.recordingDuration) {\n      stopRecording(self.onRecordingStopped);\n      return;\n    }\n\n    counter += 1000; // 1-second\n\n    setTimeout(function () {\n      handleRecordingDuration(counter);\n    }, 1000);\n  }\n\n  function setState(state) {\n    if (!self) {\n      return;\n    }\n\n    self.state = state;\n\n    if (typeof self.onStateChanged.call === 'function') {\n      self.onStateChanged.call(self, state);\n    } else {\n      self.onStateChanged(state);\n    }\n  }\n\n  var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\n\n  function warningLog() {\n    if (config.disableLogs === true) {\n      return;\n    }\n\n    console.warn(WARNING);\n  }\n\n  var mediaRecorder;\n  var returnObject = {\n    /**\r\n     * This method starts the recording.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * var recorder = RecordRTC(mediaStream, {\r\n     *     type: 'video'\r\n     * });\r\n     * recorder.startRecording();\r\n     */\n    startRecording: startRecording,\n\n    /**\r\n     * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n     * @param {function} callback - Callback to get the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     // use either \"this\" or \"recorder\" object; both are identical\r\n     *     video.src = this.toURL();\r\n     *     var blob = this.getBlob();\r\n     * });\r\n     */\n    stopRecording: stopRecording,\n\n    /**\r\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @todo Firefox is unable to pause the recording. Fix it.\r\n     * @example\r\n     * recorder.pauseRecording();  // pause the recording\r\n     * recorder.resumeRecording(); // resume again\r\n     */\n    pauseRecording: pauseRecording,\n\n    /**\r\n     * This method resumes the recording.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.pauseRecording();  // first of all, pause the recording\r\n     * recorder.resumeRecording(); // now resume it\r\n     */\n    resumeRecording: resumeRecording,\n\n    /**\r\n     * This method initializes the recording.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @todo This method should be deprecated.\r\n     * @example\r\n     * recorder.initRecorder();\r\n     */\n    initRecorder: initRecorder,\n\n    /**\r\n     * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * var fiveMinutes = 5 * 1000 * 60;\r\n     * recorder.setRecordingDuration(fiveMinutes, function() {\r\n     *    var blob = this.getBlob();\r\n     *    video.src = this.toURL();\r\n     * });\r\n     * \r\n     * // or otherwise\r\n     * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n     *    var blob = this.getBlob();\r\n     *    video.src = this.toURL();\r\n     * });\r\n     */\n    setRecordingDuration: function (recordingDuration, callback) {\n      if (typeof recordingDuration === 'undefined') {\n        throw 'recordingDuration is required.';\n      }\n\n      if (typeof recordingDuration !== 'number') {\n        throw 'recordingDuration must be a number.';\n      }\n\n      self.recordingDuration = recordingDuration;\n\n      self.onRecordingStopped = callback || function () {};\n\n      return {\n        onRecordingStopped: function (callback) {\n          self.onRecordingStopped = callback;\n        }\n      };\n    },\n\n    /**\r\n     * This method can be used to clear/reset all the recorded data.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\n    clearRecordedData: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      mediaRecorder.clearRecordedData();\n\n      if (!config.disableLogs) {\n        console.log('Cleared old recorded data.');\n      }\n    },\n\n    /**\r\n     * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     var blob = this.getBlob();\r\n     *\r\n     *     var file = new File([blob], 'filename.webm', {\r\n     *         type: 'video/webm'\r\n     *     });\r\n     *\r\n     *     var formData = new FormData();\r\n     *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n     *     uploadToServer(formData);\r\n     * });\r\n     * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n     */\n    getBlob: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      return mediaRecorder.blob;\n    },\n\n    /**\r\n     * Get data-URI instead of Blob.\r\n     * @param {function} callback - Callback to get the Data-URI.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     recorder.getDataURL(function(dataURI) {\r\n     *         video.src = dataURI;\r\n     *     });\r\n     * });\r\n     */\n    getDataURL: getDataURL,\n\n    /**\r\n     * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     video.src = this.toURL();\r\n     * });\r\n     * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n     */\n    toURL: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      return URL.createObjectURL(mediaRecorder.blob);\n    },\n\n    /**\r\n     * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * var internalRecorder = recorder.getInternalRecorder();\r\n     * if(internalRecorder instanceof MultiStreamRecorder) {\r\n     *     internalRecorder.addStreams([newAudioStream]);\r\n     *     internalRecorder.resetVideoStreams([screenStream]);\r\n     * }\r\n     * @returns {Object} Returns internal recording object.\r\n     */\n    getInternalRecorder: function () {\n      return mediaRecorder;\n    },\n\n    /**\r\n     * Invoke save-as dialog to save the recorded blob into your disk.\r\n     * @param {string} fileName - Set your own file name.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     this.save('file-name');\r\n     *\r\n     *     // or manually:\r\n     *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n     * });\r\n     */\n    save: function (fileName) {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      invokeSaveAsDialog(mediaRecorder.blob, fileName);\n    },\n\n    /**\r\n     * This method gets a blob from indexed-DB storage.\r\n     * @param {function} callback - Callback to get the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.getFromDisk(function(dataURL) {\r\n     *     video.src = dataURL;\r\n     * });\r\n     */\n    getFromDisk: function (callback) {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      RecordRTC.getFromDisk(config.type, callback);\n    },\n\n    /**\r\n     * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n     * @type {Array.<Array>}\r\n     * @param {Array} arrayOfWebPImages - Array of webp images.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @todo This method should be deprecated.\r\n     * @example\r\n     * var arrayOfWebPImages = [];\r\n     * arrayOfWebPImages.push({\r\n     *     duration: index,\r\n     *     image: 'data:image/webp;base64,...'\r\n     * });\r\n     * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n     */\n    setAdvertisementArray: function (arrayOfWebPImages) {\n      config.advertisement = [];\n      var length = arrayOfWebPImages.length;\n\n      for (var i = 0; i < length; i++) {\n        config.advertisement.push({\n          duration: i,\n          image: arrayOfWebPImages[i]\n        });\n      }\n    },\n\n    /**\r\n     * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n     * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @readonly\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     var blob = this.blob;\r\n     *\r\n     *     // below one is recommended\r\n     *     var blob = this.getBlob();\r\n     * });\r\n     */\n    blob: null,\n\n    /**\r\n     * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n     * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @readonly\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n     * });\r\n     */\n    bufferSize: 0,\n\n    /**\r\n     * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n     * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @readonly\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n     * });\r\n     */\n    sampleRate: 0,\n\n    /**\r\n     * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n     * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @readonly\r\n     * @example\r\n     * recorder.stopRecording(function() {\r\n     *     var arrayBuffer = this.buffer;\r\n     *     alert(arrayBuffer.byteLength);\r\n     * });\r\n     */\n    buffer: null,\n\n    /**\r\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.reset();\r\n     * recorder.startRecording();\r\n     */\n    reset: function () {\n      if (self.state === 'recording' && !config.disableLogs) {\n        console.warn('Stop an active recorder.');\n      }\n\n      if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\n        mediaRecorder.clearRecordedData();\n      }\n\n      mediaRecorder = null;\n      setState('inactive');\n      self.blob = null;\n    },\n\n    /**\r\n     * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n     * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @instance\r\n     * @example\r\n     * recorder.onStateChanged = function(state) {\r\n     *     console.log('Recorder state: ', state);\r\n     * };\r\n     */\n    onStateChanged: function (state) {\n      if (!config.disableLogs) {\n        console.log('Recorder state changed:', state);\n      }\n    },\n\n    /**\r\n     * A recorder can have inactive, recording, paused or stopped states.\r\n     * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n     * @memberof RecordRTC\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * // this looper function will keep you updated about the recorder's states.\r\n     * (function looper() {\r\n     *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\r\n     *     if(recorder.state === 'stopped') return; // ignore+stop\r\n     *     setTimeout(looper, 1000); // update after every 3-seconds\r\n     * })();\r\n     * recorder.startRecording();\r\n     */\n    state: 'inactive',\n\n    /**\r\n     * Get recorder's readonly state.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @example\r\n     * var state = recorder.getState();\r\n     * @returns {String} Returns recording state.\r\n     */\n    getState: function () {\n      return self.state;\n    },\n\n    /**\r\n     * Destroy RecordRTC instance. Clear all recorders and objects.\r\n     * @method\r\n     * @memberof RecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\n    destroy: function () {\n      var disableLogsCache = config.disableLogs;\n      config = {\n        disableLogs: true\n      };\n      self.reset();\n      setState('destroyed');\n      returnObject = self = null;\n\n      if (Storage.AudioContextConstructor) {\n        Storage.AudioContextConstructor.close();\n        Storage.AudioContextConstructor = null;\n      }\n\n      config.disableLogs = disableLogsCache;\n\n      if (!config.disableLogs) {\n        console.log('RecordRTC is destroyed.');\n      }\n    },\n\n    /**\r\n     * RecordRTC version number\r\n     * @property {String} version - Release version number.\r\n     * @memberof RecordRTC\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * alert(recorder.version);\r\n     */\n    version: '5.6.2'\n  };\n\n  if (!this) {\n    self = returnObject;\n    return returnObject;\n  } // if someone wants to use RecordRTC with the \"new\" keyword.\n\n\n  for (var prop in returnObject) {\n    this[prop] = returnObject[prop];\n  }\n\n  self = this;\n  return returnObject;\n}\n\nRecordRTC.version = '5.6.2';\n\nif (typeof module !== 'undefined'\n/* && !!module.exports*/\n) {\n  module.exports = RecordRTC;\n}\n\nif (typeof define === 'function' && define.amd) {\n  define('RecordRTC', [], function () {\n    return RecordRTC;\n  });\n}\n\nRecordRTC.getFromDisk = function (type, callback) {\n  if (!callback) {\n    throw 'callback is mandatory.';\n  }\n\n  console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\n  DiskStorage.Fetch(function (dataURL, _type) {\n    if (type !== 'all' && _type === type + 'Blob' && callback) {\n      callback(dataURL);\n    }\n\n    if (type === 'all' && callback) {\n      callback(dataURL, _type.replace('Blob', ''));\n    }\n  });\n};\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\n\n\nRecordRTC.writeToDisk = function (options) {\n  console.log('Writing recorded blob(s) to disk!');\n  options = options || {};\n\n  if (options.audio && options.video && options.gif) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.video.getDataURL(function (videoDataURL) {\n        options.gif.getDataURL(function (gifDataURL) {\n          DiskStorage.Store({\n            audioBlob: audioDataURL,\n            videoBlob: videoDataURL,\n            gifBlob: gifDataURL\n          });\n        });\n      });\n    });\n  } else if (options.audio && options.video) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.video.getDataURL(function (videoDataURL) {\n        DiskStorage.Store({\n          audioBlob: audioDataURL,\n          videoBlob: videoDataURL\n        });\n      });\n    });\n  } else if (options.audio && options.gif) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.gif.getDataURL(function (gifDataURL) {\n        DiskStorage.Store({\n          audioBlob: audioDataURL,\n          gifBlob: gifDataURL\n        });\n      });\n    });\n  } else if (options.video && options.gif) {\n    options.video.getDataURL(function (videoDataURL) {\n      options.gif.getDataURL(function (gifDataURL) {\n        DiskStorage.Store({\n          videoBlob: videoDataURL,\n          gifBlob: gifDataURL\n        });\n      });\n    });\n  } else if (options.audio) {\n    options.audio.getDataURL(function (audioDataURL) {\n      DiskStorage.Store({\n        audioBlob: audioDataURL\n      });\n    });\n  } else if (options.video) {\n    options.video.getDataURL(function (videoDataURL) {\n      DiskStorage.Store({\n        videoBlob: videoDataURL\n      });\n    });\n  } else if (options.gif) {\n    options.gif.getDataURL(function (gifDataURL) {\n      DiskStorage.Store({\n        gifBlob: gifDataURL\n      });\n    });\n  }\n}; // __________________________\n// RecordRTC-Configuration.js\n\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\n\n\nfunction RecordRTCConfiguration(mediaStream, config) {\n  if (!config.recorderType && !config.type) {\n    if (!!config.audio && !!config.video) {\n      config.type = 'video';\n    } else if (!!config.audio && !config.video) {\n      config.type = 'audio';\n    }\n  }\n\n  if (config.recorderType && !config.type) {\n    if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder) {\n      config.type = 'video';\n    } else if (config.recorderType === GifRecorder) {\n      config.type = 'gif';\n    } else if (config.recorderType === StereoAudioRecorder) {\n      config.type = 'audio';\n    } else if (config.recorderType === MediaStreamRecorder) {\n      if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n        config.type = 'video';\n      } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n        config.type = 'video';\n      } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\n        config.type = 'audio';\n      } else {// config.type = 'UnKnown';\n      }\n    }\n  }\n\n  if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n    if (!config.mimeType) {\n      config.mimeType = 'video/webm';\n    }\n\n    if (!config.type) {\n      config.type = config.mimeType.split('/')[0];\n    }\n\n    if (!config.bitsPerSecond) {// config.bitsPerSecond = 128000;\n    }\n  } // consider default type=audio\n\n\n  if (!config.type) {\n    if (config.mimeType) {\n      config.type = config.mimeType.split('/')[0];\n    }\n\n    if (!config.type) {\n      config.type = 'audio';\n    }\n  }\n\n  return config;\n} // __________________\n// GetRecorderType.js\n\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\n\n\nfunction GetRecorderType(mediaStream, config) {\n  var recorder; // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n  // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n\n  if (isChrome || isEdge || isOpera) {\n    // Media Stream Recording API has not been implemented in chrome yet;\n    // That's why using WebAudio API to record stereo audio in WAV format\n    recorder = StereoAudioRecorder;\n  }\n\n  if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\n    recorder = MediaStreamRecorder;\n  } // video recorder (in WebM format)\n\n\n  if (config.type === 'video' && (isChrome || isOpera)) {\n    recorder = WhammyRecorder;\n\n    if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\n      recorder = WebAssemblyRecorder;\n    }\n  } // video recorder (in Gif format)\n\n\n  if (config.type === 'gif') {\n    recorder = GifRecorder;\n  } // html2canvas recording!\n\n\n  if (config.type === 'canvas') {\n    recorder = CanvasRecorder;\n  }\n\n  if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n    if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\n      // audio-only recording\n      if (config.type === 'audio') {\n        if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n          recorder = MediaStreamRecorder;\n        } // else recorder = StereoAudioRecorder;\n\n      } else {\n        // video or screen tracks\n        if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\n          recorder = MediaStreamRecorder;\n        }\n      }\n    }\n  }\n\n  if (mediaStream instanceof Array && mediaStream.length) {\n    recorder = MultiStreamRecorder;\n  }\n\n  if (config.recorderType) {\n    recorder = config.recorderType;\n  }\n\n  if (!config.disableLogs && !!recorder && !!recorder.name) {\n    console.log('Using recorderType:', recorder.name || recorder.constructor.name);\n  }\n\n  if (!recorder && isSafari) {\n    recorder = MediaStreamRecorder;\n  }\n\n  return recorder;\n} // _____________\n// MRecordRTC.js\n\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\n\n\nfunction MRecordRTC(mediaStream) {\n  /**\r\n   * This method attaches MediaStream object to {@link MRecordRTC}.\r\n   * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.addStream(MediaStream);\r\n   */\n  this.addStream = function (_mediaStream) {\n    if (_mediaStream) {\n      mediaStream = _mediaStream;\n    }\n  };\n  /**\r\n   * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n   * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * var recorder = new MRecordRTC();\r\n   * recorder.mediaType = {\r\n   *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n   *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n   *     gif  : true  // TRUE or GifRecorder\r\n   * };\r\n   */\n\n\n  this.mediaType = {\n    audio: true,\n    video: true\n  };\n  /**\r\n   * This method starts recording.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.startRecording();\r\n   */\n\n  this.startRecording = function () {\n    var mediaType = this.mediaType;\n    var recorderType;\n    var mimeType = this.mimeType || {\n      audio: null,\n      video: null,\n      gif: null\n    };\n\n    if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\n      mediaType.audio = false;\n    }\n\n    if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n      mediaType.video = false;\n    }\n\n    if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n      mediaType.gif = false;\n    }\n\n    if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\n      throw 'MediaStream must have either audio or video tracks.';\n    }\n\n    if (!!mediaType.audio) {\n      recorderType = null;\n\n      if (typeof mediaType.audio === 'function') {\n        recorderType = mediaType.audio;\n      }\n\n      this.audioRecorder = new RecordRTC(mediaStream, {\n        type: 'audio',\n        bufferSize: this.bufferSize,\n        sampleRate: this.sampleRate,\n        numberOfAudioChannels: this.numberOfAudioChannels || 2,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.audio,\n        timeSlice: this.timeSlice,\n        onTimeStamp: this.onTimeStamp\n      });\n\n      if (!mediaType.video) {\n        this.audioRecorder.startRecording();\n      }\n    }\n\n    if (!!mediaType.video) {\n      recorderType = null;\n\n      if (typeof mediaType.video === 'function') {\n        recorderType = mediaType.video;\n      }\n\n      var newStream = mediaStream;\n\n      if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n        var videoTrack = getTracks(mediaStream, 'video')[0];\n\n        if (isFirefox) {\n          newStream = new MediaStream();\n          newStream.addTrack(videoTrack);\n\n          if (recorderType && recorderType === WhammyRecorder) {\n            // Firefox does NOT supports webp-encoding yet\n            // But Firefox do supports WebAssemblyRecorder\n            recorderType = MediaStreamRecorder;\n          }\n        } else {\n          newStream = new MediaStream();\n          newStream.addTrack(videoTrack);\n        }\n      }\n\n      this.videoRecorder = new RecordRTC(newStream, {\n        type: 'video',\n        video: this.video,\n        canvas: this.canvas,\n        frameInterval: this.frameInterval || 10,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.video,\n        timeSlice: this.timeSlice,\n        onTimeStamp: this.onTimeStamp,\n        workerPath: this.workerPath,\n        webAssemblyPath: this.webAssemblyPath,\n        frameRate: this.frameRate,\n        // used by WebAssemblyRecorder; values: usually 30; accepts any.\n        bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\n\n      });\n\n      if (!mediaType.audio) {\n        this.videoRecorder.startRecording();\n      }\n    }\n\n    if (!!mediaType.audio && !!mediaType.video) {\n      var self = this;\n      var isSingleRecorder = isMediaRecorderCompatible() === true;\n\n      if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\n        isSingleRecorder = false;\n      } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\n        isSingleRecorder = false;\n      }\n\n      if (isSingleRecorder === true) {\n        self.audioRecorder = null;\n        self.videoRecorder.startRecording();\n      } else {\n        self.videoRecorder.initRecorder(function () {\n          self.audioRecorder.initRecorder(function () {\n            // Both recorders are ready to record things accurately\n            self.videoRecorder.startRecording();\n            self.audioRecorder.startRecording();\n          });\n        });\n      }\n    }\n\n    if (!!mediaType.gif) {\n      recorderType = null;\n\n      if (typeof mediaType.gif === 'function') {\n        recorderType = mediaType.gif;\n      }\n\n      this.gifRecorder = new RecordRTC(mediaStream, {\n        type: 'gif',\n        frameRate: this.frameRate || 200,\n        quality: this.quality || 10,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.gif\n      });\n      this.gifRecorder.startRecording();\n    }\n  };\n  /**\r\n   * This method stops recording.\r\n   * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.stopRecording(function(recording){\r\n   *     var audioBlob = recording.audio;\r\n   *     var videoBlob = recording.video;\r\n   *     var gifBlob   = recording.gif;\r\n   * });\r\n   */\n\n\n  this.stopRecording = function (callback) {\n    callback = callback || function () {};\n\n    if (this.audioRecorder) {\n      this.audioRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'audio');\n      });\n    }\n\n    if (this.videoRecorder) {\n      this.videoRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'video');\n      });\n    }\n\n    if (this.gifRecorder) {\n      this.gifRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'gif');\n      });\n    }\n  };\n  /**\r\n   * This method pauses recording.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.pauseRecording();\r\n   */\n\n\n  this.pauseRecording = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.pauseRecording();\n    }\n\n    if (this.videoRecorder) {\n      this.videoRecorder.pauseRecording();\n    }\n\n    if (this.gifRecorder) {\n      this.gifRecorder.pauseRecording();\n    }\n  };\n  /**\r\n   * This method resumes recording.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.resumeRecording();\r\n   */\n\n\n  this.resumeRecording = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.resumeRecording();\n    }\n\n    if (this.videoRecorder) {\n      this.videoRecorder.resumeRecording();\n    }\n\n    if (this.gifRecorder) {\n      this.gifRecorder.resumeRecording();\n    }\n  };\n  /**\r\n   * This method can be used to manually get all recorded blobs.\r\n   * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.getBlob(function(recording){\r\n   *     var audioBlob = recording.audio;\r\n   *     var videoBlob = recording.video;\r\n   *     var gifBlob   = recording.gif;\r\n   * });\r\n   * // or\r\n   * var audioBlob = recorder.getBlob().audio;\r\n   * var videoBlob = recorder.getBlob().video;\r\n   */\n\n\n  this.getBlob = function (callback) {\n    var output = {};\n\n    if (this.audioRecorder) {\n      output.audio = this.audioRecorder.getBlob();\n    }\n\n    if (this.videoRecorder) {\n      output.video = this.videoRecorder.getBlob();\n    }\n\n    if (this.gifRecorder) {\n      output.gif = this.gifRecorder.getBlob();\n    }\n\n    if (callback) {\n      callback(output);\n    }\n\n    return output;\n  };\n  /**\r\n   * Destroy all recorder instances.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.destroy();\r\n   */\n\n\n  this.destroy = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.destroy();\n      this.audioRecorder = null;\n    }\n\n    if (this.videoRecorder) {\n      this.videoRecorder.destroy();\n      this.videoRecorder = null;\n    }\n\n    if (this.gifRecorder) {\n      this.gifRecorder.destroy();\n      this.gifRecorder = null;\n    }\n  };\n  /**\r\n   * This method can be used to manually get all recorded blobs' DataURLs.\r\n   * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.getDataURL(function(recording){\r\n   *     var audioDataURL = recording.audio;\r\n   *     var videoDataURL = recording.video;\r\n   *     var gifDataURL   = recording.gif;\r\n   * });\r\n   */\n\n\n  this.getDataURL = function (callback) {\n    this.getBlob(function (blob) {\n      if (blob.audio && blob.video) {\n        getDataURL(blob.audio, function (_audioDataURL) {\n          getDataURL(blob.video, function (_videoDataURL) {\n            callback({\n              audio: _audioDataURL,\n              video: _videoDataURL\n            });\n          });\n        });\n      } else if (blob.audio) {\n        getDataURL(blob.audio, function (_audioDataURL) {\n          callback({\n            audio: _audioDataURL\n          });\n        });\n      } else if (blob.video) {\n        getDataURL(blob.video, function (_videoDataURL) {\n          callback({\n            video: _videoDataURL\n          });\n        });\n      }\n    });\n\n    function getDataURL(blob, callback00) {\n      if (typeof Worker !== 'undefined') {\n        var webWorker = processInWebWorker(function readFile(_blob) {\n          postMessage(new FileReaderSync().readAsDataURL(_blob));\n        });\n\n        webWorker.onmessage = function (event) {\n          callback00(event.data);\n        };\n\n        webWorker.postMessage(blob);\n      } else {\n        var reader = new FileReader();\n        reader.readAsDataURL(blob);\n\n        reader.onload = function (event) {\n          callback00(event.target.result);\n        };\n      }\n    }\n\n    function processInWebWorker(_function) {\n      var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n        type: 'application/javascript'\n      }));\n      var worker = new Worker(blob);\n      var url;\n\n      if (typeof URL !== 'undefined') {\n        url = URL;\n      } else if (typeof webkitURL !== 'undefined') {\n        url = webkitURL;\n      } else {\n        throw 'Neither URL nor webkitURL detected.';\n      }\n\n      url.revokeObjectURL(blob);\n      return worker;\n    }\n  };\n  /**\r\n   * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.writeToDisk();\r\n   */\n\n\n  this.writeToDisk = function () {\n    RecordRTC.writeToDisk({\n      audio: this.audioRecorder,\n      video: this.videoRecorder,\n      gif: this.gifRecorder\n    });\n  };\n  /**\r\n   * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n   * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n   * @method\r\n   * @memberof MRecordRTC\r\n   * @example\r\n   * recorder.save({\r\n   *     audio: 'audio-file-name',\r\n   *     video: 'video-file-name',\r\n   *     gif  : 'gif-file-name'\r\n   * });\r\n   */\n\n\n  this.save = function (args) {\n    args = args || {\n      audio: true,\n      video: true,\n      gif: true\n    };\n\n    if (!!args.audio && this.audioRecorder) {\n      this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n    }\n\n    if (!!args.video && this.videoRecorder) {\n      this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\n    }\n\n    if (!!args.gif && this.gifRecorder) {\n      this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\n    }\n  };\n}\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\n\n\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\n\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MRecordRTC = MRecordRTC;\n}\n\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n(function (that) {\n  if (!that) {\n    return;\n  }\n\n  if (typeof window !== 'undefined') {\n    return;\n  }\n\n  if (typeof global === 'undefined') {\n    return;\n  }\n\n  global.navigator = {\n    userAgent: browserFakeUserAgent,\n    getUserMedia: function () {}\n  };\n\n  if (!global.console) {\n    global.console = {};\n  }\n\n  if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n    global.console.error = global.console.log = global.console.log || function () {\n      console.log(arguments);\n    };\n  }\n\n  if (typeof document === 'undefined') {\n    /*global document:true */\n    that.document = {\n      documentElement: {\n        appendChild: function () {\n          return '';\n        }\n      }\n    };\n\n    document.createElement = document.captureStream = document.mozCaptureStream = function () {\n      var obj = {\n        getContext: function () {\n          return obj;\n        },\n        play: function () {},\n        pause: function () {},\n        drawImage: function () {},\n        toDataURL: function () {\n          return '';\n        },\n        style: {}\n      };\n      return obj;\n    };\n\n    that.HTMLVideoElement = function () {};\n  }\n\n  if (typeof location === 'undefined') {\n    /*global location:true */\n    that.location = {\n      protocol: 'file:',\n      href: '',\n      hash: ''\n    };\n  }\n\n  if (typeof screen === 'undefined') {\n    /*global screen:true */\n    that.screen = {\n      width: 0,\n      height: 0\n    };\n  }\n\n  if (typeof URL === 'undefined') {\n    /*global screen:true */\n    that.URL = {\n      createObjectURL: function () {\n        return '';\n      },\n      revokeObjectURL: function () {\n        return '';\n      }\n    };\n  }\n  /*global window:true */\n\n\n  that.window = global;\n})(typeof global !== 'undefined' ? global : null); // _____________________________\n// Cross-Browser-Declarations.js\n// animation-frame used in WebM recording\n\n/*jshint -W079 */\n\n\nvar requestAnimationFrame = window.requestAnimationFrame;\n\nif (typeof requestAnimationFrame === 'undefined') {\n  if (typeof webkitRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = webkitRequestAnimationFrame;\n  } else if (typeof mozRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = mozRequestAnimationFrame;\n  } else if (typeof msRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = msRequestAnimationFrame;\n  } else if (typeof requestAnimationFrame === 'undefined') {\n    // via: https://gist.github.com/paulirish/1579671\n    var lastTime = 0;\n    /*global requestAnimationFrame:true */\n\n    requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n}\n/*jshint -W079 */\n\n\nvar cancelAnimationFrame = window.cancelAnimationFrame;\n\nif (typeof cancelAnimationFrame === 'undefined') {\n  if (typeof webkitCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = webkitCancelAnimationFrame;\n  } else if (typeof mozCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = mozCancelAnimationFrame;\n  } else if (typeof msCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = msCancelAnimationFrame;\n  } else if (typeof cancelAnimationFrame === 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n} // WebAudio API representer\n\n\nvar AudioContext = window.AudioContext;\n\nif (typeof AudioContext === 'undefined') {\n  if (typeof webkitAudioContext !== 'undefined') {\n    /*global AudioContext:true */\n    AudioContext = webkitAudioContext;\n  }\n\n  if (typeof mozAudioContext !== 'undefined') {\n    /*global AudioContext:true */\n    AudioContext = mozAudioContext;\n  }\n}\n/*jshint -W079 */\n\n\nvar URL = window.URL;\n\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n  /*global URL:true */\n  URL = webkitURL;\n}\n\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n  // maybe window.navigator?\n  if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n    navigator.getUserMedia = navigator.webkitGetUserMedia;\n  }\n\n  if (typeof navigator.mozGetUserMedia !== 'undefined') {\n    navigator.getUserMedia = navigator.mozGetUserMedia;\n  }\n}\n\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && 'netscape' in window && / rv:/.test(navigator.userAgent);\nvar isChrome = !isOpera && !isEdge && !!navigator.webkitGetUserMedia || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\n  isSafari = false;\n  isChrome = true;\n}\n\nvar MediaStream = window.MediaStream;\n\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n  MediaStream = webkitMediaStream;\n}\n/*global MediaStream:true */\n\n\nif (typeof MediaStream !== 'undefined') {\n  // override \"stop\" method for all browsers\n  if (typeof MediaStream.prototype.stop === 'undefined') {\n    MediaStream.prototype.stop = function () {\n      this.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    };\n  }\n} // below function via: http://goo.gl/B3ae8c\n\n/**\r\n * Return human-readable file size.\r\n * @param {number} bytes - Pass bytes and get formatted string.\r\n * @returns {string} - formatted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\n\nfunction bytesToSize(bytes) {\n  var k = 1000;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n  return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n}\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\n\nfunction invokeSaveAsDialog(file, fileName) {\n  if (!file) {\n    throw 'Blob object is required.';\n  }\n\n  if (!file.type) {\n    try {\n      file.type = 'video/webm';\n    } catch (e) {}\n  }\n\n  var fileExtension = (file.type || 'video/webm').split('/')[1];\n\n  if (fileExtension.indexOf(';') !== -1) {\n    // extended mimetype, e.g. 'video/webm;codecs=vp8,opus'\n    fileExtension = fileExtension.split(';')[0];\n  }\n\n  if (fileName && fileName.indexOf('.') !== -1) {\n    var splitted = fileName.split('.');\n    fileName = splitted[0];\n    fileExtension = splitted[1];\n  }\n\n  var fileFullName = (fileName || Math.round(Math.random() * 9999999999) + 888888888) + '.' + fileExtension;\n\n  if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n    return navigator.msSaveOrOpenBlob(file, fileFullName);\n  } else if (typeof navigator.msSaveBlob !== 'undefined') {\n    return navigator.msSaveBlob(file, fileFullName);\n  }\n\n  var hyperlink = document.createElement('a');\n  hyperlink.href = URL.createObjectURL(file);\n  hyperlink.download = fileFullName;\n  hyperlink.style = 'display:none;opacity:0;color:transparent;';\n  (document.body || document.documentElement).appendChild(hyperlink);\n\n  if (typeof hyperlink.click === 'function') {\n    hyperlink.click();\n  } else {\n    hyperlink.target = '_blank';\n    hyperlink.dispatchEvent(new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true\n    }));\n  }\n\n  URL.revokeObjectURL(hyperlink.href);\n}\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\n\n\nfunction isElectron() {\n  // Renderer process\n  if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n    return true;\n  } // Main process\n\n\n  if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n    return true;\n  } // Detect the user agent when the `nodeIntegration` option is set to true\n\n\n  if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getTracks(stream, kind) {\n  if (!stream || !stream.getTracks) {\n    return [];\n  }\n\n  return stream.getTracks().filter(function (t) {\n    return t.kind === (kind || 'audio');\n  });\n}\n\nfunction setSrcObject(stream, element) {\n  if ('srcObject' in element) {\n    element.srcObject = stream;\n  } else if ('mozSrcObject' in element) {\n    element.mozSrcObject = stream;\n  } else {\n    element.srcObject = stream;\n  }\n}\n/**\r\n * @param {Blob} file - File or Blob object.\r\n * @param {function} callback - Callback function.\r\n * @example\r\n * getSeekableBlob(blob or file, callback);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\n\nfunction getSeekableBlob(inputBlob, callback) {\n  // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\n  if (typeof EBML === 'undefined') {\n    throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\n  }\n\n  var reader = new EBML.Reader();\n  var decoder = new EBML.Decoder();\n  var tools = EBML.tools;\n  var fileReader = new FileReader();\n\n  fileReader.onload = function (e) {\n    var ebmlElms = decoder.decode(this.result);\n    ebmlElms.forEach(function (element) {\n      reader.read(element);\n    });\n    reader.stop();\n    var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\n    var body = this.result.slice(reader.metadataSize);\n    var newBlob = new Blob([refinedMetadataBuf, body], {\n      type: 'video/webm'\n    });\n    callback(newBlob);\n  };\n\n  fileReader.readAsArrayBuffer(inputBlob);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\n  RecordRTC.getTracks = getTracks;\n  RecordRTC.getSeekableBlob = getSeekableBlob;\n  RecordRTC.bytesToSize = bytesToSize;\n  RecordRTC.isElectron = isElectron;\n} // __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\n// Storage.js\n\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\n\nvar Storage = {};\n\nif (typeof AudioContext !== 'undefined') {\n  Storage.AudioContext = AudioContext;\n} else if (typeof webkitAudioContext !== 'undefined') {\n  Storage.AudioContext = webkitAudioContext;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.Storage = Storage;\n}\n\nfunction isMediaRecorderCompatible() {\n  if (isFirefox || isSafari || isEdge) {\n    return true;\n  }\n\n  var nVer = navigator.appVersion;\n  var nAgt = navigator.userAgent;\n  var fullVersion = '' + parseFloat(navigator.appVersion);\n  var majorVersion = parseInt(navigator.appVersion, 10);\n  var nameOffset, verOffset, ix;\n\n  if (isChrome || isOpera) {\n    verOffset = nAgt.indexOf('Chrome');\n    fullVersion = nAgt.substring(verOffset + 7);\n  } // trim the fullVersion string at semicolon/space if present\n\n\n  if ((ix = fullVersion.indexOf(';')) !== -1) {\n    fullVersion = fullVersion.substring(0, ix);\n  }\n\n  if ((ix = fullVersion.indexOf(' ')) !== -1) {\n    fullVersion = fullVersion.substring(0, ix);\n  }\n\n  majorVersion = parseInt('' + fullVersion, 10);\n\n  if (isNaN(majorVersion)) {\n    fullVersion = '' + parseFloat(navigator.appVersion);\n    majorVersion = parseInt(navigator.appVersion, 10);\n  }\n\n  return majorVersion >= 49;\n} // ______________________\n// MediaStreamRecorder.js\n\n/**\r\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\r\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\r\n * @typedef MediaStreamRecorder\r\n * @class\r\n * @example\r\n * var config = {\r\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\r\n *     audioBitsPerSecond : 256 * 8 * 1024,\r\n *     videoBitsPerSecond : 256 * 8 * 1024,\r\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\r\n *     checkForInactiveTracks: true,\r\n *     timeSlice: 1000, // concatenate intervals based blobs\r\n *     ondataavailable: function() {} // get intervals based blobs\r\n * }\r\n * var recorder = new MediaStreamRecorder(mediaStream, config);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\r\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\r\n */\n\n\nfunction MediaStreamRecorder(mediaStream, config) {\n  var self = this;\n\n  if (typeof mediaStream === 'undefined') {\n    throw 'First argument \"MediaStream\" is required.';\n  }\n\n  if (typeof MediaRecorder === 'undefined') {\n    throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n  }\n\n  config = config || {\n    // bitsPerSecond: 256 * 8 * 1024,\n    mimeType: 'video/webm'\n  };\n\n  if (config.type === 'audio') {\n    if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\n      var stream;\n\n      if (!!navigator.mozGetUserMedia) {\n        stream = new MediaStream();\n        stream.addTrack(getTracks(mediaStream, 'audio')[0]);\n      } else {\n        // webkitMediaStream\n        stream = new MediaStream(getTracks(mediaStream, 'audio'));\n      }\n\n      mediaStream = stream;\n    }\n\n    if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n      config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n    }\n\n    if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n      // forcing better codecs on Firefox (via #166)\n      config.mimeType = 'audio/ogg';\n    }\n  }\n\n  var arrayOfBlobs = [];\n  /**\r\n   * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * var arrayOfBlobs = recorder.getArrayOfBlobs();\r\n   * @returns {Array} Returns array of recorded blobs.\r\n   */\n\n  this.getArrayOfBlobs = function () {\n    return arrayOfBlobs;\n  };\n  /**\r\n   * This method records MediaStream.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n\n\n  this.record = function () {\n    // set defaults\n    self.blob = null;\n    self.clearRecordedData();\n    self.timestamps = [];\n    allStates = [];\n    arrayOfBlobs = [];\n    var recorderHints = config;\n\n    if (!config.disableLogs) {\n      console.log('Passing following config over MediaRecorder API.', recorderHints);\n    }\n\n    if (mediaRecorder) {\n      // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n      mediaRecorder = null;\n    }\n\n    if (isChrome && !isMediaRecorderCompatible()) {\n      // to support video-only recording on stable\n      recorderHints = 'video/vp8';\n    }\n\n    if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n      if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n        if (!config.disableLogs) {\n          console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n        }\n\n        recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n      }\n    } // using MediaRecorder API here\n\n\n    try {\n      mediaRecorder = new MediaRecorder(mediaStream, recorderHints); // reset\n\n      config.mimeType = recorderHints.mimeType;\n    } catch (e) {\n      // chrome-based fallback\n      mediaRecorder = new MediaRecorder(mediaStream);\n    } // old hack?\n\n\n    if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n      if (!config.disableLogs) {\n        console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n      }\n    } // Dispatching OnDataAvailable Handler\n\n\n    mediaRecorder.ondataavailable = function (e) {\n      if (e.data) {\n        allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n      }\n\n      if (typeof config.timeSlice === 'number') {\n        if (e.data && e.data.size) {\n          arrayOfBlobs.push(e.data);\n          updateTimeStamp();\n\n          if (typeof config.ondataavailable === 'function') {\n            // intervals based blobs\n            var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n              type: getMimeType(recorderHints)\n            });\n            config.ondataavailable(blob);\n          }\n        }\n\n        return;\n      }\n\n      if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n        // make sure that stopRecording always getting fired\n        // even if there is invalid data\n        if (self.recordingCallback) {\n          self.recordingCallback(new Blob([], {\n            type: getMimeType(recorderHints)\n          }));\n          self.recordingCallback = null;\n        }\n\n        return;\n      }\n\n      self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n        type: getMimeType(recorderHints)\n      });\n\n      if (self.recordingCallback) {\n        self.recordingCallback(self.blob);\n        self.recordingCallback = null;\n      }\n    };\n\n    mediaRecorder.onstart = function () {\n      allStates.push('started');\n    };\n\n    mediaRecorder.onpause = function () {\n      allStates.push('paused');\n    };\n\n    mediaRecorder.onresume = function () {\n      allStates.push('resumed');\n    };\n\n    mediaRecorder.onstop = function () {\n      allStates.push('stopped');\n    };\n\n    mediaRecorder.onerror = function (error) {\n      if (!error) {\n        return;\n      }\n\n      if (!error.name) {\n        error.name = 'UnknownError';\n      }\n\n      allStates.push('error: ' + error);\n\n      if (!config.disableLogs) {\n        // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n        if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n          console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n        } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n          console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n        } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n          console.error('MediaRecorder security error', error);\n        } // older code below\n        else if (error.name === 'OutOfMemory') {\n          console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n        } else if (error.name === 'IllegalStreamModification') {\n          console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n        } else if (error.name === 'OtherRecordingError') {\n          console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n        } else if (error.name === 'GenericError') {\n          console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n        } else {\n          console.error('MediaRecorder Error', error);\n        }\n      }\n\n      (function (looper) {\n        if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n          delete config.timeslice; // 10 minutes, enough?\n\n          mediaRecorder.start(10 * 60 * 1000);\n          return;\n        }\n\n        setTimeout(looper, 1000);\n      })();\n\n      if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n        mediaRecorder.stop();\n      }\n    };\n\n    if (typeof config.timeSlice === 'number') {\n      updateTimeStamp();\n      mediaRecorder.start(config.timeSlice);\n    } else {\n      // default is 60 minutes; enough?\n      // use config => {timeSlice: 1000} otherwise\n      mediaRecorder.start(3.6e+6);\n    }\n\n    if (config.initCallback) {\n      config.initCallback(); // old code\n    }\n  };\n  /**\r\n   * @property {Array} timestamps - Array of time stamps\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * console.log(recorder.timestamps);\r\n   */\n\n\n  this.timestamps = [];\n\n  function updateTimeStamp() {\n    self.timestamps.push(new Date().getTime());\n\n    if (typeof config.onTimeStamp === 'function') {\n      config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n    }\n  }\n\n  function getMimeType(secondObject) {\n    if (mediaRecorder && mediaRecorder.mimeType) {\n      return mediaRecorder.mimeType;\n    }\n\n    return secondObject.mimeType || 'video/webm';\n  }\n  /**\r\n   * This method stops recording MediaStream.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n\n\n  this.stop = function (callback) {\n    callback = callback || function () {};\n\n    self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n    if (!mediaRecorder) {\n      return;\n    }\n\n    this.recordingCallback = callback;\n\n    if (mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n    }\n\n    if (typeof config.timeSlice === 'number') {\n      setTimeout(function () {\n        self.blob = new Blob(arrayOfBlobs, {\n          type: getMimeType(config)\n        });\n        self.recordingCallback(self.blob);\n      }, 100);\n    }\n  };\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n\n\n  this.pause = function () {\n    if (!mediaRecorder) {\n      return;\n    }\n\n    if (mediaRecorder.state === 'recording') {\n      mediaRecorder.pause();\n    }\n  };\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n\n\n  this.resume = function () {\n    if (!mediaRecorder) {\n      return;\n    }\n\n    if (mediaRecorder.state === 'paused') {\n      mediaRecorder.resume();\n    }\n  };\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n\n\n  this.clearRecordedData = function () {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      self.stop(clearRecordedDataCB);\n    }\n\n    clearRecordedDataCB();\n  };\n\n  function clearRecordedDataCB() {\n    arrayOfBlobs = [];\n    mediaRecorder = null;\n    self.timestamps = [];\n  } // Reference to \"MediaRecorder\" object\n\n\n  var mediaRecorder;\n  /**\r\n   * Access to native MediaRecorder API\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @instance\r\n   * @example\r\n   * var internal = recorder.getInternalRecorder();\r\n   * internal.ondataavailable = function() {}; // override\r\n   * internal.stream, internal.onpause, internal.onstop, etc.\r\n   * @returns {Object} Returns internal recording object.\r\n   */\n\n  this.getInternalRecorder = function () {\n    return mediaRecorder;\n  };\n\n  function isMediaStreamActive() {\n    if ('active' in mediaStream) {\n      if (!mediaStream.active) {\n        return false;\n      }\n    } else if ('ended' in mediaStream) {\n      // old hack\n      if (mediaStream.ended) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * recorder.stop(function() {\r\n   *     var blob = recorder.blob;\r\n   * });\r\n   */\n\n\n  this.blob = null;\n  /**\r\n   * Get MediaRecorder readonly state.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * var state = recorder.getState();\r\n   * @returns {String} Returns recording state.\r\n   */\n\n  this.getState = function () {\n    if (!mediaRecorder) {\n      return 'inactive';\n    }\n\n    return mediaRecorder.state || 'inactive';\n  }; // list of all recording states\n\n\n  var allStates = [];\n  /**\r\n   * Get MediaRecorder all recording states.\r\n   * @method\r\n   * @memberof MediaStreamRecorder\r\n   * @example\r\n   * var state = recorder.getAllStates();\r\n   * @returns {Array} Returns all recording states\r\n   */\n\n  this.getAllStates = function () {\n    return allStates;\n  }; // if any Track within the MediaStream is muted or not enabled at any time, \n  // the browser will only record black frames \n  // or silence since that is the content produced by the Track\n  // so we need to stopRecording as soon as any single track ends.\n\n\n  if (typeof config.checkForInactiveTracks === 'undefined') {\n    config.checkForInactiveTracks = false; // disable to minimize CPU usage\n  }\n\n  var self = this; // this method checks if media stream is stopped\n  // or if any track is ended.\n\n  (function looper() {\n    if (!mediaRecorder || config.checkForInactiveTracks === false) {\n      return;\n    }\n\n    if (isMediaStreamActive() === false) {\n      if (!config.disableLogs) {\n        console.log('MediaStream seems stopped.');\n      }\n\n      self.stop();\n      return;\n    }\n\n    setTimeout(looper, 1000); // check every second\n  })(); // for debugging\n\n\n  this.name = 'MediaStreamRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n} // source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n// https://github.com/mattdiamond/Recorderjs#license-mit\n// ______________________\n// StereoAudioRecorder.js\n\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\n\n\nfunction StereoAudioRecorder(mediaStream, config) {\n  if (!getTracks(mediaStream, 'audio').length) {\n    throw 'Your stream has no audio tracks.';\n  }\n\n  config = config || {};\n  var self = this; // variables\n\n  var leftchannel = [];\n  var rightchannel = [];\n  var recording = false;\n  var recordingLength = 0;\n  var jsAudioNode;\n  var numberOfAudioChannels = 2;\n  /**\r\n   * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n   * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n   * @memberof StereoAudioRecorder\r\n   * @instance\r\n   * @example\r\n   * var recorder = StereoAudioRecorder(mediaStream, {\r\n   *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n   * });\r\n   */\n\n  var desiredSampRate = config.desiredSampRate; // backward compatibility\n\n  if (config.leftChannel === true) {\n    numberOfAudioChannels = 1;\n  }\n\n  if (config.numberOfAudioChannels === 1) {\n    numberOfAudioChannels = 1;\n  }\n\n  if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\n    numberOfAudioChannels = 2;\n  }\n\n  if (!config.disableLogs) {\n    console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\n  } // if any Track within the MediaStream is muted or not enabled at any time, \n  // the browser will only record black frames \n  // or silence since that is the content produced by the Track\n  // so we need to stopRecording as soon as any single track ends.\n\n\n  if (typeof config.checkForInactiveTracks === 'undefined') {\n    config.checkForInactiveTracks = true;\n  }\n\n  function isMediaStreamActive() {\n    if (config.checkForInactiveTracks === false) {\n      // always return \"true\"\n      return true;\n    }\n\n    if ('active' in mediaStream) {\n      if (!mediaStream.active) {\n        return false;\n      }\n    } else if ('ended' in mediaStream) {\n      // old hack\n      if (mediaStream.ended) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * This method records MediaStream.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n\n\n  this.record = function () {\n    if (isMediaStreamActive() === false) {\n      throw 'Please make sure MediaStream is active.';\n    }\n\n    resetVariables();\n    isAudioProcessStarted = isPaused = false;\n    recording = true;\n\n    if (typeof config.timeSlice !== 'undefined') {\n      looper();\n    }\n  };\n\n  function mergeLeftRightBuffers(config, callback) {\n    function mergeAudioBuffers(config, cb) {\n      var numberOfAudioChannels = config.numberOfAudioChannels; // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n\n      var leftBuffers = config.leftBuffers.slice(0);\n      var rightBuffers = config.rightBuffers.slice(0);\n      var sampleRate = config.sampleRate;\n      var internalInterleavedLength = config.internalInterleavedLength;\n      var desiredSampRate = config.desiredSampRate;\n\n      if (numberOfAudioChannels === 2) {\n        leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n        rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n\n        if (desiredSampRate) {\n          leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n          rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\n        }\n      }\n\n      if (numberOfAudioChannels === 1) {\n        leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n\n        if (desiredSampRate) {\n          leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n        }\n      } // set sample rate as desired sample rate\n\n\n      if (desiredSampRate) {\n        sampleRate = desiredSampRate;\n      } // for changing the sampling rate, reference:\n      // http://stackoverflow.com/a/28977136/552182\n\n\n      function interpolateArray(data, newSampleRate, oldSampleRate) {\n        var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\n        var newData = [];\n        var springFactor = Number((data.length - 1) / (fitCount - 1));\n        newData[0] = data[0];\n\n        for (var i = 1; i < fitCount - 1; i++) {\n          var tmp = i * springFactor;\n          var before = Number(Math.floor(tmp)).toFixed();\n          var after = Number(Math.ceil(tmp)).toFixed();\n          var atPoint = tmp - before;\n          newData[i] = linearInterpolate(data[before], data[after], atPoint);\n        }\n\n        newData[fitCount - 1] = data[data.length - 1];\n        return newData;\n      }\n\n      function linearInterpolate(before, after, atPoint) {\n        return before + (after - before) * atPoint;\n      }\n\n      function mergeBuffers(channelBuffer, rLength) {\n        var result = new Float64Array(rLength);\n        var offset = 0;\n        var lng = channelBuffer.length;\n\n        for (var i = 0; i < lng; i++) {\n          var buffer = channelBuffer[i];\n          result.set(buffer, offset);\n          offset += buffer.length;\n        }\n\n        return result;\n      }\n\n      function interleave(leftChannel, rightChannel) {\n        var length = leftChannel.length + rightChannel.length;\n        var result = new Float64Array(length);\n        var inputIndex = 0;\n\n        for (var index = 0; index < length;) {\n          result[index++] = leftChannel[inputIndex];\n          result[index++] = rightChannel[inputIndex];\n          inputIndex++;\n        }\n\n        return result;\n      }\n\n      function writeUTFBytes(view, offset, string) {\n        var lng = string.length;\n\n        for (var i = 0; i < lng; i++) {\n          view.setUint8(offset + i, string.charCodeAt(i));\n        }\n      } // interleave both channels together\n\n\n      var interleaved;\n\n      if (numberOfAudioChannels === 2) {\n        interleaved = interleave(leftBuffers, rightBuffers);\n      }\n\n      if (numberOfAudioChannels === 1) {\n        interleaved = leftBuffers;\n      }\n\n      var interleavedLength = interleaved.length; // create wav file\n\n      var resultingBufferLength = 44 + interleavedLength * 2;\n      var buffer = new ArrayBuffer(resultingBufferLength);\n      var view = new DataView(buffer); // RIFF chunk descriptor/identifier \n\n      writeUTFBytes(view, 0, 'RIFF'); // RIFF chunk length\n      // changed \"44\" to \"36\" via #401\n\n      view.setUint32(4, 36 + interleavedLength * 2, true); // RIFF type \n\n      writeUTFBytes(view, 8, 'WAVE'); // format chunk identifier \n      // FMT sub-chunk\n\n      writeUTFBytes(view, 12, 'fmt '); // format chunk length \n\n      view.setUint32(16, 16, true); // sample format (raw)\n\n      view.setUint16(20, 1, true); // stereo (2 channels)\n\n      view.setUint16(22, numberOfAudioChannels, true); // sample rate \n\n      view.setUint32(24, sampleRate, true); // byte rate (sample rate * block align)\n\n      view.setUint32(28, sampleRate * numberOfAudioChannels * 2, true); // block align (channel count * bytes per sample) \n\n      view.setUint16(32, numberOfAudioChannels * 2, true); // bits per sample \n\n      view.setUint16(34, 16, true); // data sub-chunk\n      // data chunk identifier \n\n      writeUTFBytes(view, 36, 'data'); // data chunk length \n\n      view.setUint32(40, interleavedLength * 2, true); // write the PCM samples\n\n      var lng = interleavedLength;\n      var index = 44;\n      var volume = 1;\n\n      for (var i = 0; i < lng; i++) {\n        view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n        index += 2;\n      }\n\n      if (cb) {\n        return cb({\n          buffer: buffer,\n          view: view\n        });\n      }\n\n      postMessage({\n        buffer: buffer,\n        view: view\n      });\n    }\n\n    if (config.noWorker) {\n      mergeAudioBuffers(config, function (data) {\n        callback(data.buffer, data.view);\n      });\n      return;\n    }\n\n    var webWorker = processInWebWorker(mergeAudioBuffers);\n\n    webWorker.onmessage = function (event) {\n      callback(event.data.buffer, event.data.view); // release memory\n\n      URL.revokeObjectURL(webWorker.workerURL); // kill webworker (or Chrome will kill your page after ~25 calls)\n\n      webWorker.terminate();\n    };\n\n    webWorker.postMessage(config);\n  }\n\n  function processInWebWorker(_function) {\n    var workerURL = URL.createObjectURL(new Blob([_function.toString(), ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n      type: 'application/javascript'\n    }));\n    var worker = new Worker(workerURL);\n    worker.workerURL = workerURL;\n    return worker;\n  }\n  /**\r\n   * This method stops recording MediaStream.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n\n\n  this.stop = function (callback) {\n    callback = callback || function () {}; // stop recording\n\n\n    recording = false;\n    mergeLeftRightBuffers({\n      desiredSampRate: desiredSampRate,\n      sampleRate: sampleRate,\n      numberOfAudioChannels: numberOfAudioChannels,\n      internalInterleavedLength: recordingLength,\n      leftBuffers: leftchannel,\n      rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\n      noWorker: config.noWorker\n    }, function (buffer, view) {\n      /**\r\n       * @property {Blob} blob - The recorded blob object.\r\n       * @memberof StereoAudioRecorder\r\n       * @example\r\n       * recorder.stop(function(){\r\n       *     var blob = recorder.blob;\r\n       * });\r\n       */\n      self.blob = new Blob([view], {\n        type: 'audio/wav'\n      });\n      /**\r\n       * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n       * @memberof StereoAudioRecorder\r\n       * @example\r\n       * recorder.stop(function(){\r\n       *     var buffer = recorder.buffer;\r\n       * });\r\n       */\n\n      self.buffer = new ArrayBuffer(view.buffer.byteLength);\n      /**\r\n       * @property {DataView} view - The recorded data-view object.\r\n       * @memberof StereoAudioRecorder\r\n       * @example\r\n       * recorder.stop(function(){\r\n       *     var view = recorder.view;\r\n       * });\r\n       */\n\n      self.view = view;\n      self.sampleRate = desiredSampRate || sampleRate;\n      self.bufferSize = bufferSize; // recorded audio length\n\n      self.length = recordingLength;\n      isAudioProcessStarted = false;\n\n      if (callback) {\n        callback(self.blob);\n      }\n    });\n  };\n\n  if (typeof RecordRTC.Storage === 'undefined') {\n    RecordRTC.Storage = {\n      AudioContextConstructor: null,\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    };\n  }\n\n  if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\n    RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\n  }\n\n  var context = RecordRTC.Storage.AudioContextConstructor; // creates an audio node from the microphone incoming stream\n\n  var audioInput = context.createMediaStreamSource(mediaStream);\n  var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n  /**\r\n   * From the spec: This value controls how frequently the audioprocess event is\r\n   * dispatched and how many sample-frames need to be processed each call.\r\n   * Lower values for buffer size will result in a lower (better) latency.\r\n   * Higher values will be necessary to avoid audio breakup and glitches\r\n   * The size of the buffer (in sample-frames) which needs to\r\n   * be processed each time onprocessaudio is called.\r\n   * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n   * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder = new StereoAudioRecorder(mediaStream, {\r\n   *     bufferSize: 4096\r\n   * });\r\n   */\n  // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\n\n  var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\n\n  if (legalBufferValues.indexOf(bufferSize) === -1) {\n    if (!config.disableLogs) {\n      console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\n    }\n  }\n\n  if (context.createJavaScriptNode) {\n    jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n  } else if (context.createScriptProcessor) {\n    jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n  } else {\n    throw 'WebAudio API has no support on this browser.';\n  } // connect the stream to the script processor\n\n\n  audioInput.connect(jsAudioNode);\n\n  if (!config.bufferSize) {\n    bufferSize = jsAudioNode.bufferSize; // device buffer-size\n  }\n  /**\r\n   * The sample rate (in sample-frames per second) at which the\r\n   * AudioContext handles audio. It is assumed that all AudioNodes\r\n   * in the context run at this rate. In making this assumption,\r\n   * sample-rate converters or \"varispeed\" processors are not supported\r\n   * in real-time processing.\r\n   * The sampleRate parameter describes the sample-rate of the\r\n   * linear PCM audio data in the buffer in sample-frames per second.\r\n   * An implementation must support sample-rates in at least\r\n   * the range 22050 to 96000.\r\n   * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder = new StereoAudioRecorder(mediaStream, {\r\n   *     sampleRate: 44100\r\n   * });\r\n   */\n\n\n  var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\n\n  if (sampleRate < 22050 || sampleRate > 96000) {\n    // Ref: http://stackoverflow.com/a/26303918/552182\n    if (!config.disableLogs) {\n      console.log('sample-rate must be under range 22050 and 96000.');\n    }\n  }\n\n  if (!config.disableLogs) {\n    if (config.desiredSampRate) {\n      console.log('Desired sample-rate: ' + config.desiredSampRate);\n    }\n  }\n\n  var isPaused = false;\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n\n  this.pause = function () {\n    isPaused = true;\n  };\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n\n\n  this.resume = function () {\n    if (isMediaStreamActive() === false) {\n      throw 'Please make sure MediaStream is active.';\n    }\n\n    if (!recording) {\n      if (!config.disableLogs) {\n        console.log('Seems recording has been restarted.');\n      }\n\n      this.record();\n      return;\n    }\n\n    isPaused = false;\n  };\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof StereoAudioRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n\n\n  this.clearRecordedData = function () {\n    config.checkForInactiveTracks = false;\n\n    if (recording) {\n      this.stop(clearRecordedDataCB);\n    }\n\n    clearRecordedDataCB();\n  };\n\n  function resetVariables() {\n    leftchannel = [];\n    rightchannel = [];\n    recordingLength = 0;\n    isAudioProcessStarted = false;\n    recording = false;\n    isPaused = false;\n    context = null;\n    self.leftchannel = leftchannel;\n    self.rightchannel = rightchannel;\n    self.numberOfAudioChannels = numberOfAudioChannels;\n    self.desiredSampRate = desiredSampRate;\n    self.sampleRate = sampleRate;\n    self.recordingLength = recordingLength;\n    intervalsBasedBuffers = {\n      left: [],\n      right: [],\n      recordingLength: 0\n    };\n  }\n\n  function clearRecordedDataCB() {\n    if (jsAudioNode) {\n      jsAudioNode.onaudioprocess = null;\n      jsAudioNode.disconnect();\n      jsAudioNode = null;\n    }\n\n    if (audioInput) {\n      audioInput.disconnect();\n      audioInput = null;\n    }\n\n    resetVariables();\n  } // for debugging\n\n\n  this.name = 'StereoAudioRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  var isAudioProcessStarted = false;\n\n  function onAudioProcessDataAvailable(e) {\n    if (isPaused) {\n      return;\n    }\n\n    if (isMediaStreamActive() === false) {\n      if (!config.disableLogs) {\n        console.log('MediaStream seems stopped.');\n      }\n\n      jsAudioNode.disconnect();\n      recording = false;\n    }\n\n    if (!recording) {\n      if (audioInput) {\n        audioInput.disconnect();\n        audioInput = null;\n      }\n\n      return;\n    }\n    /**\r\n     * This method is called on \"onaudioprocess\" event's first invocation.\r\n     * @method {function} onAudioProcessStarted\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.onAudioProcessStarted: function() { };\r\n     */\n\n\n    if (!isAudioProcessStarted) {\n      isAudioProcessStarted = true;\n\n      if (config.onAudioProcessStarted) {\n        config.onAudioProcessStarted();\n      }\n\n      if (config.initCallback) {\n        config.initCallback();\n      }\n    }\n\n    var left = e.inputBuffer.getChannelData(0); // we clone the samples\n\n    var chLeft = new Float32Array(left);\n    leftchannel.push(chLeft);\n\n    if (numberOfAudioChannels === 2) {\n      var right = e.inputBuffer.getChannelData(1);\n      var chRight = new Float32Array(right);\n      rightchannel.push(chRight);\n    }\n\n    recordingLength += bufferSize; // export raw PCM\n\n    self.recordingLength = recordingLength;\n\n    if (typeof config.timeSlice !== 'undefined') {\n      intervalsBasedBuffers.recordingLength += bufferSize;\n      intervalsBasedBuffers.left.push(chLeft);\n\n      if (numberOfAudioChannels === 2) {\n        intervalsBasedBuffers.right.push(chRight);\n      }\n    }\n  }\n\n  jsAudioNode.onaudioprocess = onAudioProcessDataAvailable; // to prevent self audio to be connected with speakers\n\n  if (context.createMediaStreamDestination) {\n    jsAudioNode.connect(context.createMediaStreamDestination());\n  } else {\n    jsAudioNode.connect(context.destination);\n  } // export raw PCM\n\n\n  this.leftchannel = leftchannel;\n  this.rightchannel = rightchannel;\n  this.numberOfAudioChannels = numberOfAudioChannels;\n  this.desiredSampRate = desiredSampRate;\n  this.sampleRate = sampleRate;\n  self.recordingLength = recordingLength; // helper for intervals based blobs\n\n  var intervalsBasedBuffers = {\n    left: [],\n    right: [],\n    recordingLength: 0\n  }; // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\n\n  function looper() {\n    if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\n      return;\n    }\n\n    if (intervalsBasedBuffers.left.length) {\n      mergeLeftRightBuffers({\n        desiredSampRate: desiredSampRate,\n        sampleRate: sampleRate,\n        numberOfAudioChannels: numberOfAudioChannels,\n        internalInterleavedLength: intervalsBasedBuffers.recordingLength,\n        leftBuffers: intervalsBasedBuffers.left,\n        rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\n      }, function (buffer, view) {\n        var blob = new Blob([view], {\n          type: 'audio/wav'\n        });\n        config.ondataavailable(blob);\n        setTimeout(looper, config.timeSlice);\n      });\n      intervalsBasedBuffers = {\n        left: [],\n        right: [],\n        recordingLength: 0\n      };\n    } else {\n      setTimeout(looper, config.timeSlice);\n    }\n  }\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n} // _________________\n// CanvasRecorder.js\n\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\n\n\nfunction CanvasRecorder(htmlElement, config) {\n  if (typeof html2canvas === 'undefined') {\n    throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\n  }\n\n  config = config || {};\n\n  if (!config.frameInterval) {\n    config.frameInterval = 10;\n  } // via DetectRTC.js\n\n\n  var isCanvasSupportsStreamCapturing = false;\n  ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function (item) {\n    if (item in document.createElement('canvas')) {\n      isCanvasSupportsStreamCapturing = true;\n    }\n  });\n\n  var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\n\n  var chromeVersion = 50;\n  var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\n  if (_isChrome && matchArray && matchArray[2]) {\n    chromeVersion = parseInt(matchArray[2], 10);\n  }\n\n  if (_isChrome && chromeVersion < 52) {\n    isCanvasSupportsStreamCapturing = false;\n  }\n\n  if (config.useWhammyRecorder) {\n    isCanvasSupportsStreamCapturing = false;\n  }\n\n  var globalCanvas, mediaStreamRecorder;\n\n  if (isCanvasSupportsStreamCapturing) {\n    if (!config.disableLogs) {\n      console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\n    }\n\n    if (htmlElement instanceof HTMLCanvasElement) {\n      globalCanvas = htmlElement;\n    } else if (htmlElement instanceof CanvasRenderingContext2D) {\n      globalCanvas = htmlElement.canvas;\n    } else {\n      throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\n    }\n  } else if (!!navigator.mozGetUserMedia) {\n    if (!config.disableLogs) {\n      console.error('Canvas recording is NOT supported in Firefox.');\n    }\n  }\n\n  var isRecording;\n  /**\r\n   * This method records Canvas.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n\n  this.record = function () {\n    isRecording = true;\n\n    if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\n      // CanvasCaptureMediaStream\n      var canvasMediaStream;\n\n      if ('captureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\n      } else if ('mozCaptureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.mozCaptureStream(25);\n      } else if ('webkitCaptureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.webkitCaptureStream(25);\n      }\n\n      try {\n        var mdStream = new MediaStream();\n        mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\n        canvasMediaStream = mdStream;\n      } catch (e) {}\n\n      if (!canvasMediaStream) {\n        throw 'captureStream API are NOT available.';\n      } // Note: Jan 18, 2016 status is that, \n      // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\n\n\n      mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\n        mimeType: config.mimeType || 'video/webm'\n      });\n      mediaStreamRecorder.record();\n    } else {\n      whammy.frames = [];\n      lastTime = new Date().getTime();\n      drawCanvasFrame();\n    }\n\n    if (config.initCallback) {\n      config.initCallback();\n    }\n  };\n\n  this.getWebPImages = function (callback) {\n    if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\n      callback();\n      return;\n    }\n\n    var framesLength = whammy.frames.length;\n    whammy.frames.forEach(function (frame, idx) {\n      var framesRemaining = framesLength - idx;\n\n      if (!config.disableLogs) {\n        console.log(framesRemaining + '/' + framesLength + ' frames remaining');\n      }\n\n      if (config.onEncodingCallback) {\n        config.onEncodingCallback(framesRemaining, framesLength);\n      }\n\n      var webp = frame.image.toDataURL('image/webp', 1);\n      whammy.frames[idx].image = webp;\n    });\n\n    if (!config.disableLogs) {\n      console.log('Generating WebM');\n    }\n\n    callback();\n  };\n  /**\r\n   * This method stops recording Canvas.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n\n\n  this.stop = function (callback) {\n    isRecording = false;\n    var that = this;\n\n    if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\n      mediaStreamRecorder.stop(callback);\n      return;\n    }\n\n    this.getWebPImages(function () {\n      /**\r\n       * @property {Blob} blob - Recorded frames in video/webm blob.\r\n       * @memberof CanvasRecorder\r\n       * @example\r\n       * recorder.stop(function() {\r\n       *     var blob = recorder.blob;\r\n       * });\r\n       */\n      whammy.compile(function (blob) {\n        if (!config.disableLogs) {\n          console.log('Recording finished!');\n        }\n\n        that.blob = blob;\n\n        if (that.blob.forEach) {\n          that.blob = new Blob([], {\n            type: 'video/webm'\n          });\n        }\n\n        if (callback) {\n          callback(that.blob);\n        }\n\n        whammy.frames = [];\n      });\n    });\n  };\n\n  var isPausedRecording = false;\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n\n  this.pause = function () {\n    isPausedRecording = true;\n\n    if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n      mediaStreamRecorder.pause();\n      return;\n    }\n  };\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n\n\n  this.resume = function () {\n    isPausedRecording = false;\n\n    if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n      mediaStreamRecorder.resume();\n      return;\n    }\n\n    if (!isRecording) {\n      this.record();\n    }\n  };\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof CanvasRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n\n\n  this.clearRecordedData = function () {\n    if (isRecording) {\n      this.stop(clearRecordedDataCB);\n    }\n\n    clearRecordedDataCB();\n  };\n\n  function clearRecordedDataCB() {\n    whammy.frames = [];\n    isRecording = false;\n    isPausedRecording = false;\n  } // for debugging\n\n\n  this.name = 'CanvasRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  function cloneCanvas() {\n    //create a new canvas\n    var newCanvas = document.createElement('canvas');\n    var context = newCanvas.getContext('2d'); //set dimensions\n\n    newCanvas.width = htmlElement.width;\n    newCanvas.height = htmlElement.height; //apply the old canvas to the new one\n\n    context.drawImage(htmlElement, 0, 0); //return the new canvas\n\n    return newCanvas;\n  }\n\n  function drawCanvasFrame() {\n    if (isPausedRecording) {\n      lastTime = new Date().getTime();\n      return setTimeout(drawCanvasFrame, 500);\n    }\n\n    if (htmlElement.nodeName.toLowerCase() === 'canvas') {\n      var duration = new Date().getTime() - lastTime; // via #206, by Jack i.e. @Seymourr\n\n      lastTime = new Date().getTime();\n      whammy.frames.push({\n        image: cloneCanvas(),\n        duration: duration\n      });\n\n      if (isRecording) {\n        setTimeout(drawCanvasFrame, config.frameInterval);\n      }\n\n      return;\n    }\n\n    html2canvas(htmlElement, {\n      grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\n      onrendered: function (canvas) {\n        var duration = new Date().getTime() - lastTime;\n\n        if (!duration) {\n          return setTimeout(drawCanvasFrame, config.frameInterval);\n        } // via #206, by Jack i.e. @Seymourr\n\n\n        lastTime = new Date().getTime();\n        whammy.frames.push({\n          image: canvas.toDataURL('image/webp', 1),\n          duration: duration\n        });\n\n        if (isRecording) {\n          setTimeout(drawCanvasFrame, config.frameInterval);\n        }\n      }\n    });\n  }\n\n  var lastTime = new Date().getTime();\n  var whammy = new Whammy.Video(100);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.CanvasRecorder = CanvasRecorder;\n} // _________________\n// WhammyRecorder.js\n\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\n\n\nfunction WhammyRecorder(mediaStream, config) {\n  config = config || {};\n\n  if (!config.frameInterval) {\n    config.frameInterval = 10;\n  }\n\n  if (!config.disableLogs) {\n    console.log('Using frames-interval:', config.frameInterval);\n  }\n  /**\r\n   * This method records video.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n\n\n  this.record = function () {\n    if (!config.width) {\n      config.width = 320;\n    }\n\n    if (!config.height) {\n      config.height = 240;\n    }\n\n    if (!config.video) {\n      config.video = {\n        width: config.width,\n        height: config.height\n      };\n    }\n\n    if (!config.canvas) {\n      config.canvas = {\n        width: config.width,\n        height: config.height\n      };\n    }\n\n    canvas.width = config.canvas.width || 320;\n    canvas.height = config.canvas.height || 240;\n    context = canvas.getContext('2d'); // setting defaults\n\n    if (config.video && config.video instanceof HTMLVideoElement) {\n      video = config.video.cloneNode();\n\n      if (config.initCallback) {\n        config.initCallback();\n      }\n    } else {\n      video = document.createElement('video');\n      setSrcObject(mediaStream, video);\n\n      video.onloadedmetadata = function () {\n        // \"onloadedmetadata\" may NOT work in FF?\n        if (config.initCallback) {\n          config.initCallback();\n        }\n      };\n\n      video.width = config.video.width;\n      video.height = config.video.height;\n    }\n\n    video.muted = true;\n    video.play();\n    lastTime = new Date().getTime();\n    whammy = new Whammy.Video();\n\n    if (!config.disableLogs) {\n      console.log('canvas resolutions', canvas.width, '*', canvas.height);\n      console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\n    }\n\n    drawFrames(config.frameInterval);\n  };\n  /**\r\n   * Draw and push frames to Whammy\r\n   * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n   */\n\n\n  function drawFrames(frameInterval) {\n    frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\n    var duration = new Date().getTime() - lastTime;\n\n    if (!duration) {\n      return setTimeout(drawFrames, frameInterval, frameInterval);\n    }\n\n    if (isPausedRecording) {\n      lastTime = new Date().getTime();\n      return setTimeout(drawFrames, 100);\n    } // via #206, by Jack i.e. @Seymourr\n\n\n    lastTime = new Date().getTime();\n\n    if (video.paused) {\n      // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n      // Tweak for Android Chrome\n      video.play();\n    }\n\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    whammy.frames.push({\n      duration: duration,\n      image: canvas.toDataURL('image/webp')\n    });\n\n    if (!isStopDrawing) {\n      setTimeout(drawFrames, frameInterval, frameInterval);\n    }\n  }\n\n  function asyncLoop(o) {\n    var i = -1,\n        length = o.length;\n\n    (function loop() {\n      i++;\n\n      if (i === length) {\n        o.callback();\n        return;\n      } // \"setTimeout\" added by Jim McLeod\n\n\n      setTimeout(function () {\n        o.functionToLoop(loop, i);\n      }, 1);\n    })();\n  }\n  /**\r\n   * remove black frames from the beginning to the specified frame\r\n   * @param {Array} _frames - array of frames to be checked\r\n   * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n   * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n   * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n   * @returns {Array} - array of frames\r\n   */\n  // pull#293 by @volodalexey\n\n\n  function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\n    var localCanvas = document.createElement('canvas');\n    localCanvas.width = canvas.width;\n    localCanvas.height = canvas.height;\n    var context2d = localCanvas.getContext('2d');\n    var resultFrames = [];\n    var checkUntilNotBlack = _framesToCheck === -1;\n    var endCheckFrame = _framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length ? _framesToCheck : _frames.length;\n    var sampleColor = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var maxColorDifference = Math.sqrt(Math.pow(255, 2) + Math.pow(255, 2) + Math.pow(255, 2));\n    var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\n    var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\n    var doNotCheckNext = false;\n    asyncLoop({\n      length: endCheckFrame,\n      functionToLoop: function (loop, f) {\n        var matchPixCount, endPixCheck, maxPixCount;\n\n        var finishImage = function () {\n          if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {// console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\n          } else {\n            // console.log('frame is passed : ' + f);\n            if (checkUntilNotBlack) {\n              doNotCheckNext = true;\n            }\n\n            resultFrames.push(_frames[f]);\n          }\n\n          loop();\n        };\n\n        if (!doNotCheckNext) {\n          var image = new Image();\n\n          image.onload = function () {\n            context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\n            var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\n            matchPixCount = 0;\n            endPixCheck = imageData.data.length;\n            maxPixCount = imageData.data.length / 4;\n\n            for (var pix = 0; pix < endPixCheck; pix += 4) {\n              var currentColor = {\n                r: imageData.data[pix],\n                g: imageData.data[pix + 1],\n                b: imageData.data[pix + 2]\n              };\n              var colorDifference = Math.sqrt(Math.pow(currentColor.r - sampleColor.r, 2) + Math.pow(currentColor.g - sampleColor.g, 2) + Math.pow(currentColor.b - sampleColor.b, 2)); // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\n\n              if (colorDifference <= maxColorDifference * pixTolerance) {\n                matchPixCount++;\n              }\n            }\n\n            finishImage();\n          };\n\n          image.src = _frames[f].image;\n        } else {\n          finishImage();\n        }\n      },\n      callback: function () {\n        resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\n\n        if (resultFrames.length <= 0) {\n          // at least one last frame should be available for next manipulation\n          // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\n          resultFrames.push(_frames[_frames.length - 1]);\n        }\n\n        callback(resultFrames);\n      }\n    });\n  }\n\n  var isStopDrawing = false;\n  /**\r\n   * This method stops recording video.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n\n  this.stop = function (callback) {\n    callback = callback || function () {};\n\n    isStopDrawing = true;\n\n    var _this = this; // analyse of all frames takes some time!\n\n\n    setTimeout(function () {\n      // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\n      // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\n      // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\n      dropBlackFrames(whammy.frames, -1, null, null, function (frames) {\n        whammy.frames = frames; // to display advertisement images!\n\n        if (config.advertisement && config.advertisement.length) {\n          whammy.frames = config.advertisement.concat(whammy.frames);\n        }\n        /**\r\n         * @property {Blob} blob - Recorded frames in video/webm blob.\r\n         * @memberof WhammyRecorder\r\n         * @example\r\n         * recorder.stop(function() {\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\n\n\n        whammy.compile(function (blob) {\n          _this.blob = blob;\n\n          if (_this.blob.forEach) {\n            _this.blob = new Blob([], {\n              type: 'video/webm'\n            });\n          }\n\n          if (callback) {\n            callback(_this.blob);\n          }\n        });\n      });\n    }, 10);\n  };\n\n  var isPausedRecording = false;\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n\n  this.pause = function () {\n    isPausedRecording = true;\n  };\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n\n\n  this.resume = function () {\n    isPausedRecording = false;\n\n    if (isStopDrawing) {\n      this.record();\n    }\n  };\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof WhammyRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n\n\n  this.clearRecordedData = function () {\n    if (!isStopDrawing) {\n      this.stop(clearRecordedDataCB);\n    }\n\n    clearRecordedDataCB();\n  };\n\n  function clearRecordedDataCB() {\n    whammy.frames = [];\n    isStopDrawing = true;\n    isPausedRecording = false;\n  } // for debugging\n\n\n  this.name = 'WhammyRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  var video;\n  var lastTime;\n  var whammy;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.WhammyRecorder = WhammyRecorder;\n} // https://github.com/antimatter15/whammy/blob/master/LICENSE\n// _________\n// Whammy.js\n// todo: Firefox now supports webp for webm containers!\n// their MediaRecorder implementation works well!\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\n\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\n\nvar Whammy = function () {\n  // a more abstract-ish API\n  function WhammyVideo(duration) {\n    this.frames = [];\n    this.duration = duration || 1;\n    this.quality = 0.8;\n  }\n  /**\r\n   * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n   * @method\r\n   * @memberof Whammy\r\n   * @example\r\n   * recorder = new Whammy().Video(0.8, 100);\r\n   * recorder.add(canvas || context || 'image/webp');\r\n   * @param {string} frame - Canvas || Context || image/webp\r\n   * @param {number} duration - Stick a duration (in milliseconds)\r\n   */\n\n\n  WhammyVideo.prototype.add = function (frame, duration) {\n    if ('canvas' in frame) {\n      //CanvasRenderingContext2D\n      frame = frame.canvas;\n    }\n\n    if ('toDataURL' in frame) {\n      frame = frame.toDataURL('image/webp', this.quality);\n    }\n\n    if (!/^data:image\\/webp;base64,/ig.test(frame)) {\n      throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\n    }\n\n    this.frames.push({\n      image: frame,\n      duration: duration || this.duration\n    });\n  };\n\n  function processInWebWorker(_function) {\n    var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n      type: 'application/javascript'\n    }));\n    var worker = new Worker(blob);\n    URL.revokeObjectURL(blob);\n    return worker;\n  }\n\n  function whammyInWebWorker(frames) {\n    function ArrayToWebM(frames) {\n      var info = checkFrames(frames);\n\n      if (!info) {\n        return [];\n      }\n\n      var clusterMaxDuration = 30000;\n      var EBML = [{\n        'id': 0x1a45dfa3,\n        // EBML\n        'data': [{\n          'data': 1,\n          'id': 0x4286 // EBMLVersion\n\n        }, {\n          'data': 1,\n          'id': 0x42f7 // EBMLReadVersion\n\n        }, {\n          'data': 4,\n          'id': 0x42f2 // EBMLMaxIDLength\n\n        }, {\n          'data': 8,\n          'id': 0x42f3 // EBMLMaxSizeLength\n\n        }, {\n          'data': 'webm',\n          'id': 0x4282 // DocType\n\n        }, {\n          'data': 2,\n          'id': 0x4287 // DocTypeVersion\n\n        }, {\n          'data': 2,\n          'id': 0x4285 // DocTypeReadVersion\n\n        }]\n      }, {\n        'id': 0x18538067,\n        // Segment\n        'data': [{\n          'id': 0x1549a966,\n          // Info\n          'data': [{\n            'data': 1e6,\n            //do things in millisecs (num of nanosecs for duration scale)\n            'id': 0x2ad7b1 // TimecodeScale\n\n          }, {\n            'data': 'whammy',\n            'id': 0x4d80 // MuxingApp\n\n          }, {\n            'data': 'whammy',\n            'id': 0x5741 // WritingApp\n\n          }, {\n            'data': doubleToString(info.duration),\n            'id': 0x4489 // Duration\n\n          }]\n        }, {\n          'id': 0x1654ae6b,\n          // Tracks\n          'data': [{\n            'id': 0xae,\n            // TrackEntry\n            'data': [{\n              'data': 1,\n              'id': 0xd7 // TrackNumber\n\n            }, {\n              'data': 1,\n              'id': 0x73c5 // TrackUID\n\n            }, {\n              'data': 0,\n              'id': 0x9c // FlagLacing\n\n            }, {\n              'data': 'und',\n              'id': 0x22b59c // Language\n\n            }, {\n              'data': 'V_VP8',\n              'id': 0x86 // CodecID\n\n            }, {\n              'data': 'VP8',\n              'id': 0x258688 // CodecName\n\n            }, {\n              'data': 1,\n              'id': 0x83 // TrackType\n\n            }, {\n              'id': 0xe0,\n              // Video\n              'data': [{\n                'data': info.width,\n                'id': 0xb0 // PixelWidth\n\n              }, {\n                'data': info.height,\n                'id': 0xba // PixelHeight\n\n              }]\n            }]\n          }]\n        }]\n      }]; //Generate clusters (max duration)\n\n      var frameNumber = 0;\n      var clusterTimecode = 0;\n\n      while (frameNumber < frames.length) {\n        var clusterFrames = [];\n        var clusterDuration = 0;\n\n        do {\n          clusterFrames.push(frames[frameNumber]);\n          clusterDuration += frames[frameNumber].duration;\n          frameNumber++;\n        } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\n\n        var clusterCounter = 0;\n        var cluster = {\n          'id': 0x1f43b675,\n          // Cluster\n          'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\n        }; //Add cluster to segment\n\n        EBML[1].data.push(cluster);\n        clusterTimecode += clusterDuration;\n      }\n\n      return generateEBML(EBML);\n    }\n\n    function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\n      return [{\n        'data': clusterTimecode,\n        'id': 0xe7 // Timecode\n\n      }].concat(clusterFrames.map(function (webp) {\n        var block = makeSimpleBlock({\n          discardable: 0,\n          frame: webp.data.slice(4),\n          invisible: 0,\n          keyframe: 1,\n          lacing: 0,\n          trackNum: 1,\n          timecode: Math.round(clusterCounter)\n        });\n        clusterCounter += webp.duration;\n        return {\n          data: block,\n          id: 0xa3\n        };\n      }));\n    } // sums the lengths of all the frames and gets the duration\n\n\n    function checkFrames(frames) {\n      if (!frames[0]) {\n        postMessage({\n          error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\n        });\n        return;\n      }\n\n      var width = frames[0].width,\n          height = frames[0].height,\n          duration = frames[0].duration;\n\n      for (var i = 1; i < frames.length; i++) {\n        duration += frames[i].duration;\n      }\n\n      return {\n        duration: duration,\n        width: width,\n        height: height\n      };\n    }\n\n    function numToBuffer(num) {\n      var parts = [];\n\n      while (num > 0) {\n        parts.push(num & 0xff);\n        num = num >> 8;\n      }\n\n      return new Uint8Array(parts.reverse());\n    }\n\n    function strToBuffer(str) {\n      return new Uint8Array(str.split('').map(function (e) {\n        return e.charCodeAt(0);\n      }));\n    }\n\n    function bitsToBuffer(bits) {\n      var data = [];\n      var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n      bits = pad + bits;\n\n      for (var i = 0; i < bits.length; i += 8) {\n        data.push(parseInt(bits.substr(i, 8), 2));\n      }\n\n      return new Uint8Array(data);\n    }\n\n    function generateEBML(json) {\n      var ebml = [];\n\n      for (var i = 0; i < json.length; i++) {\n        var data = json[i].data;\n\n        if (typeof data === 'object') {\n          data = generateEBML(data);\n        }\n\n        if (typeof data === 'number') {\n          data = bitsToBuffer(data.toString(2));\n        }\n\n        if (typeof data === 'string') {\n          data = strToBuffer(data);\n        }\n\n        var len = data.size || data.byteLength || data.length;\n        var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n        var sizeToString = len.toString(2);\n        var padded = new Array(zeroes * 7 + 7 + 1 - sizeToString.length).join('0') + sizeToString;\n        var size = new Array(zeroes).join('0') + '1' + padded;\n        ebml.push(numToBuffer(json[i].id));\n        ebml.push(bitsToBuffer(size));\n        ebml.push(data);\n      }\n\n      return new Blob(ebml, {\n        type: 'video/webm'\n      });\n    }\n\n    function toBinStrOld(bits) {\n      var data = '';\n      var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n      bits = pad + bits;\n\n      for (var i = 0; i < bits.length; i += 8) {\n        data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n      }\n\n      return data;\n    }\n\n    function makeSimpleBlock(data) {\n      var flags = 0;\n\n      if (data.keyframe) {\n        flags |= 128;\n      }\n\n      if (data.invisible) {\n        flags |= 8;\n      }\n\n      if (data.lacing) {\n        flags |= data.lacing << 1;\n      }\n\n      if (data.discardable) {\n        flags |= 1;\n      }\n\n      if (data.trackNum > 127) {\n        throw 'TrackNumber > 127 not supported';\n      }\n\n      var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function (e) {\n        return String.fromCharCode(e);\n      }).join('') + data.frame;\n      return out;\n    }\n\n    function parseWebP(riff) {\n      var VP8 = riff.RIFF[0].WEBP[0];\n      var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\n\n      for (var i = 0, c = []; i < 4; i++) {\n        c[i] = VP8.charCodeAt(frameStart + 3 + i);\n      }\n\n      var width, height, tmp; //the code below is literally copied verbatim from the bitstream spec\n\n      tmp = c[1] << 8 | c[0];\n      width = tmp & 0x3FFF;\n      tmp = c[3] << 8 | c[2];\n      height = tmp & 0x3FFF;\n      return {\n        width: width,\n        height: height,\n        data: VP8,\n        riff: riff\n      };\n    }\n\n    function getStrLength(string, offset) {\n      return parseInt(string.substr(offset + 4, 4).split('').map(function (i) {\n        var unpadded = i.charCodeAt(0).toString(2);\n        return new Array(8 - unpadded.length + 1).join('0') + unpadded;\n      }).join(''), 2);\n    }\n\n    function parseRIFF(string) {\n      var offset = 0;\n      var chunks = {};\n\n      while (offset < string.length) {\n        var id = string.substr(offset, 4);\n        var len = getStrLength(string, offset);\n        var data = string.substr(offset + 4 + 4, len);\n        offset += 4 + 4 + len;\n        chunks[id] = chunks[id] || [];\n\n        if (id === 'RIFF' || id === 'LIST') {\n          chunks[id].push(parseRIFF(data));\n        } else {\n          chunks[id].push(data);\n        }\n      }\n\n      return chunks;\n    }\n\n    function doubleToString(num) {\n      return [].slice.call(new Uint8Array(new Float64Array([num]).buffer), 0).map(function (e) {\n        return String.fromCharCode(e);\n      }).reverse().join('');\n    }\n\n    var webm = new ArrayToWebM(frames.map(function (frame) {\n      var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n      webp.duration = frame.duration;\n      return webp;\n    }));\n    postMessage(webm);\n  }\n  /**\r\n   * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof Whammy\r\n   * @example\r\n   * recorder = new Whammy().Video(0.8, 100);\r\n   * recorder.compile(function(blob) {\r\n   *    // blob.size - blob.type\r\n   * });\r\n   */\n\n\n  WhammyVideo.prototype.compile = function (callback) {\n    var webWorker = processInWebWorker(whammyInWebWorker);\n\n    webWorker.onmessage = function (event) {\n      if (event.data.error) {\n        console.error(event.data.error);\n        return;\n      }\n\n      callback(event.data);\n    };\n\n    webWorker.postMessage(this.frames);\n  };\n\n  return {\n    /**\r\n     * A more abstract-ish API.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * @param {?number} speed - 0.8\r\n     * @param {?number} quality - 100\r\n     */\n    Video: WhammyVideo\n  };\n}();\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.Whammy = Whammy;\n} // ______________ (indexed-db)\n// DiskStorage.js\n\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\n\n\nvar DiskStorage = {\n  /**\r\n   * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n   * @method\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.init();\r\n   */\n  init: function () {\n    var self = this;\n\n    if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\n      console.error('IndexedDB API are not available in this browser.');\n      return;\n    }\n\n    var dbVersion = 1;\n    var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\n        db;\n    var request = indexedDB.open(dbName, dbVersion);\n\n    function createObjectStore(dataBase) {\n      dataBase.createObjectStore(self.dataStoreName);\n    }\n\n    function putInDB() {\n      var transaction = db.transaction([self.dataStoreName], 'readwrite');\n\n      if (self.videoBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\n      }\n\n      if (self.gifBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\n      }\n\n      if (self.audioBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n      }\n\n      function getFromStore(portionName) {\n        transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function (event) {\n          if (self.callback) {\n            self.callback(event.target.result, portionName);\n          }\n        };\n      }\n\n      getFromStore('audioBlob');\n      getFromStore('videoBlob');\n      getFromStore('gifBlob');\n    }\n\n    request.onerror = self.onError;\n\n    request.onsuccess = function () {\n      db = request.result;\n      db.onerror = self.onError;\n\n      if (db.setVersion) {\n        if (db.version !== dbVersion) {\n          var setVersion = db.setVersion(dbVersion);\n\n          setVersion.onsuccess = function () {\n            createObjectStore(db);\n            putInDB();\n          };\n        } else {\n          putInDB();\n        }\n      } else {\n        putInDB();\n      }\n    };\n\n    request.onupgradeneeded = function (event) {\n      createObjectStore(event.target.result);\n    };\n  },\n\n  /**\r\n   * This method fetches stored blobs from IndexedDB.\r\n   * @method\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.Fetch(function(dataURL, type) {\r\n   *     if(type === 'audioBlob') { }\r\n   *     if(type === 'videoBlob') { }\r\n   *     if(type === 'gifBlob')   { }\r\n   * });\r\n   */\n  Fetch: function (callback) {\n    this.callback = callback;\n    this.init();\n    return this;\n  },\n\n  /**\r\n   * This method stores blobs in IndexedDB.\r\n   * @method\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.Store({\r\n   *     audioBlob: yourAudioBlob,\r\n   *     videoBlob: yourVideoBlob,\r\n   *     gifBlob  : yourGifBlob\r\n   * });\r\n   */\n  Store: function (config) {\n    this.audioBlob = config.audioBlob;\n    this.videoBlob = config.videoBlob;\n    this.gifBlob = config.gifBlob;\n    this.init();\n    return this;\n  },\n\n  /**\r\n   * This function is invoked for any known/unknown error.\r\n   * @method\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.onError = function(error){\r\n   *     alerot( JSON.stringify(error) );\r\n   * };\r\n   */\n  onError: function (error) {\n    console.error(JSON.stringify(error, null, '\\t'));\n  },\n\n  /**\r\n   * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n   * @memberof DiskStorage\r\n   * @internal\r\n   * @example\r\n   * DiskStorage.dataStoreName = 'recordRTC';\r\n   */\n  dataStoreName: 'recordRTC',\n  dbName: null\n};\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.DiskStorage = DiskStorage;\n} // ______________\n// GifRecorder.js\n\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\n\n\nfunction GifRecorder(mediaStream, config) {\n  if (typeof GIFEncoder === 'undefined') {\n    var script = document.createElement('script');\n    script.src = 'https://www.webrtc-experiment.com/gif-recorder.js';\n    (document.body || document.documentElement).appendChild(script);\n  }\n\n  config = config || {};\n  var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\n  /**\r\n   * This method records MediaStream.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n\n  this.record = function () {\n    if (typeof GIFEncoder === 'undefined') {\n      setTimeout(self.record, 1000);\n      return;\n    }\n\n    if (!isLoadedMetaData) {\n      setTimeout(self.record, 1000);\n      return;\n    }\n\n    if (!isHTMLObject) {\n      if (!config.width) {\n        config.width = video.offsetWidth || 320;\n      }\n\n      if (!config.height) {\n        config.height = video.offsetHeight || 240;\n      }\n\n      if (!config.video) {\n        config.video = {\n          width: config.width,\n          height: config.height\n        };\n      }\n\n      if (!config.canvas) {\n        config.canvas = {\n          width: config.width,\n          height: config.height\n        };\n      }\n\n      canvas.width = config.canvas.width || 320;\n      canvas.height = config.canvas.height || 240;\n      video.width = config.video.width || 320;\n      video.height = config.video.height || 240;\n    } // external library to record as GIF images\n\n\n    gifEncoder = new GIFEncoder(); // void setRepeat(int iter) \n    // Sets the number of times the set of GIF frames should be played. \n    // Default is 1; 0 means play indefinitely.\n\n    gifEncoder.setRepeat(0); // void setFrameRate(Number fps) \n    // Sets frame rate in frames per second. \n    // Equivalent to setDelay(1000/fps).\n    // Using \"setDelay\" instead of \"setFrameRate\"\n\n    gifEncoder.setDelay(config.frameRate || 200); // void setQuality(int quality) \n    // Sets quality of color quantization (conversion of images to the \n    // maximum 256 colors allowed by the GIF specification). \n    // Lower values (minimum = 1) produce better colors, \n    // but slow processing significantly. 10 is the default, \n    // and produces good color mapping at reasonable speeds. \n    // Values greater than 20 do not yield significant improvements in speed.\n\n    gifEncoder.setQuality(config.quality || 10); // Boolean start() \n    // This writes the GIF Header and returns false if it fails.\n\n    gifEncoder.start();\n\n    if (typeof config.onGifRecordingStarted === 'function') {\n      config.onGifRecordingStarted();\n    }\n\n    startTime = Date.now();\n\n    function drawVideoFrame(time) {\n      if (self.clearedRecordedData === true) {\n        return;\n      }\n\n      if (isPausedRecording) {\n        return setTimeout(function () {\n          drawVideoFrame(time);\n        }, 100);\n      }\n\n      lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n      if (typeof lastFrameTime === undefined) {\n        lastFrameTime = time;\n      } // ~10 fps\n\n\n      if (time - lastFrameTime < 90) {\n        return;\n      }\n\n      if (!isHTMLObject && video.paused) {\n        // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n        // Tweak for Android Chrome\n        video.play();\n      }\n\n      if (!isHTMLObject) {\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      }\n\n      if (config.onGifPreview) {\n        config.onGifPreview(canvas.toDataURL('image/png'));\n      }\n\n      gifEncoder.addFrame(context);\n      lastFrameTime = time;\n    }\n\n    lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n    if (config.initCallback) {\n      config.initCallback();\n    }\n  };\n  /**\r\n   * This method stops recording MediaStream.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     img.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n\n\n  this.stop = function (callback) {\n    callback = callback || function () {};\n\n    if (lastAnimationFrame) {\n      cancelAnimationFrame(lastAnimationFrame);\n    }\n\n    endTime = Date.now();\n    /**\r\n     * @property {Blob} blob - The recorded blob object.\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(){\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\n\n    this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\n      type: 'image/gif'\n    });\n    callback(this.blob); // bug: find a way to clear old recorded blobs\n\n    gifEncoder.stream().bin = [];\n  };\n\n  var isPausedRecording = false;\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n\n  this.pause = function () {\n    isPausedRecording = true;\n  };\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n\n\n  this.resume = function () {\n    isPausedRecording = false;\n  };\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof GifRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n\n\n  this.clearRecordedData = function () {\n    self.clearedRecordedData = true;\n    clearRecordedDataCB();\n  };\n\n  function clearRecordedDataCB() {\n    if (gifEncoder) {\n      gifEncoder.stream().bin = [];\n    }\n  } // for debugging\n\n\n  this.name = 'GifRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  if (isHTMLObject) {\n    if (mediaStream instanceof CanvasRenderingContext2D) {\n      context = mediaStream;\n      canvas = context.canvas;\n    } else if (mediaStream instanceof HTMLCanvasElement) {\n      context = mediaStream.getContext('2d');\n      canvas = mediaStream;\n    }\n  }\n\n  var isLoadedMetaData = true;\n\n  if (!isHTMLObject) {\n    var video = document.createElement('video');\n    video.muted = true;\n    video.autoplay = true;\n    video.playsInline = true;\n    isLoadedMetaData = false;\n\n    video.onloadedmetadata = function () {\n      isLoadedMetaData = true;\n    };\n\n    setSrcObject(mediaStream, video);\n    video.play();\n  }\n\n  var lastAnimationFrame = null;\n  var startTime, endTime, lastFrameTime;\n  var gifEncoder;\n  var self = this;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.GifRecorder = GifRecorder;\n} // Last time updated: 2019-06-21 4:09:42 AM UTC\n// ________________________\n// MultiStreamsMixer v1.2.2\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n\nfunction MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\n  var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n  (function (that) {\n    if (typeof RecordRTC !== 'undefined') {\n      return;\n    }\n\n    if (!that) {\n      return;\n    }\n\n    if (typeof window !== 'undefined') {\n      return;\n    }\n\n    if (typeof global === 'undefined') {\n      return;\n    }\n\n    global.navigator = {\n      userAgent: browserFakeUserAgent,\n      getUserMedia: function () {}\n    };\n\n    if (!global.console) {\n      global.console = {};\n    }\n\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n      global.console.error = global.console.log = global.console.log || function () {\n        console.log(arguments);\n      };\n    }\n\n    if (typeof document === 'undefined') {\n      /*global document:true */\n      that.document = {\n        documentElement: {\n          appendChild: function () {\n            return '';\n          }\n        }\n      };\n\n      document.createElement = document.captureStream = document.mozCaptureStream = function () {\n        var obj = {\n          getContext: function () {\n            return obj;\n          },\n          play: function () {},\n          pause: function () {},\n          drawImage: function () {},\n          toDataURL: function () {\n            return '';\n          },\n          style: {}\n        };\n        return obj;\n      };\n\n      that.HTMLVideoElement = function () {};\n    }\n\n    if (typeof location === 'undefined') {\n      /*global location:true */\n      that.location = {\n        protocol: 'file:',\n        href: '',\n        hash: ''\n      };\n    }\n\n    if (typeof screen === 'undefined') {\n      /*global screen:true */\n      that.screen = {\n        width: 0,\n        height: 0\n      };\n    }\n\n    if (typeof URL === 'undefined') {\n      /*global screen:true */\n      that.URL = {\n        createObjectURL: function () {\n          return '';\n        },\n        revokeObjectURL: function () {\n          return '';\n        }\n      };\n    }\n    /*global window:true */\n\n\n    that.window = global;\n  })(typeof global !== 'undefined' ? global : null); // requires: chrome://flags/#enable-experimental-web-platform-features\n\n\n  elementClass = elementClass || 'multi-streams-mixer';\n  var videos = [];\n  var isStopDrawingFrames = false;\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  canvas.style.opacity = 0;\n  canvas.style.position = 'absolute';\n  canvas.style.zIndex = -1;\n  canvas.style.top = '-1000em';\n  canvas.style.left = '-1000em';\n  canvas.className = elementClass;\n  (document.body || document.documentElement).appendChild(canvas);\n  this.disableLogs = false;\n  this.frameInterval = 10;\n  this.width = 360;\n  this.height = 240; // use gain node to prevent echo\n\n  this.useGainNode = true;\n  var self = this; // _____________________________\n  // Cross-Browser-Declarations.js\n  // WebAudio API representer\n\n  var AudioContext = window.AudioContext;\n\n  if (typeof AudioContext === 'undefined') {\n    if (typeof webkitAudioContext !== 'undefined') {\n      /*global AudioContext:true */\n      AudioContext = webkitAudioContext;\n    }\n\n    if (typeof mozAudioContext !== 'undefined') {\n      /*global AudioContext:true */\n      AudioContext = mozAudioContext;\n    }\n  }\n  /*jshint -W079 */\n\n\n  var URL = window.URL;\n\n  if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n    /*global URL:true */\n    URL = webkitURL;\n  }\n\n  if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n    // maybe window.navigator?\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n      navigator.getUserMedia = navigator.webkitGetUserMedia;\n    }\n\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\n      navigator.getUserMedia = navigator.mozGetUserMedia;\n    }\n  }\n\n  var MediaStream = window.MediaStream;\n\n  if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n    MediaStream = webkitMediaStream;\n  }\n  /*global MediaStream:true */\n\n\n  if (typeof MediaStream !== 'undefined') {\n    // override \"stop\" method for all browsers\n    if (typeof MediaStream.prototype.stop === 'undefined') {\n      MediaStream.prototype.stop = function () {\n        this.getTracks().forEach(function (track) {\n          track.stop();\n        });\n      };\n    }\n  }\n\n  var Storage = {};\n\n  if (typeof AudioContext !== 'undefined') {\n    Storage.AudioContext = AudioContext;\n  } else if (typeof webkitAudioContext !== 'undefined') {\n    Storage.AudioContext = webkitAudioContext;\n  }\n\n  function setSrcObject(stream, element) {\n    if ('srcObject' in element) {\n      element.srcObject = stream;\n    } else if ('mozSrcObject' in element) {\n      element.mozSrcObject = stream;\n    } else {\n      element.srcObject = stream;\n    }\n  }\n\n  this.startDrawingFrames = function () {\n    drawVideosToCanvas();\n  };\n\n  function drawVideosToCanvas() {\n    if (isStopDrawingFrames) {\n      return;\n    }\n\n    var videosLength = videos.length;\n    var fullcanvas = false;\n    var remaining = [];\n    videos.forEach(function (video) {\n      if (!video.stream) {\n        video.stream = {};\n      }\n\n      if (video.stream.fullcanvas) {\n        fullcanvas = video;\n      } else {\n        // todo: video.stream.active or video.stream.live to fix blank frames issues?\n        remaining.push(video);\n      }\n    });\n\n    if (fullcanvas) {\n      canvas.width = fullcanvas.stream.width;\n      canvas.height = fullcanvas.stream.height;\n    } else if (remaining.length) {\n      canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\n      var height = 1;\n\n      if (videosLength === 3 || videosLength === 4) {\n        height = 2;\n      }\n\n      if (videosLength === 5 || videosLength === 6) {\n        height = 3;\n      }\n\n      if (videosLength === 7 || videosLength === 8) {\n        height = 4;\n      }\n\n      if (videosLength === 9 || videosLength === 10) {\n        height = 5;\n      }\n\n      canvas.height = remaining[0].height * height;\n    } else {\n      canvas.width = self.width || 360;\n      canvas.height = self.height || 240;\n    }\n\n    if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\n      drawImage(fullcanvas);\n    }\n\n    remaining.forEach(function (video, idx) {\n      drawImage(video, idx);\n    });\n    setTimeout(drawVideosToCanvas, self.frameInterval);\n  }\n\n  function drawImage(video, idx) {\n    if (isStopDrawingFrames) {\n      return;\n    }\n\n    var x = 0;\n    var y = 0;\n    var width = video.width;\n    var height = video.height;\n\n    if (idx === 1) {\n      x = video.width;\n    }\n\n    if (idx === 2) {\n      y = video.height;\n    }\n\n    if (idx === 3) {\n      x = video.width;\n      y = video.height;\n    }\n\n    if (idx === 4) {\n      y = video.height * 2;\n    }\n\n    if (idx === 5) {\n      x = video.width;\n      y = video.height * 2;\n    }\n\n    if (idx === 6) {\n      y = video.height * 3;\n    }\n\n    if (idx === 7) {\n      x = video.width;\n      y = video.height * 3;\n    }\n\n    if (typeof video.stream.left !== 'undefined') {\n      x = video.stream.left;\n    }\n\n    if (typeof video.stream.top !== 'undefined') {\n      y = video.stream.top;\n    }\n\n    if (typeof video.stream.width !== 'undefined') {\n      width = video.stream.width;\n    }\n\n    if (typeof video.stream.height !== 'undefined') {\n      height = video.stream.height;\n    }\n\n    context.drawImage(video, x, y, width, height);\n\n    if (typeof video.stream.onRender === 'function') {\n      video.stream.onRender(context, x, y, width, height, idx);\n    }\n  }\n\n  function getMixedStream() {\n    isStopDrawingFrames = false;\n    var mixedVideoStream = getMixedVideoStream();\n    var mixedAudioStream = getMixedAudioStream();\n\n    if (mixedAudioStream) {\n      mixedAudioStream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).forEach(function (track) {\n        mixedVideoStream.addTrack(track);\n      });\n    }\n\n    var fullcanvas;\n    arrayOfMediaStreams.forEach(function (stream) {\n      if (stream.fullcanvas) {\n        fullcanvas = true;\n      }\n    }); // mixedVideoStream.prototype.appendStreams = appendStreams;\n    // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\n    // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\n\n    return mixedVideoStream;\n  }\n\n  function getMixedVideoStream() {\n    resetVideoStreams();\n    var capturedStream;\n\n    if ('captureStream' in canvas) {\n      capturedStream = canvas.captureStream();\n    } else if ('mozCaptureStream' in canvas) {\n      capturedStream = canvas.mozCaptureStream();\n    } else if (!self.disableLogs) {\n      console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\n    }\n\n    var videoStream = new MediaStream();\n    capturedStream.getTracks().filter(function (t) {\n      return t.kind === 'video';\n    }).forEach(function (track) {\n      videoStream.addTrack(track);\n    });\n    canvas.stream = videoStream;\n    return videoStream;\n  }\n\n  function getMixedAudioStream() {\n    // via: @pehrsons\n    if (!Storage.AudioContextConstructor) {\n      Storage.AudioContextConstructor = new Storage.AudioContext();\n    }\n\n    self.audioContext = Storage.AudioContextConstructor;\n    self.audioSources = [];\n\n    if (self.useGainNode === true) {\n      self.gainNode = self.audioContext.createGain();\n      self.gainNode.connect(self.audioContext.destination);\n      self.gainNode.gain.value = 0; // don't hear self\n    }\n\n    var audioTracksLength = 0;\n    arrayOfMediaStreams.forEach(function (stream) {\n      if (!stream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).length) {\n        return;\n      }\n\n      audioTracksLength++;\n      var audioSource = self.audioContext.createMediaStreamSource(stream);\n\n      if (self.useGainNode === true) {\n        audioSource.connect(self.gainNode);\n      }\n\n      self.audioSources.push(audioSource);\n    });\n\n    if (!audioTracksLength) {\n      // because \"self.audioContext\" is not initialized\n      // that's why we've to ignore rest of the code\n      return;\n    }\n\n    self.audioDestination = self.audioContext.createMediaStreamDestination();\n    self.audioSources.forEach(function (audioSource) {\n      audioSource.connect(self.audioDestination);\n    });\n    return self.audioDestination.stream;\n  }\n\n  function getVideo(stream) {\n    var video = document.createElement('video');\n    setSrcObject(stream, video);\n    video.className = elementClass;\n    video.muted = true;\n    video.volume = 0;\n    video.width = stream.width || self.width || 360;\n    video.height = stream.height || self.height || 240;\n    video.play();\n    return video;\n  }\n\n  this.appendStreams = function (streams) {\n    if (!streams) {\n      throw 'First parameter is required.';\n    }\n\n    if (!(streams instanceof Array)) {\n      streams = [streams];\n    }\n\n    streams.forEach(function (stream) {\n      var newStream = new MediaStream();\n\n      if (stream.getTracks().filter(function (t) {\n        return t.kind === 'video';\n      }).length) {\n        var video = getVideo(stream);\n        video.stream = stream;\n        videos.push(video);\n        newStream.addTrack(stream.getTracks().filter(function (t) {\n          return t.kind === 'video';\n        })[0]);\n      }\n\n      if (stream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).length) {\n        var audioSource = self.audioContext.createMediaStreamSource(stream);\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\n        audioSource.connect(self.audioDestination);\n        newStream.addTrack(self.audioDestination.stream.getTracks().filter(function (t) {\n          return t.kind === 'audio';\n        })[0]);\n      }\n\n      arrayOfMediaStreams.push(newStream);\n    });\n  };\n\n  this.releaseStreams = function () {\n    videos = [];\n    isStopDrawingFrames = true;\n\n    if (self.gainNode) {\n      self.gainNode.disconnect();\n      self.gainNode = null;\n    }\n\n    if (self.audioSources.length) {\n      self.audioSources.forEach(function (source) {\n        source.disconnect();\n      });\n      self.audioSources = [];\n    }\n\n    if (self.audioDestination) {\n      self.audioDestination.disconnect();\n      self.audioDestination = null;\n    }\n\n    if (self.audioContext) {\n      self.audioContext.close();\n    }\n\n    self.audioContext = null;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (canvas.stream) {\n      canvas.stream.stop();\n      canvas.stream = null;\n    }\n  };\n\n  this.resetVideoStreams = function (streams) {\n    if (streams && !(streams instanceof Array)) {\n      streams = [streams];\n    }\n\n    resetVideoStreams(streams);\n  };\n\n  function resetVideoStreams(streams) {\n    videos = [];\n    streams = streams || arrayOfMediaStreams; // via: @adrian-ber\n\n    streams.forEach(function (stream) {\n      if (!stream.getTracks().filter(function (t) {\n        return t.kind === 'video';\n      }).length) {\n        return;\n      }\n\n      var video = getVideo(stream);\n      video.stream = stream;\n      videos.push(video);\n    });\n  } // for debugging\n\n\n  this.name = 'MultiStreamsMixer';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  this.getMixedStream = getMixedStream;\n}\n\nif (typeof RecordRTC === 'undefined') {\n  if (typeof module !== 'undefined'\n  /* && !!module.exports*/\n  ) {\n    module.exports = MultiStreamsMixer;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define('MultiStreamsMixer', [], function () {\n      return MultiStreamsMixer;\n    });\n  }\n} // ______________________\n// MultiStreamRecorder.js\n\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\n\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\n\n\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\n  arrayOfMediaStreams = arrayOfMediaStreams || [];\n  var self = this;\n  var mixer;\n  var mediaRecorder;\n  options = options || {\n    elementClass: 'multi-streams-mixer',\n    mimeType: 'video/webm',\n    video: {\n      width: 360,\n      height: 240\n    }\n  };\n\n  if (!options.frameInterval) {\n    options.frameInterval = 10;\n  }\n\n  if (!options.video) {\n    options.video = {};\n  }\n\n  if (!options.video.width) {\n    options.video.width = 360;\n  }\n\n  if (!options.video.height) {\n    options.video.height = 240;\n  }\n  /**\r\n   * This method records all MediaStreams.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n\n\n  this.record = function () {\n    // github/muaz-khan/MultiStreamsMixer\n    mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\n\n    if (getAllVideoTracks().length) {\n      mixer.frameInterval = options.frameInterval || 10;\n      mixer.width = options.video.width || 360;\n      mixer.height = options.video.height || 240;\n      mixer.startDrawingFrames();\n    }\n\n    if (options.previewStream && typeof options.previewStream === 'function') {\n      options.previewStream(mixer.getMixedStream());\n    } // record using MediaRecorder API\n\n\n    mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\n    mediaRecorder.record();\n  };\n\n  function getAllVideoTracks() {\n    var tracks = [];\n    arrayOfMediaStreams.forEach(function (stream) {\n      getTracks(stream, 'video').forEach(function (track) {\n        tracks.push(track);\n      });\n    });\n    return tracks;\n  }\n  /**\r\n   * This method stops recording MediaStream.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n\n\n  this.stop = function (callback) {\n    if (!mediaRecorder) {\n      return;\n    }\n\n    mediaRecorder.stop(function (blob) {\n      self.blob = blob;\n      callback(blob);\n      self.clearRecordedData();\n    });\n  };\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n\n\n  this.pause = function () {\n    if (mediaRecorder) {\n      mediaRecorder.pause();\n    }\n  };\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n\n\n  this.resume = function () {\n    if (mediaRecorder) {\n      mediaRecorder.resume();\n    }\n  };\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n\n\n  this.clearRecordedData = function () {\n    if (mediaRecorder) {\n      mediaRecorder.clearRecordedData();\n      mediaRecorder = null;\n    }\n\n    if (mixer) {\n      mixer.releaseStreams();\n      mixer = null;\n    }\n  };\n  /**\r\n   * Add extra media-streams to existing recordings.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n   * @example\r\n   * recorder.addStreams([newAudioStream, newVideoStream]);\r\n   */\n\n\n  this.addStreams = function (streams) {\n    if (!streams) {\n      throw 'First parameter is required.';\n    }\n\n    if (!(streams instanceof Array)) {\n      streams = [streams];\n    }\n\n    arrayOfMediaStreams.concat(streams);\n\n    if (!mediaRecorder || !mixer) {\n      return;\n    }\n\n    mixer.appendStreams(streams);\n\n    if (options.previewStream && typeof options.previewStream === 'function') {\n      options.previewStream(mixer.getMixedStream());\n    }\n  };\n  /**\r\n   * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n   * @example\r\n   * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n   */\n\n\n  this.resetVideoStreams = function (streams) {\n    if (!mixer) {\n      return;\n    }\n\n    if (streams && !(streams instanceof Array)) {\n      streams = [streams];\n    }\n\n    mixer.resetVideoStreams(streams);\n  };\n  /**\r\n   * Returns MultiStreamsMixer\r\n   * @method\r\n   * @memberof MultiStreamRecorder\r\n   * @example\r\n   * let mixer = recorder.getMixer();\r\n   * mixer.appendStreams([newStream]);\r\n   */\n\n\n  this.getMixer = function () {\n    return mixer;\n  }; // for debugging\n\n\n  this.name = 'MultiStreamRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\n} // _____________________\n// RecordRTC.promises.js\n\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \r\n * recorder.recordRTC.onStateChanged = function(state) {};\r\n * recorder.recordRTC.setRecordingDuration(5000);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\n\n\nfunction RecordRTCPromisesHandler(mediaStream, options) {\n  if (!this) {\n    throw 'Use \"new RecordRTCPromisesHandler()\"';\n  }\n\n  if (typeof mediaStream === 'undefined') {\n    throw 'First argument \"MediaStream\" is required.';\n  }\n\n  var self = this;\n  /**\r\n   * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * let internal = recorder.recordRTC.getInternalRecorder();\r\n   * alert(internal instanceof MediaStreamRecorder);\r\n   * recorder.recordRTC.onStateChanged = function(state) {};\r\n   */\n\n  self.recordRTC = new RecordRTC(mediaStream, options);\n  /**\r\n   * This method records MediaStream.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.startRecording()\r\n   *         .then(successCB)\r\n   *         .catch(errorCB);\r\n   */\n\n  this.startRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.startRecording();\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * This method stops the recording.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.stopRecording().then(function() {\r\n   *     var blob = recorder.getBlob();\r\n   * }).catch(errorCB);\r\n   */\n\n\n  this.stopRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.stopRecording(function (url) {\n          self.blob = self.recordRTC.getBlob();\n\n          if (!self.blob || !self.blob.size) {\n            reject('Empty blob.', self.blob);\n            return;\n          }\n\n          resolve(url);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.pauseRecording()\r\n   *         .then(successCB)\r\n   *         .catch(errorCB);\r\n   */\n\n\n  this.pauseRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.pauseRecording();\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * This method resumes the recording.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.resumeRecording()\r\n   *         .then(successCB)\r\n   *         .catch(errorCB);\r\n   */\n\n\n  this.resumeRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.resumeRecording();\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * This method returns data-url for the recorded blob.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.stopRecording().then(function() {\r\n   *     recorder.getDataURL().then(function(dataURL) {\r\n   *         window.open(dataURL);\r\n   *     }).catch(errorCB);;\r\n   * }).catch(errorCB);\r\n   */\n\n\n  this.getDataURL = function (callback) {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.getDataURL(function (dataURL) {\n          resolve(dataURL);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * This method returns the recorded blob.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.stopRecording().then(function() {\r\n   *     recorder.getBlob().then(function(blob) {})\r\n   * }).catch(errorCB);\r\n   */\n\n\n  this.getBlob = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.getBlob());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * This method returns the internal recording object.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * let internalRecorder = await recorder.getInternalRecorder();\r\n   * if(internalRecorder instanceof MultiStreamRecorder) {\r\n   *     internalRecorder.addStreams([newAudioStream]);\r\n   *     internalRecorder.resetVideoStreams([screenStream]);\r\n   * }\r\n   * @returns {Object} \r\n   */\n\n\n  this.getInternalRecorder = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.getInternalRecorder());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * await recorder.reset();\r\n   * recorder.startRecording(); // record again\r\n   */\n\n\n  this.reset = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.reset());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * Destroy RecordRTC instance. Clear all recorders and objects.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * recorder.destroy().then(successCB).catch(errorCB);\r\n   */\n\n\n  this.destroy = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.destroy());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * Get recorder's readonly state.\r\n   * @method\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * let state = await recorder.getState();\r\n   * // or\r\n   * recorder.getState().then(state => { console.log(state); })\r\n   * @returns {String} Returns recording state.\r\n   */\n\n\n  this.getState = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.getState());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\r\n   * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @example\r\n   * await recorder.stopRecording();\r\n   * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\r\n   * invokeSaveAsDialog(blob);\r\n   */\n\n\n  this.blob = null;\n  /**\r\n   * RecordRTC version number\r\n   * @property {String} version - Release version number.\r\n   * @memberof RecordRTCPromisesHandler\r\n   * @static\r\n   * @readonly\r\n   * @example\r\n   * alert(recorder.version);\r\n   */\n\n  this.version = '5.6.2';\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\n} // ______________________\n// WebAssemblyRecorder.js\n\n/**\r\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\r\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WebAssemblyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WebAssemblyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}\r\n */\n\n\nfunction WebAssemblyRecorder(stream, config) {\n  // based on: github.com/GoogleChromeLabs/webm-wasm\n  if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\n    // because it fixes readable/writable streams issues\n    console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\n  }\n\n  config = config || {};\n  config.width = config.width || 640;\n  config.height = config.height || 480;\n  config.frameRate = config.frameRate || 30;\n  config.bitrate = config.bitrate || 1200;\n  config.realtime = config.realtime || true;\n\n  function createBufferURL(buffer, type) {\n    return URL.createObjectURL(new Blob([buffer], {\n      type: type || ''\n    }));\n  }\n\n  var finished;\n\n  function cameraStream() {\n    return new ReadableStream({\n      start: function (controller) {\n        var cvs = document.createElement('canvas');\n        var video = document.createElement('video');\n        var first = true;\n        video.srcObject = stream;\n        video.muted = true;\n        video.height = config.height;\n        video.width = config.width;\n        video.volume = 0;\n\n        video.onplaying = function () {\n          cvs.width = config.width;\n          cvs.height = config.height;\n          var ctx = cvs.getContext('2d');\n          var frameTimeout = 1000 / config.frameRate;\n          var cameraTimer = setInterval(function f() {\n            if (finished) {\n              clearInterval(cameraTimer);\n              controller.close();\n            }\n\n            if (first) {\n              first = false;\n\n              if (config.onVideoProcessStarted) {\n                config.onVideoProcessStarted();\n              }\n            }\n\n            ctx.drawImage(video, 0, 0);\n\n            if (controller._controlledReadableStream.state !== 'closed') {\n              try {\n                controller.enqueue(ctx.getImageData(0, 0, config.width, config.height));\n              } catch (e) {}\n            }\n          }, frameTimeout);\n        };\n\n        video.play();\n      }\n    });\n  }\n\n  var worker;\n\n  function startRecording(stream, buffer) {\n    if (!config.workerPath && !buffer) {\n      finished = false; // is it safe to use @latest ?\n\n      fetch('https://unpkg.com/webm-wasm@latest/dist/webm-worker.js').then(function (r) {\n        r.arrayBuffer().then(function (buffer) {\n          startRecording(stream, buffer);\n        });\n      });\n      return;\n    }\n\n    if (!config.workerPath && buffer instanceof ArrayBuffer) {\n      var blob = new Blob([buffer], {\n        type: 'text/javascript'\n      });\n      config.workerPath = URL.createObjectURL(blob);\n    }\n\n    if (!config.workerPath) {\n      console.error('workerPath parameter is missing.');\n    }\n\n    worker = new Worker(config.workerPath);\n    worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\n    worker.addEventListener('message', function (event) {\n      if (event.data === 'READY') {\n        worker.postMessage({\n          width: config.width,\n          height: config.height,\n          bitrate: config.bitrate || 1200,\n          timebaseDen: config.frameRate || 30,\n          realtime: config.realtime\n        });\n        cameraStream().pipeTo(new WritableStream({\n          write: function (image) {\n            if (finished) {\n              console.error('Got image, but recorder is finished!');\n              return;\n            }\n\n            worker.postMessage(image.data.buffer, [image.data.buffer]);\n          }\n        }));\n      } else if (!!event.data) {\n        if (!isPaused) {\n          arrayOfBuffers.push(event.data);\n        }\n      }\n    });\n  }\n  /**\r\n   * This method records video.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.record();\r\n   */\n\n\n  this.record = function () {\n    arrayOfBuffers = [];\n    isPaused = false;\n    this.blob = null;\n    startRecording(stream);\n\n    if (typeof config.initCallback === 'function') {\n      config.initCallback();\n    }\n  };\n\n  var isPaused;\n  /**\r\n   * This method pauses the recording process.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.pause();\r\n   */\n\n  this.pause = function () {\n    isPaused = true;\n  };\n  /**\r\n   * This method resumes the recording process.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.resume();\r\n   */\n\n\n  this.resume = function () {\n    isPaused = false;\n  };\n\n  function terminate(callback) {\n    if (!worker) {\n      if (callback) {\n        callback();\n      }\n\n      return;\n    } // Wait for null event data to indicate that the encoding is complete\n\n\n    worker.addEventListener('message', function (event) {\n      if (event.data === null) {\n        worker.terminate();\n        worker = null;\n\n        if (callback) {\n          callback();\n        }\n      }\n    });\n    worker.postMessage(null);\n  }\n\n  var arrayOfBuffers = [];\n  /**\r\n   * This method stops recording video.\r\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.stop(function(blob) {\r\n   *     video.src = URL.createObjectURL(blob);\r\n   * });\r\n   */\n\n  this.stop = function (callback) {\n    finished = true;\n    var recorder = this;\n    terminate(function () {\n      recorder.blob = new Blob(arrayOfBuffers, {\n        type: 'video/webm'\n      });\n      callback(recorder.blob);\n    });\n  }; // for debugging\n\n\n  this.name = 'WebAssemblyRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n  /**\r\n   * This method resets currently recorded data.\r\n   * @method\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.clearRecordedData();\r\n   */\n\n\n  this.clearRecordedData = function () {\n    arrayOfBuffers = [];\n    isPaused = false;\n    this.blob = null; // todo: if recording-ON then STOP it first\n  };\n  /**\r\n   * @property {Blob} blob - The recorded blob object.\r\n   * @memberof WebAssemblyRecorder\r\n   * @example\r\n   * recorder.stop(function(){\r\n   *     var blob = recorder.blob;\r\n   * });\r\n   */\n\n\n  this.blob = null;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\n}","map":{"version":3,"names":["RecordRTC","mediaStream","config","type","RecordRTCConfiguration","self","startRecording","config2","disableLogs","console","log","version","mediaRecorder","clearRecordedData","record","setState","recordingDuration","handleRecordingDuration","initRecorder","initCallback","Recorder","GetRecorderType","constructor","name","stopRecording","callback","warningLog","state","resumeRecording","setTimeout","warn","stop","_callback","__blob","call","Object","keys","forEach","key","blob","bytesToSize","size","url","URL","createObjectURL","e","autoWriteToDisk","getDataURL","dataURL","parameter","DiskStorage","Store","pauseRecording","pause","resume","readFile","_blob","postMessage","FileReaderSync","readAsDataURL","_mediaRecorder","Worker","navigator","mozGetUserMedia","webWorker","processInWebWorker","onmessage","event","data","reader","FileReader","onload","target","result","_function","Blob","toString","worker","revokeObjectURL","counter","onRecordingStopped","onStateChanged","WARNING","returnObject","setRecordingDuration","getBlob","toURL","getInternalRecorder","save","fileName","invokeSaveAsDialog","getFromDisk","setAdvertisementArray","arrayOfWebPImages","advertisement","length","i","push","duration","image","bufferSize","sampleRate","buffer","reset","getState","destroy","disableLogsCache","Storage","AudioContextConstructor","close","prop","module","exports","define","amd","Fetch","_type","replace","writeToDisk","options","audio","video","gif","audioDataURL","videoDataURL","gifDataURL","audioBlob","videoBlob","gifBlob","recorderType","WhammyRecorder","CanvasRecorder","WebAssemblyRecorder","GifRecorder","StereoAudioRecorder","MediaStreamRecorder","getTracks","MediaRecorder","prototype","mimeType","split","bitsPerSecond","recorder","isChrome","isEdge","isOpera","ReadableStream","isMediaRecorderCompatible","isTypeSupported","Array","MultiStreamRecorder","isSafari","MRecordRTC","addStream","_mediaStream","mediaType","audioRecorder","numberOfAudioChannels","timeSlice","onTimeStamp","newStream","videoTrack","isFirefox","MediaStream","addTrack","videoRecorder","canvas","frameInterval","workerPath","webAssemblyPath","frameRate","bitrate","isSingleRecorder","gifRecorder","quality","blobURL","output","_audioDataURL","_videoDataURL","callback00","webkitURL","args","browserFakeUserAgent","that","window","global","userAgent","getUserMedia","error","arguments","document","documentElement","appendChild","createElement","captureStream","mozCaptureStream","obj","getContext","play","drawImage","toDataURL","style","HTMLVideoElement","location","protocol","href","hash","screen","width","height","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","lastTime","element","currTime","Date","getTime","timeToCall","Math","max","id","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","AudioContext","webkitAudioContext","mozAudioContext","webkitGetUserMedia","indexOf","msSaveBlob","msSaveOrOpenBlob","opera","toLowerCase","test","isElectron","webkitMediaStream","track","bytes","k","sizes","parseInt","floor","pow","toPrecision","file","fileExtension","splitted","fileFullName","round","random","hyperlink","download","body","click","dispatchEvent","MouseEvent","view","bubbles","cancelable","process","versions","electron","stream","kind","filter","t","setSrcObject","srcObject","mozSrcObject","getSeekableBlob","inputBlob","EBML","Error","Reader","decoder","Decoder","tools","fileReader","ebmlElms","decode","read","refinedMetadataBuf","makeMetadataSeekable","metadatas","cues","slice","metadataSize","newBlob","readAsArrayBuffer","nVer","appVersion","nAgt","fullVersion","parseFloat","majorVersion","nameOffset","verOffset","ix","substring","isNaN","arrayOfBlobs","getArrayOfBlobs","timestamps","allStates","recorderHints","canRecordMimeType","ondataavailable","updateTimeStamp","getNativeBlob","getMimeType","recordingCallback","onstart","onpause","onresume","onstop","onerror","looper","manuallyStopped","timeslice","start","secondObject","clearRecordedDataCB","isMediaStreamActive","active","ended","getAllStates","checkForInactiveTracks","leftchannel","rightchannel","recording","recordingLength","jsAudioNode","desiredSampRate","leftChannel","resetVariables","isAudioProcessStarted","isPaused","mergeLeftRightBuffers","mergeAudioBuffers","cb","leftBuffers","rightBuffers","internalInterleavedLength","mergeBuffers","interpolateArray","newSampleRate","oldSampleRate","fitCount","newData","springFactor","Number","tmp","before","toFixed","after","ceil","atPoint","linearInterpolate","channelBuffer","rLength","Float64Array","offset","lng","set","interleave","rightChannel","inputIndex","index","writeUTFBytes","string","setUint8","charCodeAt","interleaved","interleavedLength","resultingBufferLength","ArrayBuffer","DataView","setUint32","setUint16","volume","setInt16","noWorker","workerURL","terminate","byteLength","context","audioInput","createMediaStreamSource","legalBufferValues","JSON","stringify","createJavaScriptNode","createScriptProcessor","connect","intervalsBasedBuffers","left","right","onaudioprocess","disconnect","onAudioProcessDataAvailable","onAudioProcessStarted","inputBuffer","getChannelData","chLeft","Float32Array","chRight","createMediaStreamDestination","destination","htmlElement","html2canvas","isCanvasSupportsStreamCapturing","item","_isChrome","webkitRTCPeerConnection","chrome","chromeVersion","matchArray","match","useWhammyRecorder","globalCanvas","mediaStreamRecorder","HTMLCanvasElement","CanvasRenderingContext2D","isRecording","canvasMediaStream","webkitCaptureStream","mdStream","whammy","frames","drawCanvasFrame","getWebPImages","nodeName","framesLength","frame","idx","framesRemaining","onEncodingCallback","webp","compile","isPausedRecording","cloneCanvas","newCanvas","grabMouse","showMousePointer","onrendered","Whammy","Video","cloneNode","onloadedmetadata","muted","drawFrames","paused","isStopDrawing","asyncLoop","o","loop","functionToLoop","dropBlackFrames","_frames","_framesToCheck","_pixTolerance","_frameTolerance","localCanvas","context2d","resultFrames","checkUntilNotBlack","endCheckFrame","sampleColor","r","g","b","maxColorDifference","sqrt","pixTolerance","frameTolerance","doNotCheckNext","f","matchPixCount","endPixCheck","maxPixCount","finishImage","Image","imageData","getImageData","pix","currentColor","colorDifference","src","concat","_this","WhammyVideo","add","whammyInWebWorker","ArrayToWebM","info","checkFrames","clusterMaxDuration","doubleToString","frameNumber","clusterTimecode","clusterFrames","clusterDuration","clusterCounter","cluster","getClusterData","generateEBML","map","block","makeSimpleBlock","discardable","invisible","keyframe","lacing","trackNum","timecode","numToBuffer","num","parts","Uint8Array","reverse","strToBuffer","str","bitsToBuffer","bits","pad","join","substr","json","ebml","len","zeroes","sizeToString","padded","toBinStrOld","String","fromCharCode","flags","out","parseWebP","riff","VP8","RIFF","WEBP","frameStart","c","getStrLength","unpadded","parseRIFF","chunks","webm","atob","init","indexedDB","open","dbVersion","dbName","db","request","createObjectStore","dataBase","dataStoreName","putInDB","transaction","objectStore","put","getFromStore","portionName","get","onsuccess","onError","setVersion","onupgradeneeded","GIFEncoder","script","isHTMLObject","isLoadedMetaData","offsetWidth","offsetHeight","gifEncoder","setRepeat","setDelay","setQuality","onGifRecordingStarted","startTime","now","drawVideoFrame","time","clearedRecordedData","lastAnimationFrame","lastFrameTime","undefined","onGifPreview","addFrame","endTime","bin","autoplay","playsInline","MultiStreamsMixer","arrayOfMediaStreams","elementClass","videos","isStopDrawingFrames","opacity","position","zIndex","top","className","useGainNode","startDrawingFrames","drawVideosToCanvas","videosLength","fullcanvas","remaining","x","y","onRender","getMixedStream","mixedVideoStream","getMixedVideoStream","mixedAudioStream","getMixedAudioStream","resetVideoStreams","capturedStream","videoStream","audioContext","audioSources","gainNode","createGain","gain","value","audioTracksLength","audioSource","audioDestination","getVideo","appendStreams","streams","releaseStreams","source","clearRect","mixer","getAllVideoTracks","previewStream","tracks","addStreams","getMixer","RecordRTCPromisesHandler","recordRTC","Promise","resolve","reject","WritableStream","realtime","createBufferURL","finished","cameraStream","controller","cvs","first","onplaying","ctx","frameTimeout","cameraTimer","setInterval","clearInterval","onVideoProcessStarted","_controlledReadableStream","enqueue","fetch","then","arrayBuffer","addEventListener","timebaseDen","pipeTo","write","arrayOfBuffers"],"sources":["/Users/so._.may._.see._.macy/Desktop/tpat/node_modules/recordrtc/RecordRTC.js"],"sourcesContent":["'use strict';\r\n\r\n// Last time updated: 2021-03-09 3:20:22 AM UTC\r\n\r\n// ________________\r\n// RecordRTC v5.6.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\n// ____________\r\n// RecordRTC.js\r\n\r\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction RecordRTC(mediaStream, config) {\r\n    if (!mediaStream) {\r\n        throw 'First parameter is required.';\r\n    }\r\n\r\n    config = config || {\r\n        type: 'video'\r\n    };\r\n\r\n    config = new RecordRTCConfiguration(mediaStream, config);\r\n\r\n    // a reference to user's recordRTC object\r\n    var self = this;\r\n\r\n    function startRecording(config2) {\r\n        if (!config.disableLogs) {\r\n            console.log('RecordRTC version: ', self.version);\r\n        }\r\n\r\n        if (!!config2) {\r\n            // allow users to set options using startRecording method\r\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\r\n            config = new RecordRTCConfiguration(mediaStream, config2);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('started recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder.record();\r\n\r\n            setState('recording');\r\n\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n            return self;\r\n        }\r\n\r\n        initRecorder(function() {\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    function initRecorder(initCallback) {\r\n        if (initCallback) {\r\n            config.initCallback = function() {\r\n                initCallback();\r\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\r\n            };\r\n        }\r\n\r\n        var Recorder = new GetRecorderType(mediaStream, config);\r\n\r\n        mediaRecorder = new Recorder(mediaStream, config);\r\n        mediaRecorder.record();\r\n\r\n        setState('recording');\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\r\n        }\r\n    }\r\n\r\n    function stopRecording(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'paused') {\r\n            self.resumeRecording();\r\n\r\n            setTimeout(function() {\r\n                stopRecording(callback);\r\n            }, 1);\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording' && !config.disableLogs) {\r\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Stopped recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (config.type !== 'gif') {\r\n            mediaRecorder.stop(_callback);\r\n        } else {\r\n            mediaRecorder.stop();\r\n            _callback();\r\n        }\r\n\r\n        setState('stopped');\r\n\r\n        function _callback(__blob) {\r\n            if (!mediaRecorder) {\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, '');\r\n                } else {\r\n                    callback('');\r\n                }\r\n                return;\r\n            }\r\n\r\n            Object.keys(mediaRecorder).forEach(function(key) {\r\n                if (typeof mediaRecorder[key] === 'function') {\r\n                    return;\r\n                }\r\n\r\n                self[key] = mediaRecorder[key];\r\n            });\r\n\r\n            var blob = mediaRecorder.blob;\r\n\r\n            if (!blob) {\r\n                if (__blob) {\r\n                    mediaRecorder.blob = blob = __blob;\r\n                } else {\r\n                    throw 'Recording failed.';\r\n                }\r\n            }\r\n\r\n            if (blob && !config.disableLogs) {\r\n                console.log(blob.type, '->', bytesToSize(blob.size));\r\n            }\r\n\r\n            if (callback) {\r\n                var url;\r\n\r\n                try {\r\n                    url = URL.createObjectURL(blob);\r\n                } catch (e) {}\r\n\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, url);\r\n                } else {\r\n                    callback(url);\r\n                }\r\n            }\r\n\r\n            if (!config.autoWriteToDisk) {\r\n                return;\r\n            }\r\n\r\n            getDataURL(function(dataURL) {\r\n                var parameter = {};\r\n                parameter[config.type + 'Blob'] = dataURL;\r\n                DiskStorage.Store(parameter);\r\n            });\r\n        }\r\n    }\r\n\r\n    function pauseRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('paused');\r\n\r\n        mediaRecorder.pause();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Paused recording.');\r\n        }\r\n    }\r\n\r\n    function resumeRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'paused') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('recording');\r\n\r\n        // not all libs have this method yet\r\n        mediaRecorder.resume();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Resumed recording.');\r\n        }\r\n    }\r\n\r\n    function readFile(_blob) {\r\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n    }\r\n\r\n    function getDataURL(callback, _mediaRecorder) {\r\n        if (!callback) {\r\n            throw 'Pass a callback function over getDataURL.';\r\n        }\r\n\r\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\r\n\r\n        if (!blob) {\r\n            if (!config.disableLogs) {\r\n                console.warn('Blob encoder did not finish its job yet.');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                getDataURL(callback, _mediaRecorder);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\r\n            var webWorker = processInWebWorker(readFile);\r\n\r\n            webWorker.onmessage = function(event) {\r\n                callback(event.data);\r\n            };\r\n\r\n            webWorker.postMessage(blob);\r\n        } else {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onload = function(event) {\r\n                callback(event.target.result);\r\n            };\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            try {\r\n                var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                    'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n                ], {\r\n                    type: 'application/javascript'\r\n                }));\r\n\r\n                var worker = new Worker(blob);\r\n                URL.revokeObjectURL(blob);\r\n                return worker;\r\n            } catch (e) {}\r\n        }\r\n    }\r\n\r\n    function handleRecordingDuration(counter) {\r\n        counter = counter || 0;\r\n\r\n        if (self.state === 'paused') {\r\n            setTimeout(function() {\r\n                handleRecordingDuration(counter);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'stopped') {\r\n            return;\r\n        }\r\n\r\n        if (counter >= self.recordingDuration) {\r\n            stopRecording(self.onRecordingStopped);\r\n            return;\r\n        }\r\n\r\n        counter += 1000; // 1-second\r\n\r\n        setTimeout(function() {\r\n            handleRecordingDuration(counter);\r\n        }, 1000);\r\n    }\r\n\r\n    function setState(state) {\r\n        if (!self) {\r\n            return;\r\n        }\r\n\r\n        self.state = state;\r\n\r\n        if (typeof self.onStateChanged.call === 'function') {\r\n            self.onStateChanged.call(self, state);\r\n        } else {\r\n            self.onStateChanged(state);\r\n        }\r\n    }\r\n\r\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\r\n\r\n    function warningLog() {\r\n        if (config.disableLogs === true) {\r\n            return;\r\n        }\r\n\r\n        console.warn(WARNING);\r\n    }\r\n\r\n    var mediaRecorder;\r\n\r\n    var returnObject = {\r\n        /**\r\n         * This method starts the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var recorder = RecordRTC(mediaStream, {\r\n         *     type: 'video'\r\n         * });\r\n         * recorder.startRecording();\r\n         */\r\n        startRecording: startRecording,\r\n\r\n        /**\r\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     // use either \"this\" or \"recorder\" object; both are identical\r\n         *     video.src = this.toURL();\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        stopRecording: stopRecording,\r\n\r\n        /**\r\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Firefox is unable to pause the recording. Fix it.\r\n         * @example\r\n         * recorder.pauseRecording();  // pause the recording\r\n         * recorder.resumeRecording(); // resume again\r\n         */\r\n        pauseRecording: pauseRecording,\r\n\r\n        /**\r\n         * This method resumes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.pauseRecording();  // first of all, pause the recording\r\n         * recorder.resumeRecording(); // now resume it\r\n         */\r\n        resumeRecording: resumeRecording,\r\n\r\n        /**\r\n         * This method initializes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * recorder.initRecorder();\r\n         */\r\n        initRecorder: initRecorder,\r\n\r\n        /**\r\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var fiveMinutes = 5 * 1000 * 60;\r\n         * recorder.setRecordingDuration(fiveMinutes, function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         * \r\n         * // or otherwise\r\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         */\r\n        setRecordingDuration: function(recordingDuration, callback) {\r\n            if (typeof recordingDuration === 'undefined') {\r\n                throw 'recordingDuration is required.';\r\n            }\r\n\r\n            if (typeof recordingDuration !== 'number') {\r\n                throw 'recordingDuration must be a number.';\r\n            }\r\n\r\n            self.recordingDuration = recordingDuration;\r\n            self.onRecordingStopped = callback || function() {};\r\n\r\n            return {\r\n                onRecordingStopped: function(callback) {\r\n                    self.onRecordingStopped = callback;\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * This method can be used to clear/reset all the recorded data.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n         * @example\r\n         * recorder.clearRecordedData();\r\n         */\r\n        clearRecordedData: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            mediaRecorder.clearRecordedData();\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('Cleared old recorded data.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.getBlob();\r\n         *\r\n         *     var file = new File([blob], 'filename.webm', {\r\n         *         type: 'video/webm'\r\n         *     });\r\n         *\r\n         *     var formData = new FormData();\r\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n         *     uploadToServer(formData);\r\n         * });\r\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n         */\r\n        getBlob: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return mediaRecorder.blob;\r\n        },\r\n\r\n        /**\r\n         * Get data-URI instead of Blob.\r\n         * @param {function} callback - Callback to get the Data-URI.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     recorder.getDataURL(function(dataURI) {\r\n         *         video.src = dataURI;\r\n         *     });\r\n         * });\r\n         */\r\n        getDataURL: getDataURL,\r\n\r\n        /**\r\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     video.src = this.toURL();\r\n         * });\r\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n         */\r\n        toURL: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return URL.createObjectURL(mediaRecorder.blob);\r\n        },\r\n\r\n        /**\r\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var internalRecorder = recorder.getInternalRecorder();\r\n         * if(internalRecorder instanceof MultiStreamRecorder) {\r\n         *     internalRecorder.addStreams([newAudioStream]);\r\n         *     internalRecorder.resetVideoStreams([screenStream]);\r\n         * }\r\n         * @returns {Object} Returns internal recording object.\r\n         */\r\n        getInternalRecorder: function() {\r\n            return mediaRecorder;\r\n        },\r\n\r\n        /**\r\n         * Invoke save-as dialog to save the recorded blob into your disk.\r\n         * @param {string} fileName - Set your own file name.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     this.save('file-name');\r\n         *\r\n         *     // or manually:\r\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n         * });\r\n         */\r\n        save: function(fileName) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\r\n        },\r\n\r\n        /**\r\n         * This method gets a blob from indexed-DB storage.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.getFromDisk(function(dataURL) {\r\n         *     video.src = dataURL;\r\n         * });\r\n         */\r\n        getFromDisk: function(callback) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            RecordRTC.getFromDisk(config.type, callback);\r\n        },\r\n\r\n        /**\r\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n         * @type {Array.<Array>}\r\n         * @param {Array} arrayOfWebPImages - Array of webp images.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * var arrayOfWebPImages = [];\r\n         * arrayOfWebPImages.push({\r\n         *     duration: index,\r\n         *     image: 'data:image/webp;base64,...'\r\n         * });\r\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n         */\r\n        setAdvertisementArray: function(arrayOfWebPImages) {\r\n            config.advertisement = [];\r\n\r\n            var length = arrayOfWebPImages.length;\r\n            for (var i = 0; i < length; i++) {\r\n                config.advertisement.push({\r\n                    duration: i,\r\n                    image: arrayOfWebPImages[i]\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.blob;\r\n         *\r\n         *     // below one is recommended\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        blob: null,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n         * });\r\n         */\r\n        bufferSize: 0,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n         * });\r\n         */\r\n        sampleRate: 0,\r\n\r\n        /**\r\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var arrayBuffer = this.buffer;\r\n         *     alert(arrayBuffer.byteLength);\r\n         * });\r\n         */\r\n        buffer: null,\r\n\r\n        /**\r\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.reset();\r\n         * recorder.startRecording();\r\n         */\r\n        reset: function() {\r\n            if (self.state === 'recording' && !config.disableLogs) {\r\n                console.warn('Stop an active recorder.');\r\n            }\r\n\r\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\r\n                mediaRecorder.clearRecordedData();\r\n            }\r\n            mediaRecorder = null;\r\n            setState('inactive');\r\n            self.blob = null;\r\n        },\r\n\r\n        /**\r\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.onStateChanged = function(state) {\r\n         *     console.log('Recorder state: ', state);\r\n         * };\r\n         */\r\n        onStateChanged: function(state) {\r\n            if (!config.disableLogs) {\r\n                console.log('Recorder state changed:', state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * A recorder can have inactive, recording, paused or stopped states.\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * // this looper function will keep you updated about the recorder's states.\r\n         * (function looper() {\r\n         *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\r\n         *     if(recorder.state === 'stopped') return; // ignore+stop\r\n         *     setTimeout(looper, 1000); // update after every 3-seconds\r\n         * })();\r\n         * recorder.startRecording();\r\n         */\r\n        state: 'inactive',\r\n\r\n        /**\r\n         * Get recorder's readonly state.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * var state = recorder.getState();\r\n         * @returns {String} Returns recording state.\r\n         */\r\n        getState: function() {\r\n            return self.state;\r\n        },\r\n\r\n        /**\r\n         * Destroy RecordRTC instance. Clear all recorders and objects.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * recorder.destroy();\r\n         */\r\n        destroy: function() {\r\n            var disableLogsCache = config.disableLogs;\r\n\r\n            config = {\r\n                disableLogs: true\r\n            };\r\n            self.reset();\r\n            setState('destroyed');\r\n            returnObject = self = null;\r\n\r\n            if (Storage.AudioContextConstructor) {\r\n                Storage.AudioContextConstructor.close();\r\n                Storage.AudioContextConstructor = null;\r\n            }\r\n\r\n            config.disableLogs = disableLogsCache;\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('RecordRTC is destroyed.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * RecordRTC version number\r\n         * @property {String} version - Release version number.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * alert(recorder.version);\r\n         */\r\n        version: '5.6.2'\r\n    };\r\n\r\n    if (!this) {\r\n        self = returnObject;\r\n        return returnObject;\r\n    }\r\n\r\n    // if someone wants to use RecordRTC with the \"new\" keyword.\r\n    for (var prop in returnObject) {\r\n        this[prop] = returnObject[prop];\r\n    }\r\n\r\n    self = this;\r\n\r\n    return returnObject;\r\n}\r\n\r\nRecordRTC.version = '5.6.2';\r\n\r\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n    module.exports = RecordRTC;\r\n}\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define('RecordRTC', [], function() {\r\n        return RecordRTC;\r\n    });\r\n}\n\r\nRecordRTC.getFromDisk = function(type, callback) {\r\n    if (!callback) {\r\n        throw 'callback is mandatory.';\r\n    }\r\n\r\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\r\n    DiskStorage.Fetch(function(dataURL, _type) {\r\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\r\n            callback(dataURL);\r\n        }\r\n\r\n        if (type === 'all' && callback) {\r\n            callback(dataURL, _type.replace('Blob', ''));\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nRecordRTC.writeToDisk = function(options) {\r\n    console.log('Writing recorded blob(s) to disk!');\r\n    options = options || {};\r\n    if (options.audio && options.video && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                options.gif.getDataURL(function(gifDataURL) {\r\n                    DiskStorage.Store({\r\n                        audioBlob: audioDataURL,\r\n                        videoBlob: videoDataURL,\r\n                        gifBlob: gifDataURL\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.video) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    videoBlob: videoDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.video && options.gif) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    videoBlob: videoDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            DiskStorage.Store({\r\n                audioBlob: audioDataURL\r\n            });\r\n        });\r\n    } else if (options.video) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            DiskStorage.Store({\r\n                videoBlob: videoDataURL\r\n            });\r\n        });\r\n    } else if (options.gif) {\r\n        options.gif.getDataURL(function(gifDataURL) {\r\n            DiskStorage.Store({\r\n                gifBlob: gifDataURL\r\n            });\r\n        });\r\n    }\r\n};\n\r\n// __________________________\r\n// RecordRTC-Configuration.js\r\n\r\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\r\n\r\nfunction RecordRTCConfiguration(mediaStream, config) {\r\n    if (!config.recorderType && !config.type) {\r\n        if (!!config.audio && !!config.video) {\r\n            config.type = 'video';\r\n        } else if (!!config.audio && !config.video) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    if (config.recorderType && !config.type) {\r\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || (typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder)) {\r\n            config.type = 'video';\r\n        } else if (config.recorderType === GifRecorder) {\r\n            config.type = 'gif';\r\n        } else if (config.recorderType === StereoAudioRecorder) {\r\n            config.type = 'audio';\r\n        } else if (config.recorderType === MediaStreamRecorder) {\r\n            if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\r\n                config.type = 'video';\r\n            } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\r\n                config.type = 'audio';\r\n            } else {\r\n                // config.type = 'UnKnown';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (!config.mimeType) {\r\n            config.mimeType = 'video/webm';\r\n        }\r\n\r\n        if (!config.type) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n\r\n        if (!config.bitsPerSecond) {\r\n            // config.bitsPerSecond = 128000;\r\n        }\r\n    }\r\n\r\n    // consider default type=audio\r\n    if (!config.type) {\r\n        if (config.mimeType) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n        if (!config.type) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    return config;\r\n}\n\r\n// __________________\r\n// GetRecorderType.js\r\n\r\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction GetRecorderType(mediaStream, config) {\r\n    var recorder;\r\n\r\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\r\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\r\n    if (isChrome || isEdge || isOpera) {\r\n        // Media Stream Recording API has not been implemented in chrome yet;\r\n        // That's why using WebAudio API to record stereo audio in WAV format\r\n        recorder = StereoAudioRecorder;\r\n    }\r\n\r\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    // video recorder (in WebM format)\r\n    if (config.type === 'video' && (isChrome || isOpera)) {\r\n        recorder = WhammyRecorder;\r\n\r\n        if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\r\n            recorder = WebAssemblyRecorder;\r\n        }\r\n    }\r\n\r\n    // video recorder (in Gif format)\r\n    if (config.type === 'gif') {\r\n        recorder = GifRecorder;\r\n    }\r\n\r\n    // html2canvas recording!\r\n    if (config.type === 'canvas') {\r\n        recorder = CanvasRecorder;\r\n    }\r\n\r\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\r\n            // audio-only recording\r\n            if (config.type === 'audio') {\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n                // else recorder = StereoAudioRecorder;\r\n            } else {\r\n                // video or screen tracks\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (mediaStream instanceof Array && mediaStream.length) {\r\n        recorder = MultiStreamRecorder;\r\n    }\r\n\r\n    if (config.recorderType) {\r\n        recorder = config.recorderType;\r\n    }\r\n\r\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\r\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\r\n    }\r\n\r\n    if (!recorder && isSafari) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    return recorder;\r\n}\n\r\n// _____________\r\n// MRecordRTC.js\r\n\r\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction MRecordRTC(mediaStream) {\r\n\r\n    /**\r\n     * This method attaches MediaStream object to {@link MRecordRTC}.\r\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.addStream(MediaStream);\r\n     */\r\n    this.addStream = function(_mediaStream) {\r\n        if (_mediaStream) {\r\n            mediaStream = _mediaStream;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * var recorder = new MRecordRTC();\r\n     * recorder.mediaType = {\r\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\r\n     *     gif  : true  // TRUE or GifRecorder\r\n     * };\r\n     */\r\n    this.mediaType = {\r\n        audio: true,\r\n        video: true\r\n    };\r\n\r\n    /**\r\n     * This method starts recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.startRecording();\r\n     */\r\n    this.startRecording = function() {\r\n        var mediaType = this.mediaType;\r\n        var recorderType;\r\n        var mimeType = this.mimeType || {\r\n            audio: null,\r\n            video: null,\r\n            gif: null\r\n        };\r\n\r\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\r\n            mediaType.audio = false;\r\n        }\r\n\r\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.video = false;\r\n        }\r\n\r\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\r\n            mediaType.gif = false;\r\n        }\r\n\r\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\r\n            throw 'MediaStream must have either audio or video tracks.';\r\n        }\r\n\r\n        if (!!mediaType.audio) {\r\n            recorderType = null;\r\n            if (typeof mediaType.audio === 'function') {\r\n                recorderType = mediaType.audio;\r\n            }\r\n\r\n            this.audioRecorder = new RecordRTC(mediaStream, {\r\n                type: 'audio',\r\n                bufferSize: this.bufferSize,\r\n                sampleRate: this.sampleRate,\r\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.audio,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.video) {\r\n                this.audioRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.video) {\r\n            recorderType = null;\r\n            if (typeof mediaType.video === 'function') {\r\n                recorderType = mediaType.video;\r\n            }\r\n\r\n            var newStream = mediaStream;\r\n\r\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\r\n                var videoTrack = getTracks(mediaStream, 'video')[0];\r\n\r\n                if (isFirefox) {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n\r\n                    if (recorderType && recorderType === WhammyRecorder) {\r\n                        // Firefox does NOT supports webp-encoding yet\r\n                        // But Firefox do supports WebAssemblyRecorder\r\n                        recorderType = MediaStreamRecorder;\r\n                    }\r\n                } else {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n                }\r\n            }\r\n\r\n            this.videoRecorder = new RecordRTC(newStream, {\r\n                type: 'video',\r\n                video: this.video,\r\n                canvas: this.canvas,\r\n                frameInterval: this.frameInterval || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.video,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp,\r\n                workerPath: this.workerPath,\r\n                webAssemblyPath: this.webAssemblyPath,\r\n                frameRate: this.frameRate, // used by WebAssemblyRecorder; values: usually 30; accepts any.\r\n                bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\r\n            });\r\n\r\n            if (!mediaType.audio) {\r\n                this.videoRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.audio && !!mediaType.video) {\r\n            var self = this;\r\n\r\n            var isSingleRecorder = isMediaRecorderCompatible() === true;\r\n\r\n            if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\r\n                isSingleRecorder = false;\r\n            } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\r\n                isSingleRecorder = false;\r\n            }\r\n\r\n            if (isSingleRecorder === true) {\r\n                self.audioRecorder = null;\r\n                self.videoRecorder.startRecording();\r\n            } else {\r\n                self.videoRecorder.initRecorder(function() {\r\n                    self.audioRecorder.initRecorder(function() {\r\n                        // Both recorders are ready to record things accurately\r\n                        self.videoRecorder.startRecording();\r\n                        self.audioRecorder.startRecording();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.gif) {\r\n            recorderType = null;\r\n            if (typeof mediaType.gif === 'function') {\r\n                recorderType = mediaType.gif;\r\n            }\r\n            this.gifRecorder = new RecordRTC(mediaStream, {\r\n                type: 'gif',\r\n                frameRate: this.frameRate || 200,\r\n                quality: this.quality || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.gif\r\n            });\r\n            this.gifRecorder.startRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording.\r\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.stopRecording(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     */\r\n    this.stopRecording = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'audio');\r\n            });\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'video');\r\n            });\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'gif');\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.pauseRecording();\r\n     */\r\n    this.pauseRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.pauseRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.resumeRecording();\r\n     */\r\n    this.resumeRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.resumeRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs.\r\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getBlob(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     * // or\r\n     * var audioBlob = recorder.getBlob().audio;\r\n     * var videoBlob = recorder.getBlob().video;\r\n     */\r\n    this.getBlob = function(callback) {\r\n        var output = {};\r\n\r\n        if (this.audioRecorder) {\r\n            output.audio = this.audioRecorder.getBlob();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            output.video = this.videoRecorder.getBlob();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            output.gif = this.gifRecorder.getBlob();\r\n        }\r\n\r\n        if (callback) {\r\n            callback(output);\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Destroy all recorder instances.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\r\n    this.destroy = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.destroy();\r\n            this.audioRecorder = null;\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.destroy();\r\n            this.videoRecorder = null;\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.destroy();\r\n            this.gifRecorder = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs' DataURLs.\r\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getDataURL(function(recording){\r\n     *     var audioDataURL = recording.audio;\r\n     *     var videoDataURL = recording.video;\r\n     *     var gifDataURL   = recording.gif;\r\n     * });\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        this.getBlob(function(blob) {\r\n            if (blob.audio && blob.video) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    getDataURL(blob.video, function(_videoDataURL) {\r\n                        callback({\r\n                            audio: _audioDataURL,\r\n                            video: _videoDataURL\r\n                        });\r\n                    });\r\n                });\r\n            } else if (blob.audio) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    callback({\r\n                        audio: _audioDataURL\r\n                    });\r\n                });\r\n            } else if (blob.video) {\r\n                getDataURL(blob.video, function(_videoDataURL) {\r\n                    callback({\r\n                        video: _videoDataURL\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        function getDataURL(blob, callback00) {\r\n            if (typeof Worker !== 'undefined') {\r\n                var webWorker = processInWebWorker(function readFile(_blob) {\r\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n                });\r\n\r\n                webWorker.onmessage = function(event) {\r\n                    callback00(event.data);\r\n                };\r\n\r\n                webWorker.postMessage(blob);\r\n            } else {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onload = function(event) {\r\n                    callback00(event.target.result);\r\n                };\r\n            }\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            var url;\r\n            if (typeof URL !== 'undefined') {\r\n                url = URL;\r\n            } else if (typeof webkitURL !== 'undefined') {\r\n                url = webkitURL;\r\n            } else {\r\n                throw 'Neither URL nor webkitURL detected.';\r\n            }\r\n            url.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.writeToDisk();\r\n     */\r\n    this.writeToDisk = function() {\r\n        RecordRTC.writeToDisk({\r\n            audio: this.audioRecorder,\r\n            video: this.videoRecorder,\r\n            gif: this.gifRecorder\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.save({\r\n     *     audio: 'audio-file-name',\r\n     *     video: 'video-file-name',\r\n     *     gif  : 'gif-file-name'\r\n     * });\r\n     */\r\n    this.save = function(args) {\r\n        args = args || {\r\n            audio: true,\r\n            video: true,\r\n            gif: true\r\n        };\r\n\r\n        if (!!args.audio && this.audioRecorder) {\r\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\r\n        }\r\n\r\n        if (!!args.video && this.videoRecorder) {\r\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\r\n        }\r\n        if (!!args.gif && this.gifRecorder) {\r\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\r\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MRecordRTC = MRecordRTC;\r\n}\n\r\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n(function(that) {\r\n    if (!that) {\r\n        return;\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n        return;\r\n    }\r\n\r\n    if (typeof global === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    global.navigator = {\r\n        userAgent: browserFakeUserAgent,\r\n        getUserMedia: function() {}\r\n    };\r\n\r\n    if (!global.console) {\r\n        global.console = {};\r\n    }\r\n\r\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n        global.console.error = global.console.log = global.console.log || function() {\r\n            console.log(arguments);\r\n        };\r\n    }\r\n\r\n    if (typeof document === 'undefined') {\r\n        /*global document:true */\r\n        that.document = {\r\n            documentElement: {\r\n                appendChild: function() {\r\n                    return '';\r\n                }\r\n            }\r\n        };\r\n\r\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n            var obj = {\r\n                getContext: function() {\r\n                    return obj;\r\n                },\r\n                play: function() {},\r\n                pause: function() {},\r\n                drawImage: function() {},\r\n                toDataURL: function() {\r\n                    return '';\r\n                },\r\n                style: {}\r\n            };\r\n            return obj;\r\n        };\r\n\r\n        that.HTMLVideoElement = function() {};\r\n    }\r\n\r\n    if (typeof location === 'undefined') {\r\n        /*global location:true */\r\n        that.location = {\r\n            protocol: 'file:',\r\n            href: '',\r\n            hash: ''\r\n        };\r\n    }\r\n\r\n    if (typeof screen === 'undefined') {\r\n        /*global screen:true */\r\n        that.screen = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n    }\r\n\r\n    if (typeof URL === 'undefined') {\r\n        /*global screen:true */\r\n        that.URL = {\r\n            createObjectURL: function() {\r\n                return '';\r\n            },\r\n            revokeObjectURL: function() {\r\n                return '';\r\n            }\r\n        };\r\n    }\r\n\r\n    /*global window:true */\r\n    that.window = global;\r\n})(typeof global !== 'undefined' ? global : null);\n\r\n// _____________________________\r\n// Cross-Browser-Declarations.js\r\n\r\n// animation-frame used in WebM recording\r\n\r\n/*jshint -W079 */\r\nvar requestAnimationFrame = window.requestAnimationFrame;\r\nif (typeof requestAnimationFrame === 'undefined') {\r\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = webkitRequestAnimationFrame;\r\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = mozRequestAnimationFrame;\r\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = msRequestAnimationFrame;\r\n    } else if (typeof requestAnimationFrame === 'undefined') {\r\n        // via: https://gist.github.com/paulirish/1579671\r\n        var lastTime = 0;\r\n\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime();\r\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n            var id = setTimeout(function() {\r\n                callback(currTime + timeToCall);\r\n            }, timeToCall);\r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar cancelAnimationFrame = window.cancelAnimationFrame;\r\nif (typeof cancelAnimationFrame === 'undefined') {\r\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = webkitCancelAnimationFrame;\r\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = mozCancelAnimationFrame;\r\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = msCancelAnimationFrame;\r\n    } else if (typeof cancelAnimationFrame === 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n    }\r\n}\r\n\r\n// WebAudio API representer\r\nvar AudioContext = window.AudioContext;\r\n\r\nif (typeof AudioContext === 'undefined') {\r\n    if (typeof webkitAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    if (typeof mozAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = mozAudioContext;\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar URL = window.URL;\r\n\r\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n    /*global URL:true */\r\n    URL = webkitURL;\r\n}\r\n\r\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n    }\r\n\r\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.mozGetUserMedia;\r\n    }\r\n}\r\n\r\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\r\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\r\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && ('netscape' in window) && / rv:/.test(navigator.userAgent);\r\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\r\n\r\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n\r\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\r\n    isSafari = false;\r\n    isChrome = true;\r\n}\r\n\r\nvar MediaStream = window.MediaStream;\r\n\r\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n    MediaStream = webkitMediaStream;\r\n}\r\n\r\n/*global MediaStream:true */\r\nif (typeof MediaStream !== 'undefined') {\r\n    // override \"stop\" method for all browsers\r\n    if (typeof MediaStream.prototype.stop === 'undefined') {\r\n        MediaStream.prototype.stop = function() {\r\n            this.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        };\r\n    }\r\n}\r\n\r\n// below function via: http://goo.gl/B3ae8c\r\n/**\r\n * Return human-readable file size.\r\n * @param {number} bytes - Pass bytes and get formatted string.\r\n * @returns {string} - formatted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction bytesToSize(bytes) {\r\n    var k = 1000;\r\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\r\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction invokeSaveAsDialog(file, fileName) {\r\n    if (!file) {\r\n        throw 'Blob object is required.';\r\n    }\r\n\r\n    if (!file.type) {\r\n        try {\r\n            file.type = 'video/webm';\r\n        } catch (e) {}\r\n    }\r\n\r\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\r\n    if (fileExtension.indexOf(';') !== -1) {\r\n        // extended mimetype, e.g. 'video/webm;codecs=vp8,opus'\r\n        fileExtension = fileExtension.split(';')[0];\r\n    }\r\n    if (fileName && fileName.indexOf('.') !== -1) {\r\n        var splitted = fileName.split('.');\r\n        fileName = splitted[0];\r\n        fileExtension = splitted[1];\r\n    }\r\n\r\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\r\n\r\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\r\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\r\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\r\n        return navigator.msSaveBlob(file, fileFullName);\r\n    }\r\n\r\n    var hyperlink = document.createElement('a');\r\n    hyperlink.href = URL.createObjectURL(file);\r\n    hyperlink.download = fileFullName;\r\n\r\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\r\n    (document.body || document.documentElement).appendChild(hyperlink);\r\n\r\n    if (typeof hyperlink.click === 'function') {\r\n        hyperlink.click();\r\n    } else {\r\n        hyperlink.target = '_blank';\r\n        hyperlink.dispatchEvent(new MouseEvent('click', {\r\n            view: window,\r\n            bubbles: true,\r\n            cancelable: true\r\n        }));\r\n    }\r\n\r\n    URL.revokeObjectURL(hyperlink.href);\r\n}\r\n\r\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\r\nfunction isElectron() {\r\n    // Renderer process\r\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\r\n        return true;\r\n    }\r\n\r\n    // Main process\r\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\r\n        return true;\r\n    }\r\n\r\n    // Detect the user agent when the `nodeIntegration` option is set to true\r\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction getTracks(stream, kind) {\r\n    if (!stream || !stream.getTracks) {\r\n        return [];\r\n    }\r\n\r\n    return stream.getTracks().filter(function(t) {\r\n        return t.kind === (kind || 'audio');\r\n    });\r\n}\r\n\r\nfunction setSrcObject(stream, element) {\r\n    if ('srcObject' in element) {\r\n        element.srcObject = stream;\r\n    } else if ('mozSrcObject' in element) {\r\n        element.mozSrcObject = stream;\r\n    } else {\r\n        element.srcObject = stream;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object.\r\n * @param {function} callback - Callback function.\r\n * @example\r\n * getSeekableBlob(blob or file, callback);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction getSeekableBlob(inputBlob, callback) {\r\n    // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\r\n    if (typeof EBML === 'undefined') {\r\n        throw new Error('Please link: https://www.webrtc-experiment.com/EBML.js');\r\n    }\r\n\r\n    var reader = new EBML.Reader();\r\n    var decoder = new EBML.Decoder();\r\n    var tools = EBML.tools;\r\n\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = function(e) {\r\n        var ebmlElms = decoder.decode(this.result);\r\n        ebmlElms.forEach(function(element) {\r\n            reader.read(element);\r\n        });\r\n        reader.stop();\r\n        var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\r\n        var body = this.result.slice(reader.metadataSize);\r\n        var newBlob = new Blob([refinedMetadataBuf, body], {\r\n            type: 'video/webm'\r\n        });\r\n\r\n        callback(newBlob);\r\n    };\r\n    fileReader.readAsArrayBuffer(inputBlob);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.invokeSaveAsDialog = invokeSaveAsDialog;\r\n    RecordRTC.getTracks = getTracks;\r\n    RecordRTC.getSeekableBlob = getSeekableBlob;\r\n    RecordRTC.bytesToSize = bytesToSize;\r\n    RecordRTC.isElectron = isElectron;\r\n}\r\n\r\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\r\n// Storage.js\r\n\r\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Storage = {};\r\n\r\nif (typeof AudioContext !== 'undefined') {\r\n    Storage.AudioContext = AudioContext;\r\n} else if (typeof webkitAudioContext !== 'undefined') {\r\n    Storage.AudioContext = webkitAudioContext;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Storage = Storage;\r\n}\n\r\nfunction isMediaRecorderCompatible() {\r\n    if (isFirefox || isSafari || isEdge) {\r\n        return true;\r\n    }\r\n\r\n    var nVer = navigator.appVersion;\r\n    var nAgt = navigator.userAgent;\r\n    var fullVersion = '' + parseFloat(navigator.appVersion);\r\n    var majorVersion = parseInt(navigator.appVersion, 10);\r\n    var nameOffset, verOffset, ix;\r\n\r\n    if (isChrome || isOpera) {\r\n        verOffset = nAgt.indexOf('Chrome');\r\n        fullVersion = nAgt.substring(verOffset + 7);\r\n    }\r\n\r\n    // trim the fullVersion string at semicolon/space if present\r\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    majorVersion = parseInt('' + fullVersion, 10);\r\n\r\n    if (isNaN(majorVersion)) {\r\n        fullVersion = '' + parseFloat(navigator.appVersion);\r\n        majorVersion = parseInt(navigator.appVersion, 10);\r\n    }\r\n\r\n    return majorVersion >= 49;\r\n}\n\r\n// ______________________\r\n// MediaStreamRecorder.js\r\n\r\n/**\r\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\r\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\r\n * @typedef MediaStreamRecorder\r\n * @class\r\n * @example\r\n * var config = {\r\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\r\n *     audioBitsPerSecond : 256 * 8 * 1024,\r\n *     videoBitsPerSecond : 256 * 8 * 1024,\r\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\r\n *     checkForInactiveTracks: true,\r\n *     timeSlice: 1000, // concatenate intervals based blobs\r\n *     ondataavailable: function() {} // get intervals based blobs\r\n * }\r\n * var recorder = new MediaStreamRecorder(mediaStream, config);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\r\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\r\n */\r\n\r\nfunction MediaStreamRecorder(mediaStream, config) {\r\n    var self = this;\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    if (typeof MediaRecorder === 'undefined') {\r\n        throw 'Your browser does not support the Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\r\n    }\r\n\r\n    config = config || {\r\n        // bitsPerSecond: 256 * 8 * 1024,\r\n        mimeType: 'video/webm'\r\n    };\r\n\r\n    if (config.type === 'audio') {\r\n        if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\r\n            var stream;\r\n            if (!!navigator.mozGetUserMedia) {\r\n                stream = new MediaStream();\r\n                stream.addTrack(getTracks(mediaStream, 'audio')[0]);\r\n            } else {\r\n                // webkitMediaStream\r\n                stream = new MediaStream(getTracks(mediaStream, 'audio'));\r\n            }\r\n            mediaStream = stream;\r\n        }\r\n\r\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\r\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\r\n        }\r\n\r\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\r\n            // forcing better codecs on Firefox (via #166)\r\n            config.mimeType = 'audio/ogg';\r\n        }\r\n    }\r\n\r\n    var arrayOfBlobs = [];\r\n\r\n    /**\r\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\r\n     * @returns {Array} Returns array of recorded blobs.\r\n     */\r\n    this.getArrayOfBlobs = function() {\r\n        return arrayOfBlobs;\r\n    };\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // set defaults\r\n        self.blob = null;\r\n        self.clearRecordedData();\r\n        self.timestamps = [];\r\n        allStates = [];\r\n        arrayOfBlobs = [];\r\n\r\n        var recorderHints = config;\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (isChrome && !isMediaRecorderCompatible()) {\r\n            // to support video-only recording on stable\r\n            recorderHints = 'video/vp8';\r\n        }\r\n\r\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\r\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\r\n                if (!config.disableLogs) {\r\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n                }\r\n\r\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\r\n            }\r\n        }\r\n\r\n        // using MediaRecorder API here\r\n        try {\r\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\r\n\r\n            // reset\r\n            config.mimeType = recorderHints.mimeType;\r\n        } catch (e) {\r\n            // chrome-based fallback\r\n            mediaRecorder = new MediaRecorder(mediaStream);\r\n        }\r\n\r\n        // old hack?\r\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\r\n            if (!config.disableLogs) {\r\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\r\n            }\r\n        }\r\n\r\n        // Dispatching OnDataAvailable Handler\r\n        mediaRecorder.ondataavailable = function(e) {\r\n            if (e.data) {\r\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\r\n            }\r\n\r\n            if (typeof config.timeSlice === 'number') {\r\n                if (e.data && e.data.size) {\r\n                    arrayOfBlobs.push(e.data);\r\n                    updateTimeStamp();\r\n\r\n                    if (typeof config.ondataavailable === 'function') {\r\n                        // intervals based blobs\r\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                            type: getMimeType(recorderHints)\r\n                        });\r\n                        config.ondataavailable(blob);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\r\n                // make sure that stopRecording always getting fired\r\n                // even if there is invalid data\r\n                if (self.recordingCallback) {\r\n                    self.recordingCallback(new Blob([], {\r\n                        type: getMimeType(recorderHints)\r\n                    }));\r\n                    self.recordingCallback = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\r\n                type: getMimeType(recorderHints)\r\n            });\r\n\r\n            if (self.recordingCallback) {\r\n                self.recordingCallback(self.blob);\r\n                self.recordingCallback = null;\r\n            }\r\n        };\r\n\r\n        mediaRecorder.onstart = function() {\r\n            allStates.push('started');\r\n        };\r\n\r\n        mediaRecorder.onpause = function() {\r\n            allStates.push('paused');\r\n        };\r\n\r\n        mediaRecorder.onresume = function() {\r\n            allStates.push('resumed');\r\n        };\r\n\r\n        mediaRecorder.onstop = function() {\r\n            allStates.push('stopped');\r\n        };\r\n\r\n        mediaRecorder.onerror = function(error) {\r\n            if (!error) {\r\n                return;\r\n            }\r\n\r\n            if (!error.name) {\r\n                error.name = 'UnknownError';\r\n            }\r\n\r\n            allStates.push('error: ' + error);\r\n\r\n            if (!config.disableLogs) {\r\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\r\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\r\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\r\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\r\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\r\n                    console.error('MediaRecorder security error', error);\r\n                }\r\n\r\n                // older code below\r\n                else if (error.name === 'OutOfMemory') {\r\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'IllegalStreamModification') {\r\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'OtherRecordingError') {\r\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\r\n                } else if (error.name === 'GenericError') {\r\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\r\n                } else {\r\n                    console.error('MediaRecorder Error', error);\r\n                }\r\n            }\r\n\r\n            (function(looper) {\r\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\r\n                    delete config.timeslice;\r\n\r\n                    // 10 minutes, enough?\r\n                    mediaRecorder.start(10 * 60 * 1000);\r\n                    return;\r\n                }\r\n\r\n                setTimeout(looper, 1000);\r\n            })();\r\n\r\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\r\n                mediaRecorder.stop();\r\n            }\r\n        };\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            updateTimeStamp();\r\n            mediaRecorder.start(config.timeSlice);\r\n        } else {\r\n            // default is 60 minutes; enough?\r\n            // use config => {timeSlice: 1000} otherwise\r\n\r\n            mediaRecorder.start(3.6e+6);\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback(); // old code\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @property {Array} timestamps - Array of time stamps\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * console.log(recorder.timestamps);\r\n     */\r\n    this.timestamps = [];\r\n\r\n    function updateTimeStamp() {\r\n        self.timestamps.push(new Date().getTime());\r\n\r\n        if (typeof config.onTimeStamp === 'function') {\r\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\r\n        }\r\n    }\r\n\r\n    function getMimeType(secondObject) {\r\n        if (mediaRecorder && mediaRecorder.mimeType) {\r\n            return mediaRecorder.mimeType;\r\n        }\r\n\r\n        return secondObject.mimeType || 'video/webm';\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\r\n\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        this.recordingCallback = callback;\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.stop();\r\n        }\r\n\r\n        if (typeof config.timeSlice === 'number') {\r\n            setTimeout(function() {\r\n                self.blob = new Blob(arrayOfBlobs, {\r\n                    type: getMimeType(config)\r\n                });\r\n\r\n                self.recordingCallback(self.blob);\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'recording') {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        if (mediaRecorder.state === 'paused') {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\r\n            self.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        arrayOfBlobs = [];\r\n        mediaRecorder = null;\r\n        self.timestamps = [];\r\n    }\r\n\r\n    // Reference to \"MediaRecorder\" object\r\n    var mediaRecorder;\r\n\r\n    /**\r\n     * Access to native MediaRecorder API\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @instance\r\n     * @example\r\n     * var internal = recorder.getInternalRecorder();\r\n     * internal.ondataavailable = function() {}; // override\r\n     * internal.stream, internal.onpause, internal.onstop, etc.\r\n     * @returns {Object} Returns internal recording object.\r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return mediaRecorder;\r\n    };\r\n\r\n    function isMediaStreamActive() {\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * recorder.stop(function() {\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n\r\n\r\n    /**\r\n     * Get MediaRecorder readonly state.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getState();\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        if (!mediaRecorder) {\r\n            return 'inactive';\r\n        }\r\n\r\n        return mediaRecorder.state || 'inactive';\r\n    };\r\n\r\n    // list of all recording states\r\n    var allStates = [];\r\n\r\n    /**\r\n     * Get MediaRecorder all recording states.\r\n     * @method\r\n     * @memberof MediaStreamRecorder\r\n     * @example\r\n     * var state = recorder.getAllStates();\r\n     * @returns {Array} Returns all recording states\r\n     */\r\n    this.getAllStates = function() {\r\n        return allStates;\r\n    };\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\r\n    }\r\n\r\n    var self = this;\r\n\r\n    // this method checks if media stream is stopped\r\n    // or if any track is ended.\r\n    (function looper() {\r\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            self.stop();\r\n            return;\r\n        }\r\n\r\n        setTimeout(looper, 1000); // check every second\r\n    })();\r\n\r\n    // for debugging\r\n    this.name = 'MediaStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\r\n}\r\n\r\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\r\n// https://github.com/mattdiamond/Recorderjs#license-mit\r\n// ______________________\r\n// StereoAudioRecorder.js\r\n\r\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\r\n\r\nfunction StereoAudioRecorder(mediaStream, config) {\r\n    if (!getTracks(mediaStream, 'audio').length) {\r\n        throw 'Your stream has no audio tracks.';\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var self = this;\r\n\r\n    // variables\r\n    var leftchannel = [];\r\n    var rightchannel = [];\r\n    var recording = false;\r\n    var recordingLength = 0;\r\n    var jsAudioNode;\r\n\r\n    var numberOfAudioChannels = 2;\r\n\r\n    /**\r\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n     * @memberof StereoAudioRecorder\r\n     * @instance\r\n     * @example\r\n     * var recorder = StereoAudioRecorder(mediaStream, {\r\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n     * });\r\n     */\r\n    var desiredSampRate = config.desiredSampRate;\r\n\r\n    // backward compatibility\r\n    if (config.leftChannel === true) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (config.numberOfAudioChannels === 1) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\r\n        numberOfAudioChannels = 2;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\r\n    }\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = true;\r\n    }\r\n\r\n    function isMediaStreamActive() {\r\n        if (config.checkForInactiveTracks === false) {\r\n            // always return \"true\"\r\n            return true;\r\n        }\r\n\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        resetVariables();\r\n\r\n        isAudioProcessStarted = isPaused = false;\r\n        recording = true;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            looper();\r\n        }\r\n    };\r\n\r\n    function mergeLeftRightBuffers(config, callback) {\r\n        function mergeAudioBuffers(config, cb) {\r\n            var numberOfAudioChannels = config.numberOfAudioChannels;\r\n\r\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\r\n            var leftBuffers = config.leftBuffers.slice(0);\r\n            var rightBuffers = config.rightBuffers.slice(0);\r\n            var sampleRate = config.sampleRate;\r\n            var internalInterleavedLength = config.internalInterleavedLength;\r\n            var desiredSampRate = config.desiredSampRate;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            // set sample rate as desired sample rate\r\n            if (desiredSampRate) {\r\n                sampleRate = desiredSampRate;\r\n            }\r\n\r\n            // for changing the sampling rate, reference:\r\n            // http://stackoverflow.com/a/28977136/552182\r\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\r\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\r\n                var newData = [];\r\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\r\n                newData[0] = data[0];\r\n                for (var i = 1; i < fitCount - 1; i++) {\r\n                    var tmp = i * springFactor;\r\n                    var before = Number(Math.floor(tmp)).toFixed();\r\n                    var after = Number(Math.ceil(tmp)).toFixed();\r\n                    var atPoint = tmp - before;\r\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\r\n                }\r\n                newData[fitCount - 1] = data[data.length - 1];\r\n                return newData;\r\n            }\r\n\r\n            function linearInterpolate(before, after, atPoint) {\r\n                return before + (after - before) * atPoint;\r\n            }\r\n\r\n            function mergeBuffers(channelBuffer, rLength) {\r\n                var result = new Float64Array(rLength);\r\n                var offset = 0;\r\n                var lng = channelBuffer.length;\r\n\r\n                for (var i = 0; i < lng; i++) {\r\n                    var buffer = channelBuffer[i];\r\n                    result.set(buffer, offset);\r\n                    offset += buffer.length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            function interleave(leftChannel, rightChannel) {\r\n                var length = leftChannel.length + rightChannel.length;\r\n\r\n                var result = new Float64Array(length);\r\n\r\n                var inputIndex = 0;\r\n\r\n                for (var index = 0; index < length;) {\r\n                    result[index++] = leftChannel[inputIndex];\r\n                    result[index++] = rightChannel[inputIndex];\r\n                    inputIndex++;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function writeUTFBytes(view, offset, string) {\r\n                var lng = string.length;\r\n                for (var i = 0; i < lng; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            }\r\n\r\n            // interleave both channels together\r\n            var interleaved;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                interleaved = interleave(leftBuffers, rightBuffers);\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                interleaved = leftBuffers;\r\n            }\r\n\r\n            var interleavedLength = interleaved.length;\r\n\r\n            // create wav file\r\n            var resultingBufferLength = 44 + interleavedLength * 2;\r\n\r\n            var buffer = new ArrayBuffer(resultingBufferLength);\r\n\r\n            var view = new DataView(buffer);\r\n\r\n            // RIFF chunk descriptor/identifier \r\n            writeUTFBytes(view, 0, 'RIFF');\r\n\r\n            // RIFF chunk length\r\n            // changed \"44\" to \"36\" via #401\r\n            view.setUint32(4, 36 + interleavedLength * 2, true);\r\n\r\n            // RIFF type \r\n            writeUTFBytes(view, 8, 'WAVE');\r\n\r\n            // format chunk identifier \r\n            // FMT sub-chunk\r\n            writeUTFBytes(view, 12, 'fmt ');\r\n\r\n            // format chunk length \r\n            view.setUint32(16, 16, true);\r\n\r\n            // sample format (raw)\r\n            view.setUint16(20, 1, true);\r\n\r\n            // stereo (2 channels)\r\n            view.setUint16(22, numberOfAudioChannels, true);\r\n\r\n            // sample rate \r\n            view.setUint32(24, sampleRate, true);\r\n\r\n            // byte rate (sample rate * block align)\r\n            view.setUint32(28, sampleRate * numberOfAudioChannels * 2, true);\r\n\r\n            // block align (channel count * bytes per sample) \r\n            view.setUint16(32, numberOfAudioChannels * 2, true);\r\n\r\n            // bits per sample \r\n            view.setUint16(34, 16, true);\r\n\r\n            // data sub-chunk\r\n            // data chunk identifier \r\n            writeUTFBytes(view, 36, 'data');\r\n\r\n            // data chunk length \r\n            view.setUint32(40, interleavedLength * 2, true);\r\n\r\n            // write the PCM samples\r\n            var lng = interleavedLength;\r\n            var index = 44;\r\n            var volume = 1;\r\n            for (var i = 0; i < lng; i++) {\r\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\r\n                index += 2;\r\n            }\r\n\r\n            if (cb) {\r\n                return cb({\r\n                    buffer: buffer,\r\n                    view: view\r\n                });\r\n            }\r\n\r\n            postMessage({\r\n                buffer: buffer,\r\n                view: view\r\n            });\r\n        }\r\n\r\n        if (config.noWorker) {\r\n            mergeAudioBuffers(config, function(data) {\r\n                callback(data.buffer, data.view);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        var webWorker = processInWebWorker(mergeAudioBuffers);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            callback(event.data.buffer, event.data.view);\r\n\r\n            // release memory\r\n            URL.revokeObjectURL(webWorker.workerURL);\r\n\r\n            // kill webworker (or Chrome will kill your page after ~25 calls)\r\n            webWorker.terminate();\r\n        };\r\n\r\n        webWorker.postMessage(config);\r\n    }\r\n\r\n    function processInWebWorker(_function) {\r\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\r\n            ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(workerURL);\r\n        worker.workerURL = workerURL;\r\n        return worker;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        // stop recording\r\n        recording = false;\r\n\r\n        mergeLeftRightBuffers({\r\n            desiredSampRate: desiredSampRate,\r\n            sampleRate: sampleRate,\r\n            numberOfAudioChannels: numberOfAudioChannels,\r\n            internalInterleavedLength: recordingLength,\r\n            leftBuffers: leftchannel,\r\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\r\n            noWorker: config.noWorker\r\n        }, function(buffer, view) {\r\n            /**\r\n             * @property {Blob} blob - The recorded blob object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            self.blob = new Blob([view], {\r\n                type: 'audio/wav'\r\n            });\r\n\r\n            /**\r\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var buffer = recorder.buffer;\r\n             * });\r\n             */\r\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\r\n\r\n            /**\r\n             * @property {DataView} view - The recorded data-view object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var view = recorder.view;\r\n             * });\r\n             */\r\n            self.view = view;\r\n\r\n            self.sampleRate = desiredSampRate || sampleRate;\r\n            self.bufferSize = bufferSize;\r\n\r\n            // recorded audio length\r\n            self.length = recordingLength;\r\n\r\n            isAudioProcessStarted = false;\r\n\r\n            if (callback) {\r\n                callback(self.blob);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (typeof RecordRTC.Storage === 'undefined') {\r\n        RecordRTC.Storage = {\r\n            AudioContextConstructor: null,\r\n            AudioContext: window.AudioContext || window.webkitAudioContext\r\n        };\r\n    }\r\n\r\n    if (!RecordRTC.Storage.AudioContextConstructor || RecordRTC.Storage.AudioContextConstructor.state === 'closed') {\r\n        RecordRTC.Storage.AudioContextConstructor = new RecordRTC.Storage.AudioContext();\r\n    }\r\n\r\n    var context = RecordRTC.Storage.AudioContextConstructor;\r\n\r\n    // creates an audio node from the microphone incoming stream\r\n    var audioInput = context.createMediaStreamSource(mediaStream);\r\n\r\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n\r\n    /**\r\n     * From the spec: This value controls how frequently the audioprocess event is\r\n     * dispatched and how many sample-frames need to be processed each call.\r\n     * Lower values for buffer size will result in a lower (better) latency.\r\n     * Higher values will be necessary to avoid audio breakup and glitches\r\n     * The size of the buffer (in sample-frames) which needs to\r\n     * be processed each time onprocessaudio is called.\r\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     bufferSize: 4096\r\n     * });\r\n     */\r\n\r\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\r\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\r\n\r\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\r\n        if (!config.disableLogs) {\r\n            console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\r\n        }\r\n    }\r\n\r\n    if (context.createJavaScriptNode) {\r\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else if (context.createScriptProcessor) {\r\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else {\r\n        throw 'WebAudio API has no support on this browser.';\r\n    }\r\n\r\n    // connect the stream to the script processor\r\n    audioInput.connect(jsAudioNode);\r\n\r\n    if (!config.bufferSize) {\r\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\r\n    }\r\n\r\n    /**\r\n     * The sample rate (in sample-frames per second) at which the\r\n     * AudioContext handles audio. It is assumed that all AudioNodes\r\n     * in the context run at this rate. In making this assumption,\r\n     * sample-rate converters or \"varispeed\" processors are not supported\r\n     * in real-time processing.\r\n     * The sampleRate parameter describes the sample-rate of the\r\n     * linear PCM audio data in the buffer in sample-frames per second.\r\n     * An implementation must support sample-rates in at least\r\n     * the range 22050 to 96000.\r\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     sampleRate: 44100\r\n     * });\r\n     */\r\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\r\n\r\n    if (sampleRate < 22050 || sampleRate > 96000) {\r\n        // Ref: http://stackoverflow.com/a/26303918/552182\r\n        if (!config.disableLogs) {\r\n            console.log('sample-rate must be under range 22050 and 96000.');\r\n        }\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        if (config.desiredSampRate) {\r\n            console.log('Desired sample-rate: ' + config.desiredSampRate);\r\n        }\r\n    }\r\n\r\n    var isPaused = false;\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        if (!recording) {\r\n            if (!config.disableLogs) {\r\n                console.log('Seems recording has been restarted.');\r\n            }\r\n            this.record();\r\n            return;\r\n        }\r\n\r\n        isPaused = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        config.checkForInactiveTracks = false;\r\n\r\n        if (recording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function resetVariables() {\r\n        leftchannel = [];\r\n        rightchannel = [];\r\n        recordingLength = 0;\r\n        isAudioProcessStarted = false;\r\n        recording = false;\r\n        isPaused = false;\r\n        context = null;\r\n\r\n        self.leftchannel = leftchannel;\r\n        self.rightchannel = rightchannel;\r\n        self.numberOfAudioChannels = numberOfAudioChannels;\r\n        self.desiredSampRate = desiredSampRate;\r\n        self.sampleRate = sampleRate;\r\n        self.recordingLength = recordingLength;\r\n\r\n        intervalsBasedBuffers = {\r\n            left: [],\r\n            right: [],\r\n            recordingLength: 0\r\n        };\r\n    }\r\n\r\n    function clearRecordedDataCB() {\r\n        if (jsAudioNode) {\r\n            jsAudioNode.onaudioprocess = null;\r\n            jsAudioNode.disconnect();\r\n            jsAudioNode = null;\r\n        }\r\n\r\n        if (audioInput) {\r\n            audioInput.disconnect();\r\n            audioInput = null;\r\n        }\r\n\r\n        resetVariables();\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'StereoAudioRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var isAudioProcessStarted = false;\r\n\r\n    function onAudioProcessDataAvailable(e) {\r\n        if (isPaused) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            jsAudioNode.disconnect();\r\n            recording = false;\r\n        }\r\n\r\n        if (!recording) {\r\n            if (audioInput) {\r\n                audioInput.disconnect();\r\n                audioInput = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * This method is called on \"onaudioprocess\" event's first invocation.\r\n         * @method {function} onAudioProcessStarted\r\n         * @memberof StereoAudioRecorder\r\n         * @example\r\n         * recorder.onAudioProcessStarted: function() { };\r\n         */\r\n        if (!isAudioProcessStarted) {\r\n            isAudioProcessStarted = true;\r\n            if (config.onAudioProcessStarted) {\r\n                config.onAudioProcessStarted();\r\n            }\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        }\r\n\r\n        var left = e.inputBuffer.getChannelData(0);\r\n\r\n        // we clone the samples\r\n        var chLeft = new Float32Array(left);\r\n        leftchannel.push(chLeft);\r\n\r\n        if (numberOfAudioChannels === 2) {\r\n            var right = e.inputBuffer.getChannelData(1);\r\n            var chRight = new Float32Array(right);\r\n            rightchannel.push(chRight);\r\n        }\r\n\r\n        recordingLength += bufferSize;\r\n\r\n        // export raw PCM\r\n        self.recordingLength = recordingLength;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            intervalsBasedBuffers.recordingLength += bufferSize;\r\n            intervalsBasedBuffers.left.push(chLeft);\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                intervalsBasedBuffers.right.push(chRight);\r\n            }\r\n        }\r\n    }\r\n\r\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\r\n\r\n    // to prevent self audio to be connected with speakers\r\n    if (context.createMediaStreamDestination) {\r\n        jsAudioNode.connect(context.createMediaStreamDestination());\r\n    } else {\r\n        jsAudioNode.connect(context.destination);\r\n    }\r\n\r\n    // export raw PCM\r\n    this.leftchannel = leftchannel;\r\n    this.rightchannel = rightchannel;\r\n    this.numberOfAudioChannels = numberOfAudioChannels;\r\n    this.desiredSampRate = desiredSampRate;\r\n    this.sampleRate = sampleRate;\r\n    self.recordingLength = recordingLength;\r\n\r\n    // helper for intervals based blobs\r\n    var intervalsBasedBuffers = {\r\n        left: [],\r\n        right: [],\r\n        recordingLength: 0\r\n    };\r\n\r\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\r\n    function looper() {\r\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (intervalsBasedBuffers.left.length) {\r\n            mergeLeftRightBuffers({\r\n                desiredSampRate: desiredSampRate,\r\n                sampleRate: sampleRate,\r\n                numberOfAudioChannels: numberOfAudioChannels,\r\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\r\n                leftBuffers: intervalsBasedBuffers.left,\r\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\r\n            }, function(buffer, view) {\r\n                var blob = new Blob([view], {\r\n                    type: 'audio/wav'\r\n                });\r\n                config.ondataavailable(blob);\r\n\r\n                setTimeout(looper, config.timeSlice);\r\n            });\r\n\r\n            intervalsBasedBuffers = {\r\n                left: [],\r\n                right: [],\r\n                recordingLength: 0\r\n            };\r\n        } else {\r\n            setTimeout(looper, config.timeSlice);\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\r\n}\r\n\r\n// _________________\r\n// CanvasRecorder.js\r\n\r\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\r\n\r\nfunction CanvasRecorder(htmlElement, config) {\r\n    if (typeof html2canvas === 'undefined') {\r\n        throw 'Please link: https://www.webrtc-experiment.com/screenshot.js';\r\n    }\r\n\r\n    config = config || {};\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    // via DetectRTC.js\r\n    var isCanvasSupportsStreamCapturing = false;\r\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\r\n        if (item in document.createElement('canvas')) {\r\n            isCanvasSupportsStreamCapturing = true;\r\n        }\r\n    });\r\n\r\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\r\n\r\n    var chromeVersion = 50;\r\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\r\n    if (_isChrome && matchArray && matchArray[2]) {\r\n        chromeVersion = parseInt(matchArray[2], 10);\r\n    }\r\n\r\n    if (_isChrome && chromeVersion < 52) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    if (config.useWhammyRecorder) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    var globalCanvas, mediaStreamRecorder;\r\n\r\n    if (isCanvasSupportsStreamCapturing) {\r\n        if (!config.disableLogs) {\r\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\r\n        }\r\n\r\n        if (htmlElement instanceof HTMLCanvasElement) {\r\n            globalCanvas = htmlElement;\r\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\r\n            globalCanvas = htmlElement.canvas;\r\n        } else {\r\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\r\n        }\r\n    } else if (!!navigator.mozGetUserMedia) {\r\n        if (!config.disableLogs) {\r\n            console.error('Canvas recording is NOT supported in Firefox.');\r\n        }\r\n    }\r\n\r\n    var isRecording;\r\n\r\n    /**\r\n     * This method records Canvas.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        isRecording = true;\r\n\r\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\r\n            // CanvasCaptureMediaStream\r\n            var canvasMediaStream;\r\n            if ('captureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\r\n            } else if ('mozCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\r\n            } else if ('webkitCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\r\n            }\r\n\r\n            try {\r\n                var mdStream = new MediaStream();\r\n                mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\r\n                canvasMediaStream = mdStream;\r\n            } catch (e) {}\r\n\r\n            if (!canvasMediaStream) {\r\n                throw 'captureStream API are NOT available.';\r\n            }\r\n\r\n            // Note: Jan 18, 2016 status is that, \r\n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\r\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\r\n                mimeType: config.mimeType || 'video/webm'\r\n            });\r\n            mediaStreamRecorder.record();\r\n        } else {\r\n            whammy.frames = [];\r\n            lastTime = new Date().getTime();\r\n            drawCanvasFrame();\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    this.getWebPImages = function(callback) {\r\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        var framesLength = whammy.frames.length;\r\n        whammy.frames.forEach(function(frame, idx) {\r\n            var framesRemaining = framesLength - idx;\r\n            if (!config.disableLogs) {\r\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\r\n            }\r\n\r\n            if (config.onEncodingCallback) {\r\n                config.onEncodingCallback(framesRemaining, framesLength);\r\n            }\r\n\r\n            var webp = frame.image.toDataURL('image/webp', 1);\r\n            whammy.frames[idx].image = webp;\r\n        });\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Generating WebM');\r\n        }\r\n\r\n        callback();\r\n    };\r\n\r\n    /**\r\n     * This method stops recording Canvas.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        isRecording = false;\r\n\r\n        var that = this;\r\n\r\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\r\n            mediaStreamRecorder.stop(callback);\r\n            return;\r\n        }\r\n\r\n        this.getWebPImages(function() {\r\n            /**\r\n             * @property {Blob} blob - Recorded frames in video/webm blob.\r\n             * @memberof CanvasRecorder\r\n             * @example\r\n             * recorder.stop(function() {\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            whammy.compile(function(blob) {\r\n                if (!config.disableLogs) {\r\n                    console.log('Recording finished!');\r\n                }\r\n\r\n                that.blob = blob;\r\n\r\n                if (that.blob.forEach) {\r\n                    that.blob = new Blob([], {\r\n                        type: 'video/webm'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(that.blob);\r\n                }\r\n\r\n                whammy.frames = [];\r\n            });\r\n        });\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.pause();\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.resume();\r\n            return;\r\n        }\r\n\r\n        if (!isRecording) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (isRecording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isRecording = false;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'CanvasRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    function cloneCanvas() {\r\n        //create a new canvas\r\n        var newCanvas = document.createElement('canvas');\r\n        var context = newCanvas.getContext('2d');\r\n\r\n        //set dimensions\r\n        newCanvas.width = htmlElement.width;\r\n        newCanvas.height = htmlElement.height;\r\n\r\n        //apply the old canvas to the new one\r\n        context.drawImage(htmlElement, 0, 0);\r\n\r\n        //return the new canvas\r\n        return newCanvas;\r\n    }\r\n\r\n    function drawCanvasFrame() {\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawCanvasFrame, 500);\r\n        }\r\n\r\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\r\n            var duration = new Date().getTime() - lastTime;\r\n            // via #206, by Jack i.e. @Seymourr\r\n            lastTime = new Date().getTime();\r\n\r\n            whammy.frames.push({\r\n                image: cloneCanvas(),\r\n                duration: duration\r\n            });\r\n\r\n            if (isRecording) {\r\n                setTimeout(drawCanvasFrame, config.frameInterval);\r\n            }\r\n            return;\r\n        }\r\n\r\n        html2canvas(htmlElement, {\r\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\r\n            onrendered: function(canvas) {\r\n                var duration = new Date().getTime() - lastTime;\r\n                if (!duration) {\r\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n\r\n                // via #206, by Jack i.e. @Seymourr\r\n                lastTime = new Date().getTime();\r\n\r\n                whammy.frames.push({\r\n                    image: canvas.toDataURL('image/webp', 1),\r\n                    duration: duration\r\n                });\r\n\r\n                if (isRecording) {\r\n                    setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    var lastTime = new Date().getTime();\r\n\r\n    var whammy = new Whammy.Video(100);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.CanvasRecorder = CanvasRecorder;\r\n}\n\r\n// _________________\r\n// WhammyRecorder.js\r\n\r\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction WhammyRecorder(mediaStream, config) {\r\n\r\n    config = config || {};\r\n\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('Using frames-interval:', config.frameInterval);\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (!config.width) {\r\n            config.width = 320;\r\n        }\r\n\r\n        if (!config.height) {\r\n            config.height = 240;\r\n        }\r\n\r\n        if (!config.video) {\r\n            config.video = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        if (!config.canvas) {\r\n            config.canvas = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        canvas.width = config.canvas.width || 320;\r\n        canvas.height = config.canvas.height || 240;\r\n\r\n        context = canvas.getContext('2d');\r\n\r\n        // setting defaults\r\n        if (config.video && config.video instanceof HTMLVideoElement) {\r\n            video = config.video.cloneNode();\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        } else {\r\n            video = document.createElement('video');\r\n\r\n            setSrcObject(mediaStream, video);\r\n\r\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\r\n                if (config.initCallback) {\r\n                    config.initCallback();\r\n                }\r\n            };\r\n\r\n            video.width = config.video.width;\r\n            video.height = config.video.height;\r\n        }\r\n\r\n        video.muted = true;\r\n        video.play();\r\n\r\n        lastTime = new Date().getTime();\r\n        whammy = new Whammy.Video();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\r\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\r\n        }\r\n\r\n        drawFrames(config.frameInterval);\r\n    };\r\n\r\n    /**\r\n     * Draw and push frames to Whammy\r\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n     */\r\n    function drawFrames(frameInterval) {\r\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\r\n\r\n        var duration = new Date().getTime() - lastTime;\r\n        if (!duration) {\r\n            return setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawFrames, 100);\r\n        }\r\n\r\n        // via #206, by Jack i.e. @Seymourr\r\n        lastTime = new Date().getTime();\r\n\r\n        if (video.paused) {\r\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n            // Tweak for Android Chrome\r\n            video.play();\r\n        }\r\n\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        whammy.frames.push({\r\n            duration: duration,\r\n            image: canvas.toDataURL('image/webp')\r\n        });\r\n\r\n        if (!isStopDrawing) {\r\n            setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n    }\r\n\r\n    function asyncLoop(o) {\r\n        var i = -1,\r\n            length = o.length;\r\n\r\n        (function loop() {\r\n            i++;\r\n            if (i === length) {\r\n                o.callback();\r\n                return;\r\n            }\r\n\r\n            // \"setTimeout\" added by Jim McLeod\r\n            setTimeout(function() {\r\n                o.functionToLoop(loop, i);\r\n            }, 1);\r\n        })();\r\n    }\r\n\r\n\r\n    /**\r\n     * remove black frames from the beginning to the specified frame\r\n     * @param {Array} _frames - array of frames to be checked\r\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n     * @returns {Array} - array of frames\r\n     */\r\n    // pull#293 by @volodalexey\r\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\r\n        var localCanvas = document.createElement('canvas');\r\n        localCanvas.width = canvas.width;\r\n        localCanvas.height = canvas.height;\r\n        var context2d = localCanvas.getContext('2d');\r\n        var resultFrames = [];\r\n\r\n        var checkUntilNotBlack = _framesToCheck === -1;\r\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\r\n            _framesToCheck : _frames.length;\r\n        var sampleColor = {\r\n            r: 0,\r\n            g: 0,\r\n            b: 0\r\n        };\r\n        var maxColorDifference = Math.sqrt(\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2)\r\n        );\r\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\r\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\r\n        var doNotCheckNext = false;\r\n\r\n        asyncLoop({\r\n            length: endCheckFrame,\r\n            functionToLoop: function(loop, f) {\r\n                var matchPixCount, endPixCheck, maxPixCount;\r\n\r\n                var finishImage = function() {\r\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\r\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\r\n                    } else {\r\n                        // console.log('frame is passed : ' + f);\r\n                        if (checkUntilNotBlack) {\r\n                            doNotCheckNext = true;\r\n                        }\r\n                        resultFrames.push(_frames[f]);\r\n                    }\r\n                    loop();\r\n                };\r\n\r\n                if (!doNotCheckNext) {\r\n                    var image = new Image();\r\n                    image.onload = function() {\r\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\r\n                        matchPixCount = 0;\r\n                        endPixCheck = imageData.data.length;\r\n                        maxPixCount = imageData.data.length / 4;\r\n\r\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\r\n                            var currentColor = {\r\n                                r: imageData.data[pix],\r\n                                g: imageData.data[pix + 1],\r\n                                b: imageData.data[pix + 2]\r\n                            };\r\n                            var colorDifference = Math.sqrt(\r\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\r\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\r\n                                Math.pow(currentColor.b - sampleColor.b, 2)\r\n                            );\r\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\r\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\r\n                                matchPixCount++;\r\n                            }\r\n                        }\r\n                        finishImage();\r\n                    };\r\n                    image.src = _frames[f].image;\r\n                } else {\r\n                    finishImage();\r\n                }\r\n            },\r\n            callback: function() {\r\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\r\n\r\n                if (resultFrames.length <= 0) {\r\n                    // at least one last frame should be available for next manipulation\r\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\r\n                    resultFrames.push(_frames[_frames.length - 1]);\r\n                }\r\n                callback(resultFrames);\r\n            }\r\n        });\r\n    }\r\n\r\n    var isStopDrawing = false;\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        isStopDrawing = true;\r\n\r\n        var _this = this;\r\n        // analyse of all frames takes some time!\r\n        setTimeout(function() {\r\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\r\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\r\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\r\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\r\n                whammy.frames = frames;\r\n\r\n                // to display advertisement images!\r\n                if (config.advertisement && config.advertisement.length) {\r\n                    whammy.frames = config.advertisement.concat(whammy.frames);\r\n                }\r\n\r\n                /**\r\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\r\n                 * @memberof WhammyRecorder\r\n                 * @example\r\n                 * recorder.stop(function() {\r\n                 *     var blob = recorder.blob;\r\n                 * });\r\n                 */\r\n                whammy.compile(function(blob) {\r\n                    _this.blob = blob;\r\n\r\n                    if (_this.blob.forEach) {\r\n                        _this.blob = new Blob([], {\r\n                            type: 'video/webm'\r\n                        });\r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback(_this.blob);\r\n                    }\r\n                });\r\n            });\r\n        }, 10);\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (isStopDrawing) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (!isStopDrawing) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isStopDrawing = true;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'WhammyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    var video;\r\n    var lastTime;\r\n    var whammy;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WhammyRecorder = WhammyRecorder;\r\n}\n\r\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\r\n// _________\r\n// Whammy.js\r\n\r\n// todo: Firefox now supports webp for webm containers!\r\n// their MediaRecorder implementation works well!\r\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\r\n\r\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Whammy = (function() {\r\n    // a more abstract-ish API\r\n\r\n    function WhammyVideo(duration) {\r\n        this.frames = [];\r\n        this.duration = duration || 1;\r\n        this.quality = 0.8;\r\n    }\r\n\r\n    /**\r\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.add(canvas || context || 'image/webp');\r\n     * @param {string} frame - Canvas || Context || image/webp\r\n     * @param {number} duration - Stick a duration (in milliseconds)\r\n     */\r\n    WhammyVideo.prototype.add = function(frame, duration) {\r\n        if ('canvas' in frame) { //CanvasRenderingContext2D\r\n            frame = frame.canvas;\r\n        }\r\n\r\n        if ('toDataURL' in frame) {\r\n            frame = frame.toDataURL('image/webp', this.quality);\r\n        }\r\n\r\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\r\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\r\n        }\r\n        this.frames.push({\r\n            image: frame,\r\n            duration: duration || this.duration\r\n        });\r\n    };\r\n\r\n    function processInWebWorker(_function) {\r\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n            'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(blob);\r\n        URL.revokeObjectURL(blob);\r\n        return worker;\r\n    }\r\n\r\n    function whammyInWebWorker(frames) {\r\n        function ArrayToWebM(frames) {\r\n            var info = checkFrames(frames);\r\n            if (!info) {\r\n                return [];\r\n            }\r\n\r\n            var clusterMaxDuration = 30000;\r\n\r\n            var EBML = [{\r\n                'id': 0x1a45dfa3, // EBML\r\n                'data': [{\r\n                    'data': 1,\r\n                    'id': 0x4286 // EBMLVersion\r\n                }, {\r\n                    'data': 1,\r\n                    'id': 0x42f7 // EBMLReadVersion\r\n                }, {\r\n                    'data': 4,\r\n                    'id': 0x42f2 // EBMLMaxIDLength\r\n                }, {\r\n                    'data': 8,\r\n                    'id': 0x42f3 // EBMLMaxSizeLength\r\n                }, {\r\n                    'data': 'webm',\r\n                    'id': 0x4282 // DocType\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4287 // DocTypeVersion\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4285 // DocTypeReadVersion\r\n                }]\r\n            }, {\r\n                'id': 0x18538067, // Segment\r\n                'data': [{\r\n                    'id': 0x1549a966, // Info\r\n                    'data': [{\r\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\r\n                        'id': 0x2ad7b1 // TimecodeScale\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x4d80 // MuxingApp\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x5741 // WritingApp\r\n                    }, {\r\n                        'data': doubleToString(info.duration),\r\n                        'id': 0x4489 // Duration\r\n                    }]\r\n                }, {\r\n                    'id': 0x1654ae6b, // Tracks\r\n                    'data': [{\r\n                        'id': 0xae, // TrackEntry\r\n                        'data': [{\r\n                            'data': 1,\r\n                            'id': 0xd7 // TrackNumber\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x73c5 // TrackUID\r\n                        }, {\r\n                            'data': 0,\r\n                            'id': 0x9c // FlagLacing\r\n                        }, {\r\n                            'data': 'und',\r\n                            'id': 0x22b59c // Language\r\n                        }, {\r\n                            'data': 'V_VP8',\r\n                            'id': 0x86 // CodecID\r\n                        }, {\r\n                            'data': 'VP8',\r\n                            'id': 0x258688 // CodecName\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x83 // TrackType\r\n                        }, {\r\n                            'id': 0xe0, // Video\r\n                            'data': [{\r\n                                'data': info.width,\r\n                                'id': 0xb0 // PixelWidth\r\n                            }, {\r\n                                'data': info.height,\r\n                                'id': 0xba // PixelHeight\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            }];\r\n\r\n            //Generate clusters (max duration)\r\n            var frameNumber = 0;\r\n            var clusterTimecode = 0;\r\n            while (frameNumber < frames.length) {\r\n\r\n                var clusterFrames = [];\r\n                var clusterDuration = 0;\r\n                do {\r\n                    clusterFrames.push(frames[frameNumber]);\r\n                    clusterDuration += frames[frameNumber].duration;\r\n                    frameNumber++;\r\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\r\n\r\n                var clusterCounter = 0;\r\n                var cluster = {\r\n                    'id': 0x1f43b675, // Cluster\r\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\r\n                }; //Add cluster to segment\r\n                EBML[1].data.push(cluster);\r\n                clusterTimecode += clusterDuration;\r\n            }\r\n\r\n            return generateEBML(EBML);\r\n        }\r\n\r\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\r\n            return [{\r\n                'data': clusterTimecode,\r\n                'id': 0xe7 // Timecode\r\n            }].concat(clusterFrames.map(function(webp) {\r\n                var block = makeSimpleBlock({\r\n                    discardable: 0,\r\n                    frame: webp.data.slice(4),\r\n                    invisible: 0,\r\n                    keyframe: 1,\r\n                    lacing: 0,\r\n                    trackNum: 1,\r\n                    timecode: Math.round(clusterCounter)\r\n                });\r\n                clusterCounter += webp.duration;\r\n                return {\r\n                    data: block,\r\n                    id: 0xa3\r\n                };\r\n            }));\r\n        }\r\n\r\n        // sums the lengths of all the frames and gets the duration\r\n\r\n        function checkFrames(frames) {\r\n            if (!frames[0]) {\r\n                postMessage({\r\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            var width = frames[0].width,\r\n                height = frames[0].height,\r\n                duration = frames[0].duration;\r\n\r\n            for (var i = 1; i < frames.length; i++) {\r\n                duration += frames[i].duration;\r\n            }\r\n            return {\r\n                duration: duration,\r\n                width: width,\r\n                height: height\r\n            };\r\n        }\r\n\r\n        function numToBuffer(num) {\r\n            var parts = [];\r\n            while (num > 0) {\r\n                parts.push(num & 0xff);\r\n                num = num >> 8;\r\n            }\r\n            return new Uint8Array(parts.reverse());\r\n        }\r\n\r\n        function strToBuffer(str) {\r\n            return new Uint8Array(str.split('').map(function(e) {\r\n                return e.charCodeAt(0);\r\n            }));\r\n        }\r\n\r\n        function bitsToBuffer(bits) {\r\n            var data = [];\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data.push(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return new Uint8Array(data);\r\n        }\r\n\r\n        function generateEBML(json) {\r\n            var ebml = [];\r\n            for (var i = 0; i < json.length; i++) {\r\n                var data = json[i].data;\r\n\r\n                if (typeof data === 'object') {\r\n                    data = generateEBML(data);\r\n                }\r\n\r\n                if (typeof data === 'number') {\r\n                    data = bitsToBuffer(data.toString(2));\r\n                }\r\n\r\n                if (typeof data === 'string') {\r\n                    data = strToBuffer(data);\r\n                }\r\n\r\n                var len = data.size || data.byteLength || data.length;\r\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\r\n                var sizeToString = len.toString(2);\r\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\r\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\r\n\r\n                ebml.push(numToBuffer(json[i].id));\r\n                ebml.push(bitsToBuffer(size));\r\n                ebml.push(data);\r\n            }\r\n\r\n            return new Blob(ebml, {\r\n                type: 'video/webm'\r\n            });\r\n        }\r\n\r\n        function toBinStrOld(bits) {\r\n            var data = '';\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function makeSimpleBlock(data) {\r\n            var flags = 0;\r\n\r\n            if (data.keyframe) {\r\n                flags |= 128;\r\n            }\r\n\r\n            if (data.invisible) {\r\n                flags |= 8;\r\n            }\r\n\r\n            if (data.lacing) {\r\n                flags |= (data.lacing << 1);\r\n            }\r\n\r\n            if (data.discardable) {\r\n                flags |= 1;\r\n            }\r\n\r\n            if (data.trackNum > 127) {\r\n                throw 'TrackNumber > 127 not supported';\r\n            }\r\n\r\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).join('') + data.frame;\r\n\r\n            return out;\r\n        }\r\n\r\n        function parseWebP(riff) {\r\n            var VP8 = riff.RIFF[0].WEBP[0];\r\n\r\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\r\n            for (var i = 0, c = []; i < 4; i++) {\r\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\r\n            }\r\n\r\n            var width, height, tmp;\r\n\r\n            //the code below is literally copied verbatim from the bitstream spec\r\n            tmp = (c[1] << 8) | c[0];\r\n            width = tmp & 0x3FFF;\r\n            tmp = (c[3] << 8) | c[2];\r\n            height = tmp & 0x3FFF;\r\n            return {\r\n                width: width,\r\n                height: height,\r\n                data: VP8,\r\n                riff: riff\r\n            };\r\n        }\r\n\r\n        function getStrLength(string, offset) {\r\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\r\n                var unpadded = i.charCodeAt(0).toString(2);\r\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\r\n            }).join(''), 2);\r\n        }\r\n\r\n        function parseRIFF(string) {\r\n            var offset = 0;\r\n            var chunks = {};\r\n\r\n            while (offset < string.length) {\r\n                var id = string.substr(offset, 4);\r\n                var len = getStrLength(string, offset);\r\n                var data = string.substr(offset + 4 + 4, len);\r\n                offset += 4 + 4 + len;\r\n                chunks[id] = chunks[id] || [];\r\n\r\n                if (id === 'RIFF' || id === 'LIST') {\r\n                    chunks[id].push(parseRIFF(data));\r\n                } else {\r\n                    chunks[id].push(data);\r\n                }\r\n            }\r\n            return chunks;\r\n        }\r\n\r\n        function doubleToString(num) {\r\n            return [].slice.call(\r\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).reverse().join('');\r\n        }\r\n\r\n        var webm = new ArrayToWebM(frames.map(function(frame) {\r\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\r\n            webp.duration = frame.duration;\r\n            return webp;\r\n        }));\r\n\r\n        postMessage(webm);\r\n    }\r\n\r\n    /**\r\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.compile(function(blob) {\r\n     *    // blob.size - blob.type\r\n     * });\r\n     */\r\n    WhammyVideo.prototype.compile = function(callback) {\r\n        var webWorker = processInWebWorker(whammyInWebWorker);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            if (event.data.error) {\r\n                console.error(event.data.error);\r\n                return;\r\n            }\r\n            callback(event.data);\r\n        };\r\n\r\n        webWorker.postMessage(this.frames);\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * A more abstract-ish API.\r\n         * @method\r\n         * @memberof Whammy\r\n         * @example\r\n         * recorder = new Whammy().Video(0.8, 100);\r\n         * @param {?number} speed - 0.8\r\n         * @param {?number} quality - 100\r\n         */\r\n        Video: WhammyVideo\r\n    };\r\n})();\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Whammy = Whammy;\r\n}\n\r\n// ______________ (indexed-db)\r\n// DiskStorage.js\r\n\r\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\n\r\nvar DiskStorage = {\r\n    /**\r\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.init();\r\n     */\r\n    init: function() {\r\n        var self = this;\r\n\r\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\r\n            console.error('IndexedDB API are not available in this browser.');\r\n            return;\r\n        }\r\n\r\n        var dbVersion = 1;\r\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\r\n            db;\r\n        var request = indexedDB.open(dbName, dbVersion);\r\n\r\n        function createObjectStore(dataBase) {\r\n            dataBase.createObjectStore(self.dataStoreName);\r\n        }\r\n\r\n        function putInDB() {\r\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\r\n\r\n            if (self.videoBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\r\n            }\r\n\r\n            if (self.gifBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\r\n            }\r\n\r\n            if (self.audioBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\r\n            }\r\n\r\n            function getFromStore(portionName) {\r\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\r\n                    if (self.callback) {\r\n                        self.callback(event.target.result, portionName);\r\n                    }\r\n                };\r\n            }\r\n\r\n            getFromStore('audioBlob');\r\n            getFromStore('videoBlob');\r\n            getFromStore('gifBlob');\r\n        }\r\n\r\n        request.onerror = self.onError;\r\n\r\n        request.onsuccess = function() {\r\n            db = request.result;\r\n            db.onerror = self.onError;\r\n\r\n            if (db.setVersion) {\r\n                if (db.version !== dbVersion) {\r\n                    var setVersion = db.setVersion(dbVersion);\r\n                    setVersion.onsuccess = function() {\r\n                        createObjectStore(db);\r\n                        putInDB();\r\n                    };\r\n                } else {\r\n                    putInDB();\r\n                }\r\n            } else {\r\n                putInDB();\r\n            }\r\n        };\r\n        request.onupgradeneeded = function(event) {\r\n            createObjectStore(event.target.result);\r\n        };\r\n    },\r\n    /**\r\n     * This method fetches stored blobs from IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Fetch(function(dataURL, type) {\r\n     *     if(type === 'audioBlob') { }\r\n     *     if(type === 'videoBlob') { }\r\n     *     if(type === 'gifBlob')   { }\r\n     * });\r\n     */\r\n    Fetch: function(callback) {\r\n        this.callback = callback;\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This method stores blobs in IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Store({\r\n     *     audioBlob: yourAudioBlob,\r\n     *     videoBlob: yourVideoBlob,\r\n     *     gifBlob  : yourGifBlob\r\n     * });\r\n     */\r\n    Store: function(config) {\r\n        this.audioBlob = config.audioBlob;\r\n        this.videoBlob = config.videoBlob;\r\n        this.gifBlob = config.gifBlob;\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This function is invoked for any known/unknown error.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.onError = function(error){\r\n     *     alerot( JSON.stringify(error) );\r\n     * };\r\n     */\r\n    onError: function(error) {\r\n        console.error(JSON.stringify(error, null, '\\t'));\r\n    },\r\n\r\n    /**\r\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.dataStoreName = 'recordRTC';\r\n     */\r\n    dataStoreName: 'recordRTC',\r\n    dbName: null\r\n};\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.DiskStorage = DiskStorage;\r\n}\n\r\n// ______________\r\n// GifRecorder.js\r\n\r\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\r\n\r\nfunction GifRecorder(mediaStream, config) {\r\n    if (typeof GIFEncoder === 'undefined') {\r\n        var script = document.createElement('script');\r\n        script.src = 'https://www.webrtc-experiment.com/gif-recorder.js';\r\n        (document.body || document.documentElement).appendChild(script);\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (typeof GIFEncoder === 'undefined') {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isLoadedMetaData) {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isHTMLObject) {\r\n            if (!config.width) {\r\n                config.width = video.offsetWidth || 320;\r\n            }\r\n\r\n            if (!config.height) {\r\n                config.height = video.offsetHeight || 240;\r\n            }\r\n\r\n            if (!config.video) {\r\n                config.video = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            if (!config.canvas) {\r\n                config.canvas = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            canvas.width = config.canvas.width || 320;\r\n            canvas.height = config.canvas.height || 240;\r\n\r\n            video.width = config.video.width || 320;\r\n            video.height = config.video.height || 240;\r\n        }\r\n\r\n        // external library to record as GIF images\r\n        gifEncoder = new GIFEncoder();\r\n\r\n        // void setRepeat(int iter) \r\n        // Sets the number of times the set of GIF frames should be played. \r\n        // Default is 1; 0 means play indefinitely.\r\n        gifEncoder.setRepeat(0);\r\n\r\n        // void setFrameRate(Number fps) \r\n        // Sets frame rate in frames per second. \r\n        // Equivalent to setDelay(1000/fps).\r\n        // Using \"setDelay\" instead of \"setFrameRate\"\r\n        gifEncoder.setDelay(config.frameRate || 200);\r\n\r\n        // void setQuality(int quality) \r\n        // Sets quality of color quantization (conversion of images to the \r\n        // maximum 256 colors allowed by the GIF specification). \r\n        // Lower values (minimum = 1) produce better colors, \r\n        // but slow processing significantly. 10 is the default, \r\n        // and produces good color mapping at reasonable speeds. \r\n        // Values greater than 20 do not yield significant improvements in speed.\r\n        gifEncoder.setQuality(config.quality || 10);\r\n\r\n        // Boolean start() \r\n        // This writes the GIF Header and returns false if it fails.\r\n        gifEncoder.start();\r\n\r\n        if (typeof config.onGifRecordingStarted === 'function') {\r\n            config.onGifRecordingStarted();\r\n        }\r\n\r\n        startTime = Date.now();\r\n\r\n        function drawVideoFrame(time) {\r\n            if (self.clearedRecordedData === true) {\r\n                return;\r\n            }\r\n\r\n            if (isPausedRecording) {\r\n                return setTimeout(function() {\r\n                    drawVideoFrame(time);\r\n                }, 100);\r\n            }\r\n\r\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n            if (typeof lastFrameTime === undefined) {\r\n                lastFrameTime = time;\r\n            }\r\n\r\n            // ~10 fps\r\n            if (time - lastFrameTime < 90) {\r\n                return;\r\n            }\r\n\r\n            if (!isHTMLObject && video.paused) {\r\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n                // Tweak for Android Chrome\r\n                video.play();\r\n            }\r\n\r\n            if (!isHTMLObject) {\r\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (config.onGifPreview) {\r\n                config.onGifPreview(canvas.toDataURL('image/png'));\r\n            }\r\n\r\n            gifEncoder.addFrame(context);\r\n            lastFrameTime = time;\r\n        }\r\n\r\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     img.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (lastAnimationFrame) {\r\n            cancelAnimationFrame(lastAnimationFrame);\r\n        }\r\n\r\n        endTime = Date.now();\r\n\r\n        /**\r\n         * @property {Blob} blob - The recorded blob object.\r\n         * @memberof GifRecorder\r\n         * @example\r\n         * recorder.stop(function(){\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\r\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\r\n            type: 'image/gif'\r\n        });\r\n\r\n        callback(this.blob);\r\n\r\n        // bug: find a way to clear old recorded blobs\r\n        gifEncoder.stream().bin = [];\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        self.clearedRecordedData = true;\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        if (gifEncoder) {\r\n            gifEncoder.stream().bin = [];\r\n        }\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'GifRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    if (isHTMLObject) {\r\n        if (mediaStream instanceof CanvasRenderingContext2D) {\r\n            context = mediaStream;\r\n            canvas = context.canvas;\r\n        } else if (mediaStream instanceof HTMLCanvasElement) {\r\n            context = mediaStream.getContext('2d');\r\n            canvas = mediaStream;\r\n        }\r\n    }\r\n\r\n    var isLoadedMetaData = true;\r\n\r\n    if (!isHTMLObject) {\r\n        var video = document.createElement('video');\r\n        video.muted = true;\r\n        video.autoplay = true;\r\n        video.playsInline = true;\r\n\r\n        isLoadedMetaData = false;\r\n        video.onloadedmetadata = function() {\r\n            isLoadedMetaData = true;\r\n        };\r\n\r\n        setSrcObject(mediaStream, video);\r\n\r\n        video.play();\r\n    }\r\n\r\n    var lastAnimationFrame = null;\r\n    var startTime, endTime, lastFrameTime;\r\n\r\n    var gifEncoder;\r\n\r\n    var self = this;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.GifRecorder = GifRecorder;\r\n}\n\r\n// Last time updated: 2019-06-21 4:09:42 AM UTC\r\n\r\n// ________________________\r\n// MultiStreamsMixer v1.2.2\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\nfunction MultiStreamsMixer(arrayOfMediaStreams, elementClass) {\r\n\r\n    var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n    (function(that) {\r\n        if (typeof RecordRTC !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (!that) {\r\n            return;\r\n        }\r\n\r\n        if (typeof window !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (typeof global === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        global.navigator = {\r\n            userAgent: browserFakeUserAgent,\r\n            getUserMedia: function() {}\r\n        };\r\n\r\n        if (!global.console) {\r\n            global.console = {};\r\n        }\r\n\r\n        if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n            global.console.error = global.console.log = global.console.log || function() {\r\n                console.log(arguments);\r\n            };\r\n        }\r\n\r\n        if (typeof document === 'undefined') {\r\n            /*global document:true */\r\n            that.document = {\r\n                documentElement: {\r\n                    appendChild: function() {\r\n                        return '';\r\n                    }\r\n                }\r\n            };\r\n\r\n            document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n                var obj = {\r\n                    getContext: function() {\r\n                        return obj;\r\n                    },\r\n                    play: function() {},\r\n                    pause: function() {},\r\n                    drawImage: function() {},\r\n                    toDataURL: function() {\r\n                        return '';\r\n                    },\r\n                    style: {}\r\n                };\r\n                return obj;\r\n            };\r\n\r\n            that.HTMLVideoElement = function() {};\r\n        }\r\n\r\n        if (typeof location === 'undefined') {\r\n            /*global location:true */\r\n            that.location = {\r\n                protocol: 'file:',\r\n                href: '',\r\n                hash: ''\r\n            };\r\n        }\r\n\r\n        if (typeof screen === 'undefined') {\r\n            /*global screen:true */\r\n            that.screen = {\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        if (typeof URL === 'undefined') {\r\n            /*global screen:true */\r\n            that.URL = {\r\n                createObjectURL: function() {\r\n                    return '';\r\n                },\r\n                revokeObjectURL: function() {\r\n                    return '';\r\n                }\r\n            };\r\n        }\r\n\r\n        /*global window:true */\r\n        that.window = global;\r\n    })(typeof global !== 'undefined' ? global : null);\r\n\r\n    // requires: chrome://flags/#enable-experimental-web-platform-features\r\n\r\n    elementClass = elementClass || 'multi-streams-mixer';\r\n\r\n    var videos = [];\r\n    var isStopDrawingFrames = false;\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    canvas.style.opacity = 0;\r\n    canvas.style.position = 'absolute';\r\n    canvas.style.zIndex = -1;\r\n    canvas.style.top = '-1000em';\r\n    canvas.style.left = '-1000em';\r\n    canvas.className = elementClass;\r\n    (document.body || document.documentElement).appendChild(canvas);\r\n\r\n    this.disableLogs = false;\r\n    this.frameInterval = 10;\r\n\r\n    this.width = 360;\r\n    this.height = 240;\r\n\r\n    // use gain node to prevent echo\r\n    this.useGainNode = true;\r\n\r\n    var self = this;\r\n\r\n    // _____________________________\r\n    // Cross-Browser-Declarations.js\r\n\r\n    // WebAudio API representer\r\n    var AudioContext = window.AudioContext;\r\n\r\n    if (typeof AudioContext === 'undefined') {\r\n        if (typeof webkitAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = webkitAudioContext;\r\n        }\r\n\r\n        if (typeof mozAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = mozAudioContext;\r\n        }\r\n    }\r\n\r\n    /*jshint -W079 */\r\n    var URL = window.URL;\r\n\r\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n        /*global URL:true */\r\n        URL = webkitURL;\r\n    }\r\n\r\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n        }\r\n\r\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.mozGetUserMedia;\r\n        }\r\n    }\r\n\r\n    var MediaStream = window.MediaStream;\r\n\r\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n        MediaStream = webkitMediaStream;\r\n    }\r\n\r\n    /*global MediaStream:true */\r\n    if (typeof MediaStream !== 'undefined') {\r\n        // override \"stop\" method for all browsers\r\n        if (typeof MediaStream.prototype.stop === 'undefined') {\r\n            MediaStream.prototype.stop = function() {\r\n                this.getTracks().forEach(function(track) {\r\n                    track.stop();\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    var Storage = {};\r\n\r\n    if (typeof AudioContext !== 'undefined') {\r\n        Storage.AudioContext = AudioContext;\r\n    } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Storage.AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    function setSrcObject(stream, element) {\r\n        if ('srcObject' in element) {\r\n            element.srcObject = stream;\r\n        } else if ('mozSrcObject' in element) {\r\n            element.mozSrcObject = stream;\r\n        } else {\r\n            element.srcObject = stream;\r\n        }\r\n    }\r\n\r\n    this.startDrawingFrames = function() {\r\n        drawVideosToCanvas();\r\n    };\r\n\r\n    function drawVideosToCanvas() {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var videosLength = videos.length;\r\n\r\n        var fullcanvas = false;\r\n        var remaining = [];\r\n        videos.forEach(function(video) {\r\n            if (!video.stream) {\r\n                video.stream = {};\r\n            }\r\n\r\n            if (video.stream.fullcanvas) {\r\n                fullcanvas = video;\r\n            } else {\r\n                // todo: video.stream.active or video.stream.live to fix blank frames issues?\r\n                remaining.push(video);\r\n            }\r\n        });\r\n\r\n        if (fullcanvas) {\r\n            canvas.width = fullcanvas.stream.width;\r\n            canvas.height = fullcanvas.stream.height;\r\n        } else if (remaining.length) {\r\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\r\n\r\n            var height = 1;\r\n            if (videosLength === 3 || videosLength === 4) {\r\n                height = 2;\r\n            }\r\n            if (videosLength === 5 || videosLength === 6) {\r\n                height = 3;\r\n            }\r\n            if (videosLength === 7 || videosLength === 8) {\r\n                height = 4;\r\n            }\r\n            if (videosLength === 9 || videosLength === 10) {\r\n                height = 5;\r\n            }\r\n            canvas.height = remaining[0].height * height;\r\n        } else {\r\n            canvas.width = self.width || 360;\r\n            canvas.height = self.height || 240;\r\n        }\r\n\r\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\r\n            drawImage(fullcanvas);\r\n        }\r\n\r\n        remaining.forEach(function(video, idx) {\r\n            drawImage(video, idx);\r\n        });\r\n\r\n        setTimeout(drawVideosToCanvas, self.frameInterval);\r\n    }\r\n\r\n    function drawImage(video, idx) {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var x = 0;\r\n        var y = 0;\r\n        var width = video.width;\r\n        var height = video.height;\r\n\r\n        if (idx === 1) {\r\n            x = video.width;\r\n        }\r\n\r\n        if (idx === 2) {\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 3) {\r\n            x = video.width;\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 4) {\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 5) {\r\n            x = video.width;\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 6) {\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (idx === 7) {\r\n            x = video.width;\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (typeof video.stream.left !== 'undefined') {\r\n            x = video.stream.left;\r\n        }\r\n\r\n        if (typeof video.stream.top !== 'undefined') {\r\n            y = video.stream.top;\r\n        }\r\n\r\n        if (typeof video.stream.width !== 'undefined') {\r\n            width = video.stream.width;\r\n        }\r\n\r\n        if (typeof video.stream.height !== 'undefined') {\r\n            height = video.stream.height;\r\n        }\r\n\r\n        context.drawImage(video, x, y, width, height);\r\n\r\n        if (typeof video.stream.onRender === 'function') {\r\n            video.stream.onRender(context, x, y, width, height, idx);\r\n        }\r\n    }\r\n\r\n    function getMixedStream() {\r\n        isStopDrawingFrames = false;\r\n        var mixedVideoStream = getMixedVideoStream();\r\n\r\n        var mixedAudioStream = getMixedAudioStream();\r\n        if (mixedAudioStream) {\r\n            mixedAudioStream.getTracks().filter(function(t) {\r\n                return t.kind === 'audio';\r\n            }).forEach(function(track) {\r\n                mixedVideoStream.addTrack(track);\r\n            });\r\n        }\r\n\r\n        var fullcanvas;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (stream.fullcanvas) {\r\n                fullcanvas = true;\r\n            }\r\n        });\r\n\r\n        // mixedVideoStream.prototype.appendStreams = appendStreams;\r\n        // mixedVideoStream.prototype.resetVideoStreams = resetVideoStreams;\r\n        // mixedVideoStream.prototype.clearRecordedData = clearRecordedData;\r\n\r\n        return mixedVideoStream;\r\n    }\r\n\r\n    function getMixedVideoStream() {\r\n        resetVideoStreams();\r\n\r\n        var capturedStream;\r\n\r\n        if ('captureStream' in canvas) {\r\n            capturedStream = canvas.captureStream();\r\n        } else if ('mozCaptureStream' in canvas) {\r\n            capturedStream = canvas.mozCaptureStream();\r\n        } else if (!self.disableLogs) {\r\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\r\n        }\r\n\r\n        var videoStream = new MediaStream();\r\n\r\n        capturedStream.getTracks().filter(function(t) {\r\n            return t.kind === 'video';\r\n        }).forEach(function(track) {\r\n            videoStream.addTrack(track);\r\n        });\r\n\r\n        canvas.stream = videoStream;\r\n\r\n        return videoStream;\r\n    }\r\n\r\n    function getMixedAudioStream() {\r\n        // via: @pehrsons\r\n        if (!Storage.AudioContextConstructor) {\r\n            Storage.AudioContextConstructor = new Storage.AudioContext();\r\n        }\r\n\r\n        self.audioContext = Storage.AudioContextConstructor;\r\n\r\n        self.audioSources = [];\r\n\r\n        if (self.useGainNode === true) {\r\n            self.gainNode = self.audioContext.createGain();\r\n            self.gainNode.connect(self.audioContext.destination);\r\n            self.gainNode.gain.value = 0; // don't hear self\r\n        }\r\n\r\n        var audioTracksLength = 0;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            audioTracksLength++;\r\n\r\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n\r\n            if (self.useGainNode === true) {\r\n                audioSource.connect(self.gainNode);\r\n            }\r\n\r\n            self.audioSources.push(audioSource);\r\n        });\r\n\r\n        if (!audioTracksLength) {\r\n            // because \"self.audioContext\" is not initialized\r\n            // that's why we've to ignore rest of the code\r\n            return;\r\n        }\r\n\r\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n        self.audioSources.forEach(function(audioSource) {\r\n            audioSource.connect(self.audioDestination);\r\n        });\r\n        return self.audioDestination.stream;\r\n    }\r\n\r\n    function getVideo(stream) {\r\n        var video = document.createElement('video');\r\n\r\n        setSrcObject(stream, video);\r\n\r\n        video.className = elementClass;\r\n\r\n        video.muted = true;\r\n        video.volume = 0;\r\n\r\n        video.width = stream.width || self.width || 360;\r\n        video.height = stream.height || self.height || 240;\r\n\r\n        video.play();\r\n\r\n        return video;\r\n    }\r\n\r\n    this.appendStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        streams.forEach(function(stream) {\r\n            var newStream = new MediaStream();\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                var video = getVideo(stream);\r\n                video.stream = stream;\r\n                videos.push(video);\r\n\r\n                newStream.addTrack(stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                })[0]);\r\n            }\r\n\r\n            if (stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                }).length) {\r\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n                self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n                audioSource.connect(self.audioDestination);\r\n\r\n                newStream.addTrack(self.audioDestination.stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'audio';\r\n                })[0]);\r\n            }\r\n\r\n            arrayOfMediaStreams.push(newStream);\r\n        });\r\n    };\r\n\r\n    this.releaseStreams = function() {\r\n        videos = [];\r\n        isStopDrawingFrames = true;\r\n\r\n        if (self.gainNode) {\r\n            self.gainNode.disconnect();\r\n            self.gainNode = null;\r\n        }\r\n\r\n        if (self.audioSources.length) {\r\n            self.audioSources.forEach(function(source) {\r\n                source.disconnect();\r\n            });\r\n            self.audioSources = [];\r\n        }\r\n\r\n        if (self.audioDestination) {\r\n            self.audioDestination.disconnect();\r\n            self.audioDestination = null;\r\n        }\r\n\r\n        if (self.audioContext) {\r\n            self.audioContext.close();\r\n        }\r\n\r\n        self.audioContext = null;\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (canvas.stream) {\r\n            canvas.stream.stop();\r\n            canvas.stream = null;\r\n        }\r\n    };\r\n\r\n    this.resetVideoStreams = function(streams) {\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        resetVideoStreams(streams);\r\n    };\r\n\r\n    function resetVideoStreams(streams) {\r\n        videos = [];\r\n        streams = streams || arrayOfMediaStreams;\r\n\r\n        // via: @adrian-ber\r\n        streams.forEach(function(stream) {\r\n            if (!stream.getTracks().filter(function(t) {\r\n                    return t.kind === 'video';\r\n                }).length) {\r\n                return;\r\n            }\r\n\r\n            var video = getVideo(stream);\r\n            video.stream = stream;\r\n            videos.push(video);\r\n        });\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamsMixer';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    this.getMixedStream = getMixedStream;\r\n\r\n}\r\n\r\nif (typeof RecordRTC === 'undefined') {\r\n    if (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n        module.exports = MultiStreamsMixer;\r\n    }\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('MultiStreamsMixer', [], function() {\r\n            return MultiStreamsMixer;\r\n        });\r\n    }\r\n}\n\r\n// ______________________\r\n// MultiStreamRecorder.js\r\n\r\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\r\n\r\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\r\n\r\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\r\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\r\n    var self = this;\r\n\r\n    var mixer;\r\n    var mediaRecorder;\r\n\r\n    options = options || {\r\n        elementClass: 'multi-streams-mixer',\r\n        mimeType: 'video/webm',\r\n        video: {\r\n            width: 360,\r\n            height: 240\r\n        }\r\n    };\r\n\r\n    if (!options.frameInterval) {\r\n        options.frameInterval = 10;\r\n    }\r\n\r\n    if (!options.video) {\r\n        options.video = {};\r\n    }\r\n\r\n    if (!options.video.width) {\r\n        options.video.width = 360;\r\n    }\r\n\r\n    if (!options.video.height) {\r\n        options.video.height = 240;\r\n    }\r\n\r\n    /**\r\n     * This method records all MediaStreams.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // github/muaz-khan/MultiStreamsMixer\r\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams, options.elementClass || 'multi-streams-mixer');\r\n\r\n        if (getAllVideoTracks().length) {\r\n            mixer.frameInterval = options.frameInterval || 10;\r\n            mixer.width = options.video.width || 360;\r\n            mixer.height = options.video.height || 240;\r\n            mixer.startDrawingFrames();\r\n        }\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n\r\n        // record using MediaRecorder API\r\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\r\n        mediaRecorder.record();\r\n    };\r\n\r\n    function getAllVideoTracks() {\r\n        var tracks = [];\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            getTracks(stream, 'video').forEach(function(track) {\r\n                tracks.push(track);\r\n            });\r\n        });\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        mediaRecorder.stop(function(blob) {\r\n            self.blob = blob;\r\n\r\n            callback(blob);\r\n\r\n            self.clearRecordedData();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (mixer) {\r\n            mixer.releaseStreams();\r\n            mixer = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add extra media-streams to existing recordings.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.addStreams([newAudioStream, newVideoStream]);\r\n     */\r\n    this.addStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        if (!mediaRecorder || !mixer) {\r\n            return;\r\n        }\r\n\r\n        mixer.appendStreams(streams);\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n     */\r\n    this.resetVideoStreams = function(streams) {\r\n        if (!mixer) {\r\n            return;\r\n        }\r\n\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        mixer.resetVideoStreams(streams);\r\n    };\r\n\r\n    /**\r\n     * Returns MultiStreamsMixer\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * let mixer = recorder.getMixer();\r\n     * mixer.appendStreams([newStream]);\r\n     */\r\n    this.getMixer = function() {\r\n        return mixer;\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\r\n}\n\r\n// _____________________\r\n// RecordRTC.promises.js\r\n\r\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * // Note: You can access all RecordRTC API using \"recorder.recordRTC\" e.g. \r\n * recorder.recordRTC.onStateChanged = function(state) {};\r\n * recorder.recordRTC.setRecordingDuration(5000);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction RecordRTCPromisesHandler(mediaStream, options) {\r\n    if (!this) {\r\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\r\n    }\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    var self = this;\r\n\r\n    /**\r\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internal = recorder.recordRTC.getInternalRecorder();\r\n     * alert(internal instanceof MediaStreamRecorder);\r\n     * recorder.recordRTC.onStateChanged = function(state) {};\r\n     */\r\n    self.recordRTC = new RecordRTC(mediaStream, options);\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.startRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.startRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.startRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method stops the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.stopRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.stopRecording(function(url) {\r\n                    self.blob = self.recordRTC.getBlob();\r\n\r\n                    if (!self.blob || !self.blob.size) {\r\n                        reject('Empty blob.', self.blob);\r\n                        return;\r\n                    }\r\n\r\n                    resolve(url);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.pauseRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.pauseRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.pauseRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.resumeRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.resumeRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.resumeRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns data-url for the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getDataURL().then(function(dataURL) {\r\n     *         window.open(dataURL);\r\n     *     }).catch(errorCB);;\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.getDataURL(function(dataURL) {\r\n                    resolve(dataURL);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getBlob().then(function(blob) {})\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getBlob = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getBlob());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the internal recording object.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let internalRecorder = await recorder.getInternalRecorder();\r\n     * if(internalRecorder instanceof MultiStreamRecorder) {\r\n     *     internalRecorder.addStreams([newAudioStream]);\r\n     *     internalRecorder.resetVideoStreams([screenStream]);\r\n     * }\r\n     * @returns {Object} \r\n     */\r\n    this.getInternalRecorder = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getInternalRecorder());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.reset();\r\n     * recorder.startRecording(); // record again\r\n     */\r\n    this.reset = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.reset());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Destroy RecordRTC instance. Clear all recorders and objects.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.destroy().then(successCB).catch(errorCB);\r\n     */\r\n    this.destroy = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.destroy());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get recorder's readonly state.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * let state = await recorder.getState();\r\n     * // or\r\n     * recorder.getState().then(state => { console.log(state); })\r\n     * @returns {String} Returns recording state.\r\n     */\r\n    this.getState = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                resolve(self.recordRTC.getState());\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * await recorder.stopRecording();\r\n     * let blob = recorder.getBlob(); // or \"recorder.recordRTC.blob\"\r\n     * invokeSaveAsDialog(blob);\r\n     */\r\n    this.blob = null;\r\n\r\n    /**\r\n     * RecordRTC version number\r\n     * @property {String} version - Release version number.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @static\r\n     * @readonly\r\n     * @example\r\n     * alert(recorder.version);\r\n     */\r\n    this.version = '5.6.2';\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\r\n}\n\r\n// ______________________\r\n// WebAssemblyRecorder.js\r\n\r\n/**\r\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\r\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}\r\n * @author {@link https://MuazKhan.com|Muaz Khan}\r\n * @typedef WebAssemblyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WebAssemblyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}\r\n */\r\nfunction WebAssemblyRecorder(stream, config) {\r\n    // based on: github.com/GoogleChromeLabs/webm-wasm\r\n\r\n    if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\r\n        // because it fixes readable/writable streams issues\r\n        console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    config.width = config.width || 640;\r\n    config.height = config.height || 480;\r\n    config.frameRate = config.frameRate || 30;\r\n    config.bitrate = config.bitrate || 1200;\r\n    config.realtime = config.realtime || true;\r\n\r\n    function createBufferURL(buffer, type) {\r\n        return URL.createObjectURL(new Blob([buffer], {\r\n            type: type || ''\r\n        }));\r\n    }\r\n\r\n    var finished;\r\n\r\n    function cameraStream() {\r\n        return new ReadableStream({\r\n            start: function(controller) {\r\n                var cvs = document.createElement('canvas');\r\n                var video = document.createElement('video');\r\n                var first = true;\r\n                video.srcObject = stream;\r\n                video.muted = true;\r\n                video.height = config.height;\r\n                video.width = config.width;\r\n                video.volume = 0;\r\n                video.onplaying = function() {\r\n                    cvs.width = config.width;\r\n                    cvs.height = config.height;\r\n                    var ctx = cvs.getContext('2d');\r\n                    var frameTimeout = 1000 / config.frameRate;\r\n                    var cameraTimer = setInterval(function f() {\r\n                        if (finished) {\r\n                            clearInterval(cameraTimer);\r\n                            controller.close();\r\n                        }\r\n\r\n                        if (first) {\r\n                            first = false;\r\n                            if (config.onVideoProcessStarted) {\r\n                                config.onVideoProcessStarted();\r\n                            }\r\n                        }\r\n\r\n                        ctx.drawImage(video, 0, 0);\r\n                        if (controller._controlledReadableStream.state !== 'closed') {\r\n                            try {\r\n                                controller.enqueue(\r\n                                    ctx.getImageData(0, 0, config.width, config.height)\r\n                                );\r\n                            } catch (e) {}\r\n                        }\r\n                    }, frameTimeout);\r\n                };\r\n                video.play();\r\n            }\r\n        });\r\n    }\r\n\r\n    var worker;\r\n\r\n    function startRecording(stream, buffer) {\r\n        if (!config.workerPath && !buffer) {\r\n            finished = false;\r\n\r\n            // is it safe to use @latest ?\r\n\r\n            fetch(\r\n                'https://unpkg.com/webm-wasm@latest/dist/webm-worker.js'\r\n            ).then(function(r) {\r\n                r.arrayBuffer().then(function(buffer) {\r\n                    startRecording(stream, buffer);\r\n                });\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!config.workerPath && buffer instanceof ArrayBuffer) {\r\n            var blob = new Blob([buffer], {\r\n                type: 'text/javascript'\r\n            });\r\n            config.workerPath = URL.createObjectURL(blob);\r\n        }\r\n\r\n        if (!config.workerPath) {\r\n            console.error('workerPath parameter is missing.');\r\n        }\r\n\r\n        worker = new Worker(config.workerPath);\r\n\r\n        worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === 'READY') {\r\n                worker.postMessage({\r\n                    width: config.width,\r\n                    height: config.height,\r\n                    bitrate: config.bitrate || 1200,\r\n                    timebaseDen: config.frameRate || 30,\r\n                    realtime: config.realtime\r\n                });\r\n\r\n                cameraStream().pipeTo(new WritableStream({\r\n                    write: function(image) {\r\n                        if (finished) {\r\n                            console.error('Got image, but recorder is finished!');\r\n                            return;\r\n                        }\r\n\r\n                        worker.postMessage(image.data.buffer, [image.data.buffer]);\r\n                    }\r\n                }));\r\n            } else if (!!event.data) {\r\n                if (!isPaused) {\r\n                    arrayOfBuffers.push(event.data);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n        startRecording(stream);\r\n\r\n        if (typeof config.initCallback === 'function') {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    var isPaused;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPaused = false;\r\n    };\r\n\r\n    function terminate(callback) {\r\n        if (!worker) {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Wait for null event data to indicate that the encoding is complete\r\n        worker.addEventListener('message', function(event) {\r\n            if (event.data === null) {\r\n                worker.terminate();\r\n                worker = null;\r\n\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            }\r\n        });\r\n\r\n        worker.postMessage(null);\r\n    }\r\n\r\n    var arrayOfBuffers = [];\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        finished = true;\r\n\r\n        var recorder = this;\r\n\r\n        terminate(function() {\r\n            recorder.blob = new Blob(arrayOfBuffers, {\r\n                type: 'video/webm'\r\n            });\r\n\r\n            callback(recorder.blob);\r\n        });\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'WebAssemblyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        arrayOfBuffers = [];\r\n        isPaused = false;\r\n        this.blob = null;\r\n\r\n        // todo: if recording-ON then STOP it first\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - The recorded blob object.\r\n     * @memberof WebAssemblyRecorder\r\n     * @example\r\n     * recorder.stop(function(){\r\n     *     var blob = recorder.blob;\r\n     * });\r\n     */\r\n    this.blob = null;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\r\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}